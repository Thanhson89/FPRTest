Base path: /home/thanh/fpt
Config file: /home/thanh/fpt/default.cfg
default-rnd = rnd64
nlopt-cc = gcc -std=c99 -O3
opt-exact = true
develop = false
log-append-date = start
uncertainty = false
rel-error = false
opt-approx = false
proof-record = false
find-bounds = true
proof-dir = proofs
opt-f-abs-tol = 0.01
fail-on-exception = true
print-opt-lower-bounds = true
bb-compile = {base}/b_and_b/compile.sh {base} {input} {out}
z3-python-lib = 
opt-x-abs-tol = 0.01
export-error-bounds = 
opt-f-rel-tol = 0.01
opt-x-rel-tol = 0.0
rel-error-threshold = 0.0001
bb-alg = opt0
log-base-dir = log
intermediate-opt = false
z3-interval-bounds = true
opt-max-iters = 1000000
abs-error = true
z3-bin = 
maxima-simplification = false
debug = true
export-error-bounds-data = 
fp-power2-model = true
opt = bb
default-var-type = float64
verbosity = 2
ulp-error = false
opt-timeout = 10000
nlopt-lib = -lnlopt -lm
tmp-base-dir = tmp
unique-indices = false
z3-seed = 0
tmp-date = false
z3-python-cmd = python
const-approx-real-vars = false
eval_const_expr: (-(1))
result: -1
eval_const_expr: 1
result: 1
eval_const_expr: 0
result: 0
eval_const_expr: 1
result: 1
eval_const_expr: (-(1))
result: -1
eval_const_expr: (-(1))
result: -1
eval_const_expr: 1
result: 1
eval_const_expr: 0
result: 0
eval_const_expr: 1
result: 1
eval_const_expr: (-(1))
result: -1
eval_const_expr: (-(1))
result: -1
eval_const_expr: 1
result: 1
eval_const_expr: 0
result: 0
eval_const_expr: 1
result: 1
eval_const_expr: (-(1))
result: -1
eval_const_expr: (-(1))
result: -1
eval_const_expr: 1
result: 1
eval_const_expr: 0
result: 0
eval_const_expr: 1
result: 1
eval_const_expr: (-(1))
result: -1
eval_const_expr: (-(1))
result: -1
eval_const_expr: 1
result: 1
eval_const_expr: 0
result: 0
eval_const_expr: 1
result: 1
eval_const_expr: (-(1))
result: -1
eval_const_expr: (-(1))
result: -1
eval_const_expr: 1
result: 1
eval_const_expr: 0
result: 0
eval_const_expr: 1
result: 1
eval_const_expr: (-(1))
result: -1
eval_const_expr: (-(1))
result: -1
eval_const_expr: 1
result: 1
eval_const_expr: 0
result: 0
eval_const_expr: 1
result: 1
eval_const_expr: (-(1))
result: -1
eval_const_expr: (-(1))
result: -1
eval_const_expr: 1
result: 1
eval_const_expr: 0
result: 0
eval_const_expr: 1
result: 1
eval_const_expr: (-(1))
result: -1
eval_const_expr: (-(1))
result: -1
eval_const_expr: 1
result: 1
eval_const_expr: 0
result: 0
eval_const_expr: 1
result: 1
eval_const_expr: (-(1))
result: -1
eval_const_expr: (-(1))
result: -1
eval_const_expr: 1
result: 1
eval_const_expr: 0
result: 0
eval_const_expr: 1
result: 1
eval_const_expr: (-(1))
result: -1
eval_const_expr: (-(1))
result: -1
eval_const_expr: 1
result: 1
eval_const_expr: 0
result: 0
eval_const_expr: 1
result: 1
eval_const_expr: (-(1))
result: -1
eval_const_expr: (-(1))
result: -1
eval_const_expr: 1
result: 1
eval_const_expr: 0
result: 0
eval_const_expr: 1
result: 1
eval_const_expr: (-(1))
result: -1
eval_const_expr: (-(1))
result: -1
eval_const_expr: 1
result: 1
eval_const_expr: 0
result: 0
eval_const_expr: 1
result: 1
eval_const_expr: (-(1))
result: -1
eval_const_expr: (-(1))
result: -1
eval_const_expr: 1
result: 1
eval_const_expr: 0
result: 0
eval_const_expr: 1
result: 1
eval_const_expr: (-(1))
result: -1
eval_const_expr: (-(1))
result: -1
eval_const_expr: 1
result: 1
eval_const_expr: 0
result: 0
eval_const_expr: 1
result: 1
eval_const_expr: (-(1))
result: -1
eval_const_expr: (-((2827894930252577/2500000000000000)))
result: -2827894930252577/2500000000000000
eval_const_expr: (1994222834709629/200000000000000)
result: 1994222834709629/200000000000000
eval_const_expr: (1274841106914257/200000000000000)
result: 1274841106914257/200000000000000
eval_const_expr: (14771345179975999/10000000000000000)
result: 14771345179975999/10000000000000000
eval_const_expr: (2304808758576443/250000000000000)
result: 2304808758576443/250000000000000
eval_const_expr: (-((2491081851057709/250000000000000)))
result: -2491081851057709/250000000000000
eval_const_expr: (2131158074386537/500000000000000)
result: 2131158074386537/500000000000000
eval_const_expr: (4686522586566541/1000000000000000)
result: 4686522586566541/1000000000000000
eval_const_expr: (9536941819547941/1000000000000000)
result: 9536941819547941/1000000000000000
eval_const_expr: (-((470770215245199/50000000000000)))
result: -470770215245199/50000000000000
eval_const_expr: (5788815619620797/1000000000000000)
result: 5788815619620797/1000000000000000
eval_const_expr: (9595646257407019/1000000000000000)
result: 9595646257407019/1000000000000000
eval_const_expr: (1355147819487481/200000000000000)
result: 1355147819487481/200000000000000
eval_const_expr: (9224081660200493/1000000000000000)
result: 9224081660200493/1000000000000000
eval_const_expr: (-((4862496084959629/500000000000000)))
result: -4862496084959629/500000000000000
eval_const_expr: (6225620863768981/1000000000000000)
result: 6225620863768981/1000000000000000
eval_const_expr: (-((1576729160064267/200000000000000)))
result: -1576729160064267/200000000000000
eval_const_expr: (-((4182688149163829/1250000000000000)))
result: -4182688149163829/1250000000000000
eval_const_expr: (-((767009899096057/500000000000000)))
result: -767009899096057/500000000000000
eval_const_expr: (-((5670014627011071/1000000000000000)))
result: -5670014627011071/1000000000000000
eval_const_expr: (1141763989805051/400000000000000)
result: 1141763989805051/400000000000000
eval_const_expr: (-((2241528915269991/250000000000000)))
result: -2241528915269991/250000000000000
eval_const_expr: (-((9430508080912379/1000000000000000)))
result: -9430508080912379/1000000000000000
eval_const_expr: (472661195985021/50000000000000)
result: 472661195985021/50000000000000
eval_const_expr: (-((14562180621033063/5000000000000000)))
result: -14562180621033063/5000000000000000
eval_const_expr: (-((1963120611433/800000000000)))
result: -1963120611433/800000000000
eval_const_expr: (-((8057870155805773/20000000000000000)))
result: -8057870155805773/20000000000000000
eval_const_expr: (775472717350393/500000000000000)
result: 775472717350393/500000000000000
eval_const_expr: (826878292304889/250000000000000)
result: 826878292304889/250000000000000
eval_const_expr: (3942230226576191/1000000000000000)
result: 3942230226576191/1000000000000000
eval_const_expr: (4069789500263667/500000000000000)
result: 4069789500263667/500000000000000
eval_const_expr: (-((2300368983996033/1000000000000000)))
result: -2300368983996033/1000000000000000
eval_const_expr: (-((952765572948147/250000000000000)))
result: -952765572948147/250000000000000
eval_const_expr: (24136252216765897/10000000000000000)
result: 24136252216765897/10000000000000000
eval_const_expr: (-((3930292426663769/1000000000000000)))
result: -3930292426663769/1000000000000000
eval_const_expr: (-((6674615794248657/1000000000000000)))
result: -6674615794248657/1000000000000000
eval_const_expr: (-((3251999686764889/500000000000000)))
result: -3251999686764889/500000000000000
eval_const_expr: (15313778346372601/2000000000000000)
result: 15313778346372601/2000000000000000
eval_const_expr: (5626784793219439/1000000000000000)
result: 5626784793219439/1000000000000000
eval_const_expr: (3211748331564369/500000000000000)
result: 3211748331564369/500000000000000
eval_const_expr: (5314099728080993/1000000000000000)
result: 5314099728080993/1000000000000000
eval_const_expr: (31691918757372157/5000000000000000)
result: 31691918757372157/5000000000000000
eval_const_expr: (8824148805219263/1000000000000000)
result: 8824148805219263/1000000000000000
eval_const_expr: (1758164327895539/250000000000000)
result: 1758164327895539/250000000000000
eval_const_expr: (-((5462048454025581/1000000000000000)))
result: -5462048454025581/1000000000000000
eval_const_expr: (-((467764930355827/50000000000000)))
result: -467764930355827/50000000000000
eval_const_expr: (-((4477180195806909/2000000000000000)))
result: -4477180195806909/2000000000000000
eval_const_expr: (-((6307886269679301/1000000000000000)))
result: -6307886269679301/1000000000000000
eval_const_expr: (-((13602951095674367/5000000000000000)))
result: -13602951095674367/5000000000000000
eval_const_expr: (7497676058034859/1000000000000000)
result: 7497676058034859/1000000000000000
eval_const_expr: (2115298428275981/250000000000000)
result: 2115298428275981/250000000000000
eval_const_expr: (9606658664005433/1000000000000000)
result: 9606658664005433/1000000000000000
eval_const_expr: (861278755548661/125000000000000)
result: 861278755548661/125000000000000
eval_const_expr: (-((1031230628976247/250000000000000)))
result: -1031230628976247/250000000000000
eval_const_expr: (4318127679618291/500000000000000)
result: 4318127679618291/500000000000000
eval_const_expr: (-((1147833077546627/125000000000000)))
result: -1147833077546627/125000000000000
eval_const_expr: (2644824291658443/1000000000000000)
result: 2644824291658443/1000000000000000
eval_const_expr: (1664652292923683/200000000000000)
result: 1664652292923683/200000000000000
eval_const_expr: (27762586286805053/10000000000000000)
result: 27762586286805053/10000000000000000
eval_const_expr: (-((908517787985921/125000000000000)))
result: -908517787985921/125000000000000
eval_const_expr: (5500150675535771/1000000000000000)
result: 5500150675535771/1000000000000000
eval_const_expr: (-((1320279542375871/250000000000000)))
result: -1320279542375871/250000000000000
eval_const_expr: (-((8533238434522321/10000000000000000)))
result: -8533238434522321/10000000000000000
eval_const_expr: (-((1519680719864701/250000000000000)))
result: -1519680719864701/250000000000000
eval_const_expr: (-((6033000513619893/1000000000000000)))
result: -6033000513619893/1000000000000000
eval_const_expr: (-((5711040965435723/5000000000000000)))
result: -5711040965435723/5000000000000000
eval_const_expr: (-((9598640770688359/1000000000000000)))
result: -9598640770688359/1000000000000000
eval_const_expr: (420609288095509/2000000000000000)
result: 420609288095509/2000000000000000
eval_const_expr: (15464372313221567/2000000000000000)
result: 15464372313221567/2000000000000000
eval_const_expr: (2472783269284073/250000000000000)
result: 2472783269284073/250000000000000
eval_const_expr: (2910987077068473/2000000000000000)
result: 2910987077068473/2000000000000000
eval_const_expr: (59310929189039/8000000000000)
result: 59310929189039/8000000000000
eval_const_expr: (5078925940961231/1000000000000000)
result: 5078925940961231/1000000000000000
eval_const_expr: (-((795214842879323/200000000000000)))
result: -795214842879323/200000000000000
eval_const_expr: (-((8241871332084953/1000000000000000)))
result: -8241871332084953/1000000000000000
eval_const_expr: (-((1058634021620663/312500000000000)))
result: -1058634021620663/312500000000000
eval_const_expr: (58189846665001/25000000000000)
result: 58189846665001/25000000000000
eval_const_expr: (2047685781020883/250000000000000)
result: 2047685781020883/250000000000000
eval_const_expr: (6322804980693327/1000000000000000)
result: 6322804980693327/1000000000000000
eval_const_expr: (149668693420641/40000000000000)
result: 149668693420641/40000000000000
eval_const_expr: (4962445278764287/2500000000000000)
result: 4962445278764287/2500000000000000
eval_const_expr: (-((12672260182286541/2000000000000000)))
result: -12672260182286541/2000000000000000
eval_const_expr: (-((2220198069228987/5000000000000000)))
result: -2220198069228987/5000000000000000
eval_const_expr: (-((4890835097165249/500000000000000)))
result: -4890835097165249/500000000000000
eval_const_expr: (5638312771157189/1000000000000000)
result: 5638312771157189/1000000000000000
eval_const_expr: (-((3409155358232237/1000000000000000)))
result: -3409155358232237/1000000000000000
eval_const_expr: (-((8452878970167681/1000000000000000)))
result: -8452878970167681/1000000000000000
eval_const_expr: (2595578807214263/1000000000000000)
result: 2595578807214263/1000000000000000
eval_const_expr: (-((8876804072775819/5000000000000000)))
result: -8876804072775819/5000000000000000
eval_const_expr: (1141982309128323/200000000000000)
result: 1141982309128323/200000000000000
eval_const_expr: (-((7915822334211553/5000000000000000)))
result: -7915822334211553/5000000000000000
eval_const_expr: (9777691808606681/5000000000000000)
result: 9777691808606681/5000000000000000
eval_const_expr: (-((310584429151839/50000000000000)))
result: -310584429151839/50000000000000
eval_const_expr: (-((2817995835279711/500000000000000)))
result: -2817995835279711/500000000000000
eval_const_expr: (2079174277985521/500000000000000)
result: 2079174277985521/500000000000000
eval_const_expr: (1683703829051391/200000000000000)
result: 1683703829051391/200000000000000
eval_const_expr: (10598937268590113/2000000000000000)
result: 10598937268590113/2000000000000000
eval_const_expr: (-((1460929602369307/200000000000000)))
result: -1460929602369307/200000000000000
eval_const_expr: (-((7815430648456569/10000000000000000)))
result: -7815430648456569/10000000000000000
eval_const_expr: (14340863792601553/2000000000000000)
result: 14340863792601553/2000000000000000
eval_const_expr: (-((3744192879586733/500000000000000)))
result: -3744192879586733/500000000000000
eval_const_expr: (-((834018103150541/100000000000000)))
result: -834018103150541/100000000000000
eval_const_expr: (-((46073037508743/7812500000000)))
result: -46073037508743/7812500000000
eval_const_expr: (-((2310224680106007/500000000000000)))
result: -2310224680106007/500000000000000
eval_const_expr: (-((566035699702927/312500000000000)))
result: -566035699702927/312500000000000
eval_const_expr: (607757237522599/62500000000000)
result: 607757237522599/62500000000000
eval_const_expr: (6458190334860863/1000000000000000)
result: 6458190334860863/1000000000000000
eval_const_expr: (-((1764944452228997/250000000000000)))
result: -1764944452228997/250000000000000
eval_const_expr: (1345149462161297/250000000000000)
result: 1345149462161297/250000000000000
eval_const_expr: (4436064321544077/1000000000000000)
result: 4436064321544077/1000000000000000
eval_const_expr: (547925376226867/62500000000000)
result: 547925376226867/62500000000000
eval_const_expr: (-((14122644247463203/5000000000000000)))
result: -14122644247463203/5000000000000000
eval_const_expr: (-((26288588022793/3906250000000)))
result: -26288588022793/3906250000000
eval_const_expr: (133246771086787/20000000000000)
result: 133246771086787/20000000000000
eval_const_expr: (3082296763360027/500000000000000)
result: 3082296763360027/500000000000000
eval_const_expr: (8230894643900477/5000000000000000)
result: 8230894643900477/5000000000000000
eval_const_expr: (1801814268484593/250000000000000)
result: 1801814268484593/250000000000000
eval_const_expr: (-((745276829167411/100000000000000)))
result: -745276829167411/100000000000000
eval_const_expr: (-((16042886282875113/5000000000000000)))
result: -16042886282875113/5000000000000000
eval_const_expr: (-((1147288066523679/200000000000000)))
result: -1147288066523679/200000000000000
eval_const_expr: (-((2288900303754593/2500000000000000)))
result: -2288900303754593/2500000000000000
eval_const_expr: (-((22554566987000557/10000000000000000)))
result: -22554566987000557/10000000000000000
eval_const_expr: (-((5247314944310073/2500000000000000)))
result: -5247314944310073/2500000000000000
eval_const_expr: (-((2168601717666299/250000000000000)))
result: -2168601717666299/250000000000000
eval_const_expr: (-((37171992112307/4000000000000)))
result: -37171992112307/4000000000000
eval_const_expr: (-((35083895233614797/10000000000000000)))
result: -35083895233614797/10000000000000000
eval_const_expr: (-((7237269188346147/5000000000000000)))
result: -7237269188346147/5000000000000000
eval_const_expr: (-((2203440230725679/1000000000000000)))
result: -2203440230725679/1000000000000000
eval_const_expr: (-((44754918643093/31250000000000)))
result: -44754918643093/31250000000000
eval_const_expr: (1029700451972813/200000000000000)
result: 1029700451972813/200000000000000
eval_const_expr: (-((1994197734317897/200000000000000)))
result: -1994197734317897/200000000000000
eval_const_expr: (145621620633267/15625000000000)
result: 145621620633267/15625000000000
eval_const_expr: (2400059736432353/500000000000000)
result: 2400059736432353/500000000000000
eval_const_expr: (-((760388899101963/250000000000000)))
result: -760388899101963/250000000000000
eval_const_expr: (200137260760893/31250000000000)
result: 200137260760893/31250000000000
eval_const_expr: (42965808751803/250000000000000)
result: 42965808751803/250000000000000
eval_const_expr: (9469458133312479/1000000000000000)
result: 9469458133312479/1000000000000000
eval_const_expr: (-((95585628551697/31250000000000)))
result: -95585628551697/31250000000000
eval_const_expr: (1919295506583817/200000000000000)
result: 1919295506583817/200000000000000
eval_const_expr: (-((818548184999683/500000000000000)))
result: -818548184999683/500000000000000
eval_const_expr: (-((7105009932019751/2000000000000000)))
result: -7105009932019751/2000000000000000
eval_const_expr: (350084226225497/50000000000000)
result: 350084226225497/50000000000000
eval_const_expr: (-((802844893227931/200000000000000)))
result: -802844893227931/200000000000000
eval_const_expr: (-((1985794846832853/200000000000000)))
result: -1985794846832853/200000000000000
eval_const_expr: (1630231642601517/250000000000000)
result: 1630231642601517/250000000000000
eval_const_expr: (-((1263154033252281/1000000000000000)))
result: -1263154033252281/1000000000000000
eval_const_expr: (8137255084380243/1000000000000000)
result: 8137255084380243/1000000000000000
eval_const_expr: (1100305190328081/125000000000000)
result: 1100305190328081/125000000000000
eval_const_expr: (-((1086635404257347/1000000000000000)))
result: -1086635404257347/1000000000000000
eval_const_expr: (-((30454167184494807/100000000000000000)))
result: -30454167184494807/100000000000000000
|tasks| = 40
Processing: exp00

*************************************
Taylor form for: rnd32((rnd32((-2827894930252577/2500000000000000)) * rnd32(x0)))

Conservative bound: [-1.131158, 1.131158]

Simplified rounding: rnd32((rnd32((-2827894930252577/2500000000000000)) * x0))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2827894930252577/2500000000000000); err = (56753392402/152587890625)
var_form
mul_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((-2827894930252577/2500000000000000) * x0)
-1 (5): exp = -24: (1/5070602400912917605986812821504)
1 (1): exp = -24: (x0 * (56753392402/152587890625))
2 (3): exp = -24: floor_power2((((-2827894930252577/2500000000000000) * x0) + interval(-2.21692939070312511723e-08, 2.21692939070312511723e-08)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((-2827894930252577/2500000000000000)) * x0))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = -1.131158e+00 (lower_min = -1.131158e+00)
max = 1.131158e+00 (lower_max = 1.131158e+00)
subopt = 2.220446e-16 (0.0%)
bounds: [-1.131158e+00, 1.131158e+00]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 1.972152e-31 (lower_min = 1.972152e-31)
max = 1.972152e-31 (lower_max = 1.972152e-31)
subopt = 0.000000e+00 (0.0%)
rmin(result = 1.972152e-31, lower = 1.972152e-31), rmax(result = 1.972152e-31, lower = 1.972152e-31)
-1: exp = -24: 1.972152e-31 (low = 1.972152e-31, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 1.371939e+00 (lower_max = 1.371939e+00)
subopt = 2.220446e-16 (0.0%)
exact bound (exp = -24): 1.371939e+00 (low = 1.371939e+00, subopt = 0.0%)
total2: 1.175494e-38 (low = 1.175494e-38, subopt = 0.0%)
exact total: 8.177394e-08 (low = 8.177394e-08, subopt = 0.0%)

Elapsed time: 1.69748
Processing: exp01

*************************************
Taylor form for: rnd32((rnd32((6225620863768981/1000000000000000)) * rnd32(x0)))

Conservative bound: [-6.225622, 6.225622]

Simplified rounding: rnd32((rnd32((6225620863768981/1000000000000000)) * x0))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (6225620863768981/1000000000000000); err = (59984093272/30517578125)
var_form
mul_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((6225620863768981/1000000000000000) * x0)
-1 (5): exp = -24: (1/5070602400912917605986812821504)
1 (1): exp = -24: (x0 * (59984093272/30517578125))
2 (3): exp = -24: floor_power2((((6225620863768981/1000000000000000) * x0) + interval(-1.17156432171875001358e-07, 1.17156432171875001358e-07)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((6225620863768981/1000000000000000)) * x0))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = -6.225621e+00 (lower_min = -6.225621e+00)
max = 6.225621e+00 (lower_max = 6.225621e+00)
subopt = 8.881784e-16 (0.0%)
bounds: [-6.225621e+00, 6.225621e+00]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 1.972152e-31 (lower_min = 1.972152e-31)
max = 1.972152e-31 (lower_max = 1.972152e-31)
subopt = 0.000000e+00 (0.0%)
rmin(result = 1.972152e-31, lower = 1.972152e-31), rmax(result = 1.972152e-31, lower = 1.972152e-31)
-1: exp = -24: 1.972152e-31 (low = 1.972152e-31, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 5.965559e+00 (lower_max = 5.965559e+00)
subopt = 8.881784e-16 (0.0%)
exact bound (exp = -24): 5.965559e+00 (low = 5.965559e+00, subopt = 0.0%)
total2: 1.175494e-38 (low = 1.175494e-38, subopt = 0.0%)
exact total: 3.555750e-07 (low = 3.555750e-07, subopt = 0.0%)

Elapsed time: 1.68734
Processing: exp02

*************************************
Taylor form for: rnd32((rnd32((4069789500263667/500000000000000)) * rnd32(x0)))

Conservative bound: [-8.139580, 8.139580]

Simplified rounding: rnd32((rnd32((4069789500263667/500000000000000)) * x0))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (4069789500263667/500000000000000); err = (92801245008/30517578125)
var_form
mul_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((4069789500263667/500000000000000) * x0)
-1 (5): exp = -24: (1/5070602400912917605986812821504)
1 (1): exp = -24: (x0 * (92801245008/30517578125))
2 (3): exp = -24: floor_power2((((4069789500263667/500000000000000) * x0) + interval(-1.81252431656250014723e-07, 1.81252431656250014723e-07)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((4069789500263667/500000000000000)) * x0))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = -8.139579e+00 (lower_min = -8.139579e+00)
max = 8.139579e+00 (lower_max = 8.139579e+00)
subopt = 1.776357e-15 (0.0%)
bounds: [-8.139579e+00, 8.139579e+00]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 1.972152e-31 (lower_min = 1.972152e-31)
max = 1.972152e-31 (lower_max = 1.972152e-31)
subopt = 0.000000e+00 (0.0%)
rmin(result = 1.972152e-31, lower = 1.972152e-31), rmax(result = 1.972152e-31, lower = 1.972152e-31)
-1: exp = -24: 1.972152e-31 (low = 1.972152e-31, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 1.104091e+01 (lower_max = 1.104091e+01)
subopt = 1.776357e-15 (0.0%)
exact bound (exp = -24): 1.104091e+01 (low = 1.104091e+01, subopt = 0.0%)
total2: 1.175494e-38 (low = 1.175494e-38, subopt = 0.0%)
exact total: 6.580896e-07 (low = 6.580896e-07, subopt = 0.0%)

Elapsed time: 1.72478
Processing: exp03

*************************************
Taylor form for: rnd32((rnd32((-467764930355827/50000000000000)) * rnd32(x0)))

Conservative bound: [-9.355300, 9.355300]

Simplified rounding: rnd32((rnd32((-467764930355827/50000000000000)) * x0))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (-467764930355827/50000000000000); err = (39818766304/6103515625)
var_form
mul_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((-467764930355827/50000000000000) * x0)
-1 (5): exp = -24: (1/5070602400912917605986812821504)
1 (1): exp = -24: (x0 * (39818766304/6103515625))
2 (3): exp = -24: floor_power2((((-467764930355827/50000000000000) * x0) + interval(-3.88855139687500007321e-07, 3.88855139687500007321e-07)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((-467764930355827/50000000000000)) * x0))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = -9.355299e+00 (lower_min = -9.355299e+00)
max = 9.355299e+00 (lower_max = 9.355299e+00)
subopt = 1.776357e-15 (0.0%)
bounds: [-9.355299e+00, 9.355299e+00]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 1.972152e-31 (lower_min = 1.972152e-31)
max = 1.972152e-31 (lower_max = 1.972152e-31)
subopt = 0.000000e+00 (0.0%)
rmin(result = 1.972152e-31, lower = 1.972152e-31), rmax(result = 1.972152e-31, lower = 1.972152e-31)
-1: exp = -24: 1.972152e-31 (low = 1.972152e-31, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 1.452391e+01 (lower_max = 1.452391e+01)
subopt = 1.776357e-15 (0.0%)
exact bound (exp = -24): 1.452391e+01 (low = 1.452391e+01, subopt = 0.0%)
total2: 1.175494e-38 (low = 1.175494e-38, subopt = 0.0%)
exact total: 8.656923e-07 (low = 8.656923e-07, subopt = 0.0%)

Elapsed time: 1.70902
Processing: exp04

*************************************
Taylor form for: rnd32((rnd32((5500150675535771/1000000000000000)) * rnd32(x0)))

Conservative bound: [-5.500152, 5.500152]

Simplified rounding: rnd32((rnd32((5500150675535771/1000000000000000)) * x0))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (5500150675535771/1000000000000000); err = (-2563185248/30517578125)
var_form
mul_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((5500150675535771/1000000000000000) * x0)
-1 (5): exp = -24: (1/5070602400912917605986812821504)
1 (1): exp = -24: (x0 * (-2563185248/30517578125))
2 (3): exp = -24: floor_power2((((5500150675535771/1000000000000000) * x0) + interval(-5.00622118750000028176e-09, 5.00622118750000028176e-09)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((5500150675535771/1000000000000000)) * x0))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = -5.500151e+00 (lower_min = -5.500151e+00)
max = 5.500151e+00 (lower_max = 5.500151e+00)
subopt = 8.881784e-16 (0.0%)
bounds: [-5.500151e+00, 5.500151e+00]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 1.972152e-31 (lower_min = 1.972152e-31)
max = 1.972152e-31 (lower_max = 1.972152e-31)
subopt = 0.000000e+00 (0.0%)
rmin(result = 1.972152e-31, lower = 1.972152e-31), rmax(result = 1.972152e-31, lower = 1.972152e-31)
-1: exp = -24: 1.972152e-31 (low = 1.972152e-31, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 4.083990e+00 (lower_max = 4.083990e+00)
subopt = 8.881784e-16 (0.0%)
exact bound (exp = -24): 4.083990e+00 (low = 4.083990e+00, subopt = 0.0%)
total2: 1.175494e-38 (low = 1.175494e-38, subopt = 0.0%)
exact total: 2.434248e-07 (low = 2.434248e-07, subopt = 0.0%)

Elapsed time: 1.68076
Processing: exp05

*************************************
Taylor form for: rnd32((rnd32((-1058634021620663/312500000000000)) * rnd32(x0)))

Conservative bound: [-3.387629, 3.387629]

Simplified rounding: rnd32((rnd32((-1058634021620663/312500000000000)) * x0))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1058634021620663/312500000000000); err = (-193202408796/152587890625)
var_form
mul_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((-1058634021620663/312500000000000) * x0)
-1 (5): exp = -24: (1/5070602400912917605986812821504)
1 (1): exp = -24: (x0 * (-193202408796/152587890625))
2 (3): exp = -24: floor_power2((((-1058634021620663/312500000000000) * x0) + interval(-7.54696909359375127588e-08, 7.54696909359375127588e-08)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((-1058634021620663/312500000000000)) * x0))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = -3.387629e+00 (lower_min = -3.387629e+00)
max = 3.387629e+00 (lower_max = 3.387629e+00)
subopt = 4.440892e-16 (0.0%)
bounds: [-3.387629e+00, 3.387629e+00]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 1.972152e-31 (lower_min = 1.972152e-31)
max = 1.972152e-31 (lower_max = 1.972152e-31)
subopt = 0.000000e+00 (0.0%)
rmin(result = 1.972152e-31, lower = 1.972152e-31), rmax(result = 1.972152e-31, lower = 1.972152e-31)
-1: exp = -24: 1.972152e-31 (low = 1.972152e-31, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 3.266171e+00 (lower_max = 3.266171e+00)
subopt = 4.440892e-16 (0.0%)
exact bound (exp = -24): 3.266171e+00 (low = 3.266171e+00, subopt = 0.0%)
total2: 1.175494e-38 (low = 1.175494e-38, subopt = 0.0%)
exact total: 1.946790e-07 (low = 1.946790e-07, subopt = 0.0%)

Elapsed time: 1.72511
Processing: exp06

*************************************
Taylor form for: rnd32((rnd32((-7915822334211553/5000000000000000)) * rnd32(x0)))

Conservative bound: [-1.583165, 1.583165]

Simplified rounding: rnd32((rnd32((-7915822334211553/5000000000000000)) * x0))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (-7915822334211553/5000000000000000); err = (-34139752636/152587890625)
var_form
mul_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((-7915822334211553/5000000000000000) * x0)
-1 (5): exp = -24: (1/5070602400912917605986812821504)
1 (1): exp = -24: (x0 * (-34139752636/152587890625))
2 (3): exp = -24: floor_power2((((-7915822334211553/5000000000000000) * x0) + interval(-1.33358408734375000803e-08, 1.33358408734375000803e-08)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((-7915822334211553/5000000000000000)) * x0))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = -1.583164e+00 (lower_min = -1.583164e+00)
max = 1.583164e+00 (lower_max = 1.583164e+00)
subopt = 2.220446e-16 (0.0%)
bounds: [-1.583164e+00, 1.583164e+00]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 1.972152e-31 (lower_min = 1.972152e-31)
max = 1.972152e-31 (lower_max = 1.972152e-31)
subopt = 0.000000e+00 (0.0%)
rmin(result = 1.972152e-31, lower = 1.972152e-31), rmax(result = 1.972152e-31, lower = 1.972152e-31)
-1: exp = -24: 1.972152e-31 (low = 1.972152e-31, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 1.223738e+00 (lower_max = 1.223738e+00)
subopt = 2.220446e-16 (0.0%)
exact bound (exp = -24): 1.223738e+00 (low = 1.223738e+00, subopt = 0.0%)
total2: 1.175494e-38 (low = 1.175494e-38, subopt = 0.0%)
exact total: 7.294049e-08 (low = 7.294049e-08, subopt = 0.0%)

Elapsed time: 1.69168
Processing: exp07

*************************************
Taylor form for: rnd32((rnd32((607757237522599/62500000000000)) * rnd32(x0)))

Conservative bound: [-9.724118, 9.724118]

Simplified rounding: rnd32((rnd32((607757237522599/62500000000000)) * x0))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (607757237522599/62500000000000); err = (219472631008/30517578125)
var_form
mul_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((607757237522599/62500000000000) * x0)
-1 (5): exp = -24: (1/5070602400912917605986812821504)
1 (1): exp = -24: (x0 * (219472631008/30517578125))
2 (3): exp = -24: floor_power2((((607757237522599/62500000000000) * x0) + interval(-4.28657482437500034349e-07, 4.28657482437500034349e-07)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((607757237522599/62500000000000)) * x0))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = -9.724116e+00 (lower_min = -9.724116e+00)
max = 9.724116e+00 (lower_max = 9.724116e+00)
subopt = 1.776357e-15 (0.0%)
bounds: [-9.724116e+00, 9.724116e+00]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 1.972152e-31 (lower_min = 1.972152e-31)
max = 1.972152e-31 (lower_max = 1.972152e-31)
subopt = 0.000000e+00 (0.0%)
rmin(result = 1.972152e-31, lower = 1.972152e-31), rmax(result = 1.972152e-31, lower = 1.972152e-31)
-1: exp = -24: 1.972152e-31 (low = 1.972152e-31, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 1.519168e+01 (lower_max = 1.519168e+01)
subopt = 1.776357e-15 (0.0%)
exact bound (exp = -24): 1.519168e+01 (low = 1.519168e+01, subopt = 0.0%)
total2: 1.175494e-38 (low = 1.175494e-38, subopt = 0.0%)
exact total: 9.054946e-07 (low = 9.054946e-07, subopt = 0.0%)

Elapsed time: 1.68765
Processing: exp08

*************************************
Taylor form for: rnd32((rnd32((-2288900303754593/2500000000000000)) * rnd32(x0)))

Conservative bound: [-0.915560, 0.915560]

Simplified rounding: rnd32((rnd32((-2288900303754593/2500000000000000)) * x0))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2288900303754593/2500000000000000); err = (12295140518/152587890625)
var_form
mul_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((-2288900303754593/2500000000000000) * x0)
-1 (5): exp = -24: (1/5070602400912917605986812821504)
1 (1): exp = -24: (x0 * (12295140518/152587890625))
2 (3): exp = -24: floor_power2((((-2288900303754593/2500000000000000) * x0) + interval(-4.80278926484375018370e-09, 4.80278926484375018370e-09)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((-2288900303754593/2500000000000000)) * x0))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = -9.155601e-01 (lower_min = -9.155601e-01)
max = 9.155601e-01 (lower_max = 9.155601e-01)
subopt = 1.110223e-16 (0.0%)
bounds: [-9.155601e-01, 9.155601e-01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 1.972152e-31 (lower_min = 1.972152e-31)
max = 1.972152e-31 (lower_max = 1.972152e-31)
subopt = 0.000000e+00 (0.0%)
rmin(result = 1.972152e-31, lower = 1.972152e-31), rmax(result = 1.972152e-31, lower = 1.972152e-31)
-1: exp = -24: 1.972152e-31 (low = 1.972152e-31, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 5.805774e-01 (lower_max = 5.805774e-01)
subopt = 1.110223e-16 (0.0%)
exact bound (exp = -24): 5.805774e-01 (low = 5.805774e-01, subopt = 0.0%)
total2: 1.175494e-38 (low = 1.175494e-38, subopt = 0.0%)
exact total: 3.460511e-08 (low = 3.460511e-08, subopt = 0.0%)

Elapsed time: 1.72660
Processing: exp09

*************************************
Taylor form for: rnd32((rnd32((42965808751803/250000000000000)) * rnd32(x0)))

Conservative bound: [-0.171863, 0.171863]

Simplified rounding: rnd32((rnd32((42965808751803/250000000000000)) * x0))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (42965808751803/250000000000000); err = (7090744463/61035156250)
var_form
mul_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((42965808751803/250000000000000) * x0)
-1 (5): exp = -24: (1/5070602400912917605986812821504)
1 (1): exp = -24: (x0 * (7090744463/61035156250))
2 (3): exp = -24: floor_power2((((42965808751803/250000000000000) * x0) + interval(-6.92455513964843808941e-09, 6.92455513964843808941e-09)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((42965808751803/250000000000000)) * x0))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = -1.718632e-01 (lower_min = -1.718632e-01)
max = 1.718632e-01 (lower_max = 1.718632e-01)
subopt = 2.775558e-17 (0.0%)
bounds: [-1.718632e-01, 1.718632e-01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 1.972152e-31 (lower_min = 1.972152e-31)
max = 1.972152e-31 (lower_max = 1.972152e-31)
subopt = 0.000000e+00 (0.0%)
rmin(result = 1.972152e-31, lower = 1.972152e-31), rmax(result = 1.972152e-31, lower = 1.972152e-31)
-1: exp = -24: 1.972152e-31 (low = 1.972152e-31, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 2.411748e-01 (lower_max = 2.411748e-01)
subopt = 2.775558e-17 (0.0%)
exact bound (exp = -24): 2.411748e-01 (low = 2.411748e-01, subopt = 0.0%)
total2: 1.175494e-38 (low = 1.175494e-38, subopt = 0.0%)
exact total: 1.437514e-08 (low = 1.437514e-08, subopt = 0.0%)

Elapsed time: 1.80740
Processing: exp10

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((-2827894930252577/2500000000000000)) * rnd32(x0))) + rnd32((rnd32((1994222834709629/200000000000000)) * rnd32(x1))))) + rnd32((rnd32((1274841106914257/200000000000000)) * rnd32(x2))))) + rnd32((rnd32((14771345179975999/10000000000000000)) * rnd32(x3))))) + rnd32((rnd32((2304808758576443/250000000000000)) * rnd32(x4)))))

Conservative bound: [-28.172857, 28.172857]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3)))) + rnd32((rnd32((2304808758576443/250000000000000)) * x4))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2827894930252577/2500000000000000); err = (56753392402/152587890625)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1994222834709629/200000000000000); err = (1527580048/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1274841106914257/200000000000000); err = (-5603650416/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (14771345179975999/10000000000000000); err = (132675418244/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (2304808758576443/250000000000000); err = (-197591694736/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + ((2304808758576443/250000000000000) * x4))
-1 (41): exp = -24: (5/5070602400912917605986812821504)
1 (1): exp = -24: (((((x0 * (56753392402/152587890625)) + (x1 * (1527580048/6103515625))) + (x2 * (-5603650416/6103515625))) + (x3 * (132675418244/152587890625))) + (x4 * (-197591694736/30517578125)))
2 (3): exp = -24: floor_power2((((-2827894930252577/2500000000000000) * x0) + interval(-2.21692939070312511723e-08, 2.21692939070312511723e-08)))
3 (7): exp = -24: floor_power2((((1994222834709629/200000000000000) * x1) + interval(-1.49177739062500020405e-08, 1.49177739062500020405e-08)))
4 (9): exp = -24: floor_power2(((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + interval(-5.73528870791797086662e-07, 5.73528870791797086662e-07)))
5 (13): exp = -24: floor_power2((((1274841106914257/200000000000000) * x2) + interval(-5.47231485937500060477e-08, 5.47231485937500060477e-08)))
6 (15): exp = -24: floor_power2((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + interval(-1.34350775669023476476e-06, 1.34350775669023476476e-06)))
7 (19): exp = -24: floor_power2((((14771345179975999/10000000000000000) * x3) + interval(-5.18263352515625066126e-08, 5.18263352515625066126e-08)))
8 (21): exp = -24: floor_power2(((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + interval(-2.40861305312343803534e-06, 2.40861305312343803534e-06)))
9 (25): exp = -24: floor_power2((((2304808758576443/250000000000000) * x4) + interval(-3.85921278781250020537e-07, 3.85921278781250020537e-07)))
10 (27): exp = -24: floor_power2((((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + ((2304808758576443/250000000000000) * x4)) + interval(-4.22504580651406400879e-06, 4.22504580651406400879e-06)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((-2827894930252577/2500000000000000)) * x0))
3: rnd32((rnd32((1994222834709629/200000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1))))
5: rnd32((rnd32((1274841106914257/200000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2))))
7: rnd32((rnd32((14771345179975999/10000000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3))))
9: rnd32((rnd32((2304808758576443/250000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3)))) + rnd32((rnd32((2304808758576443/250000000000000)) * x4))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 34, max = 34): 34
min = -2.817285e+01 (lower_min = -2.789006e+01)
max = 2.817285e+01 (lower_max = 2.789006e+01)
subopt = 2.827895e-01 (1.0%)
bounds: [-2.817285e+01, 2.817285e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 9.860761e-31 (lower_min = 9.860761e-31)
max = 9.860761e-31 (lower_max = 9.860761e-31)
subopt = 0.000000e+00 (0.0%)
rmin(result = 9.860761e-31, lower = 9.860761e-31), rmax(result = 9.860761e-31, lower = 9.860761e-31)
-1: exp = -24: 9.860761e-31 (low = 9.860761e-31, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 465): 465
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 8.641523e+01 (lower_max = 8.598026e+01)
subopt = 4.349694e-01 (0.5%)
exact bound (exp = -24): 8.641523e+01 (low = 8.598026e+01, subopt = 0.5%)
total2: 5.877472e-38 (low = 5.877472e-38, subopt = 0.0%)
exact total: 5.150749e-06 (low = 5.124823e-06, subopt = 0.5%)

Elapsed time: 1.83325
Processing: exp11

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((6225620863768981/1000000000000000)) * rnd32(x0))) + rnd32((rnd32((-1576729160064267/200000000000000)) * rnd32(x1))))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * rnd32(x2))))) + rnd32((rnd32((-767009899096057/500000000000000)) * rnd32(x3))))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * rnd32(x4)))))

Conservative bound: [-24.659461, 24.659461]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3)))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * x4))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (6225620863768981/1000000000000000); err = (59984093272/30517578125)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1576729160064267/200000000000000); err = (21609595296/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-4182688149163829/1250000000000000); err = (300395290708/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-767009899096057/500000000000000); err = (15181106382/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-5670014627011071/1000000000000000); err = (118392206648/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + ((-5670014627011071/1000000000000000) * x4))
-1 (41): exp = -24: (5/5070602400912917605986812821504)
1 (1): exp = -24: (((((x0 * (59984093272/30517578125)) + (x1 * (21609595296/6103515625))) + (x2 * (300395290708/152587890625))) + (x3 * (15181106382/30517578125))) + (x4 * (118392206648/30517578125)))
2 (3): exp = -24: floor_power2((((6225620863768981/1000000000000000) * x0) + interval(-1.17156432171875001358e-07, 1.17156432171875001358e-07)))
3 (7): exp = -24: floor_power2((((-1576729160064267/200000000000000) * x1) + interval(-2.11031204062500024420e-07, 2.11031204062500024420e-07)))
4 (9): exp = -24: floor_power2(((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + interval(-8.05024794437500105188e-07, 8.05024794437500105188e-07)))
5 (13): exp = -24: floor_power2((((-4182688149163829/1250000000000000) * x2) + interval(-1.17341910432812511908e-07, 1.17341910432812511908e-07)))
6 (15): exp = -24: floor_power2((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + interval(-1.51841315262421902591e-06, 1.51841315262421902591e-06)))
7 (19): exp = -24: floor_power2((((-767009899096057/500000000000000) * x3) + interval(-2.96505984023437530491e-08, 2.96505984023437530491e-08)))
8 (21): exp = -24: floor_power2(((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + interval(-2.56134271220820353300e-06, 2.56134271220820353300e-06)))
9 (25): exp = -24: floor_power2((((-5670014627011071/1000000000000000) * x4) + interval(-2.31234778609375018121e-07, 2.31234778609375018121e-07)))
10 (27): exp = -24: floor_power2((((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + ((-5670014627011071/1000000000000000) * x4)) + interval(-3.98467038632539203051e-06, 3.98467038632539203051e-06)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((6225620863768981/1000000000000000)) * x0))
3: rnd32((rnd32((-1576729160064267/200000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1))))
5: rnd32((rnd32((-4182688149163829/1250000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2))))
7: rnd32((rnd32((-767009899096057/500000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3))))
9: rnd32((rnd32((-5670014627011071/1000000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3)))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * x4))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 547, max = 547): 547
min = -2.465945e+01 (lower_min = -2.446490e+01)
max = 2.465945e+01 (lower_max = 2.446490e+01)
subopt = 1.945507e-01 (0.8%)
bounds: [-2.465945e+01, 2.465945e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 9.860761e-31 (lower_min = 9.860761e-31)
max = 9.860761e-31 (lower_max = 9.860761e-31)
subopt = 0.000000e+00 (0.0%)
rmin(result = 9.860761e-31, lower = 9.860761e-31), rmax(result = 9.860761e-31, lower = 9.860761e-31)
-1: exp = -24: 9.860761e-31 (low = 9.860761e-31, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 3591): 3591
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 7.938124e+01 (lower_max = 7.935052e+01)
subopt = 3.071186e-02 (0.0%)
exact bound (exp = -24): 7.938124e+01 (low = 7.935052e+01, subopt = 0.0%)
total2: 5.877472e-38 (low = 5.877472e-38, subopt = 0.0%)
exact total: 4.731490e-06 (low = 4.729660e-06, subopt = 0.0%)

Elapsed time: 1.89069
Processing: exp12

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((4069789500263667/500000000000000)) * rnd32(x0))) + rnd32((rnd32((-2300368983996033/1000000000000000)) * rnd32(x1))))) + rnd32((rnd32((-952765572948147/250000000000000)) * rnd32(x2))))) + rnd32((rnd32((24136252216765897/10000000000000000)) * rnd32(x3))))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * rnd32(x4)))))

Conservative bound: [-20.594935, 20.594935]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3)))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * x4))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (4069789500263667/500000000000000); err = (92801245008/30517578125)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2300368983996033/1000000000000000); err = (20623718604/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-952765572948147/250000000000000); err = (22617819944/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (24136252216765897/10000000000000000); err = (-47742305368/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-3930292426663769/1000000000000000); err = (-30069037228/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + ((-3930292426663769/1000000000000000) * x4))
-1 (41): exp = -24: (5/5070602400912917605986812821504)
1 (1): exp = -24: (((((x0 * (92801245008/30517578125)) + (x1 * (20623718604/30517578125))) + (x2 * (22617819944/30517578125))) + (x3 * (-47742305368/152587890625))) + (x4 * (-30069037228/30517578125)))
2 (3): exp = -24: floor_power2((((4069789500263667/500000000000000) * x0) + interval(-1.81252431656250014723e-07, 1.81252431656250014723e-07)))
3 (7): exp = -24: floor_power2((((-2300368983996033/1000000000000000) * x1) + interval(-4.02807003984375011165e-08, 4.02807003984375011165e-08)))
4 (9): exp = -24: floor_power2(((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + interval(-8.17579579808593798927e-07, 8.17579579808593798927e-07)))
5 (13): exp = -24: floor_power2((((-952765572948147/250000000000000) * x2) + interval(-4.41754295781250050183e-08, 4.41754295781250050183e-08)))
6 (15): exp = -24: floor_power2((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + interval(-1.45780145714062518629e-06, 1.45780145714062518629e-06)))
7 (19): exp = -24: floor_power2((((24136252216765897/10000000000000000) * x3) + interval(-1.86493380343750014285e-08, 1.86493380343750014285e-08)))
8 (21): exp = -24: floor_power2(((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + interval(-2.07249724292890673882e-06, 2.07249724292890673882e-06)))
9 (25): exp = -24: floor_power2((((-3930292426663769/1000000000000000) * x4) + interval(-5.87285883359375057068e-08, 5.87285883359375057068e-08)))
10 (27): exp = -24: floor_power2((((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + ((-3930292426663769/1000000000000000) * x4)) + interval(-3.20410943722187581878e-06, 3.20410943722187581878e-06)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((4069789500263667/500000000000000)) * x0))
3: rnd32((rnd32((-2300368983996033/1000000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1))))
5: rnd32((rnd32((-952765572948147/250000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2))))
7: rnd32((rnd32((24136252216765897/10000000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3))))
9: rnd32((rnd32((-3930292426663769/1000000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3)))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * x4))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 983, max = 983): 983
min = -2.059493e+01 (lower_min = -2.040208e+01)
max = 2.059493e+01 (lower_max = 2.040208e+01)
subopt = 1.928452e-01 (0.9%)
bounds: [-2.059493e+01, 2.059493e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 9.860761e-31 (lower_min = 9.860761e-31)
max = 9.860761e-31 (lower_max = 9.860761e-31)
subopt = 0.000000e+00 (0.0%)
rmin(result = 9.860761e-31, lower = 9.860761e-31), rmax(result = 9.860761e-31, lower = 9.860761e-31)
-1: exp = -24: 9.860761e-31 (low = 9.860761e-31, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 9823): 9823
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 6.646631e+01 (lower_max = 6.644316e+01)
subopt = 2.314583e-02 (0.0%)
exact bound (exp = -24): 6.646631e+01 (low = 6.644316e+01, subopt = 0.0%)
total2: 5.877472e-38 (low = 5.877472e-38, subopt = 0.0%)
exact total: 3.961701e-06 (low = 3.960321e-06, subopt = 0.0%)

Elapsed time: 2.05644
Processing: exp13

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((-467764930355827/50000000000000)) * rnd32(x0))) + rnd32((rnd32((-4477180195806909/2000000000000000)) * rnd32(x1))))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * rnd32(x2))))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * rnd32(x3))))) + rnd32((rnd32((7497676058034859/1000000000000000)) * rnd32(x4)))))

Conservative bound: [-28.120051, 28.120051]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3)))) + rnd32((rnd32((7497676058034859/1000000000000000)) * x4))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (-467764930355827/50000000000000); err = (39818766304/6103515625)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-4477180195806909/2000000000000000); err = (-49071881204/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-6307886269679301/1000000000000000); err = (-74763302112/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-13602951095674367/5000000000000000); err = (-267625900904/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (7497676058034859/1000000000000000); err = (83120097808/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + ((7497676058034859/1000000000000000) * x4))
-1 (41): exp = -24: (5/5070602400912917605986812821504)
1 (1): exp = -24: (((((x0 * (39818766304/6103515625)) + (x1 * (-49071881204/30517578125))) + (x2 * (-74763302112/30517578125))) + (x3 * (-267625900904/152587890625))) + (x4 * (83120097808/30517578125)))
2 (3): exp = -24: floor_power2((((-467764930355827/50000000000000) * x0) + interval(-3.88855139687500007321e-07, 3.88855139687500007321e-07)))
3 (7): exp = -24: floor_power2((((-4477180195806909/2000000000000000) * x1) + interval(-9.58435179765625120172e-08, 9.58435179765625120172e-08)))
4 (9): exp = -24: floor_power2(((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + interval(-1.08074510541796895463e-06, 1.08074510541796895463e-06)))
5 (13): exp = -24: floor_power2((((-6307886269679301/1000000000000000) * x2) + interval(-1.46022074437500020752e-07, 1.46022074437500020752e-07)))
6 (15): exp = -24: floor_power2((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + interval(-1.94202291716015679302e-06, 1.94202291716015679302e-06)))
7 (19): exp = -24: floor_power2((((-13602951095674367/5000000000000000) * x3) + interval(-1.04541367540625003018e-07, 1.04541367540625003018e-07)))
8 (21): exp = -24: floor_power2(((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + interval(-3.11944789065781300633e-06, 3.11944789065781300633e-06)))
9 (25): exp = -24: floor_power2((((7497676058034859/1000000000000000) * x4) + interval(-1.62343941031250022054e-07, 1.62343941031250022054e-07)))
10 (27): exp = -24: floor_power2((((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + ((7497676058034859/1000000000000000) * x4)) + interval(-4.47388472719687653424e-06, 4.47388472719687653424e-06)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((-467764930355827/50000000000000)) * x0))
3: rnd32((rnd32((-4477180195806909/2000000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1))))
5: rnd32((rnd32((-6307886269679301/1000000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2))))
7: rnd32((rnd32((-13602951095674367/5000000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3))))
9: rnd32((rnd32((7497676058034859/1000000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3)))) + rnd32((rnd32((7497676058034859/1000000000000000)) * x4))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 170, max = 170): 170
min = -2.812004e+01 (lower_min = -2.788574e+01)
max = 2.812004e+01 (lower_max = 2.788574e+01)
subopt = 2.343024e-01 (0.8%)
bounds: [-2.812004e+01, 2.812004e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 9.860761e-31 (lower_min = 9.860761e-31)
max = 9.860761e-31 (lower_max = 9.860761e-31)
subopt = 0.000000e+00 (0.0%)
rmin(result = 9.860761e-31, lower = 9.860761e-31), rmax(result = 9.860761e-31, lower = 9.860761e-31)
-1: exp = -24: 9.860761e-31 (low = 9.860761e-31, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 1595): 1595
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 7.923475e+01 (lower_max = 7.865678e+01)
subopt = 5.779741e-01 (0.7%)
exact bound (exp = -24): 7.923475e+01 (low = 7.865678e+01, subopt = 0.7%)
total2: 5.877472e-38 (low = 5.877472e-38, subopt = 0.0%)
exact total: 4.722759e-06 (low = 4.688309e-06, subopt = 0.7%)

Elapsed time: 1.84853
Processing: exp14

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((5500150675535771/1000000000000000)) * rnd32(x0))) + rnd32((rnd32((-1320279542375871/250000000000000)) * rnd32(x1))))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * rnd32(x2))))) + rnd32((rnd32((-1519680719864701/250000000000000)) * rnd32(x3))))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * rnd32(x4)))))

Conservative bound: [-23.746324, 23.746324]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3)))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * x4))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (5500150675535771/1000000000000000); err = (-2563185248/30517578125)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1320279542375871/250000000000000); err = (114401716192/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-8533238434522321/10000000000000000); err = (-67069745426/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1519680719864701/250000000000000); err = (38060842352/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-6033000513619893/1000000000000000); err = (-22739010216/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + ((-6033000513619893/1000000000000000) * x4))
-1 (41): exp = -24: (5/5070602400912917605986812821504)
1 (1): exp = -24: (((((x0 * (-2563185248/30517578125)) + (x1 * (114401716192/30517578125))) + (x2 * (-67069745426/152587890625))) + (x3 * (38060842352/30517578125))) + (x4 * (-22739010216/30517578125)))
2 (3): exp = -24: floor_power2((((5500150675535771/1000000000000000) * x0) + interval(-5.00622118750000028176e-09, 5.00622118750000028176e-09)))
3 (7): exp = -24: floor_power2((((-1320279542375871/250000000000000) * x1) + interval(-2.23440851937500020899e-07, 2.23440851937500020899e-07)))
4 (9): exp = -24: floor_power2(((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + interval(-7.05284231328125127060e-07, 7.05284231328125127060e-07)))
5 (13): exp = -24: floor_power2((((-8533238434522321/10000000000000000) * x2) + interval(-2.61991193070312521155e-08, 2.61991193070312521155e-08)))
6 (15): exp = -24: floor_power2((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + interval(-1.23812283122597692659e-06, 1.23812283122597692659e-06)))
7 (19): exp = -24: floor_power2((((-1519680719864701/250000000000000) * x3) + interval(-7.43375827187500119757e-08, 7.43375827187500119757e-08)))
8 (21): exp = -24: floor_power2(((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + interval(-2.02771615124941469003e-06, 2.02771615124941469003e-06)))
9 (25): exp = -24: floor_power2((((-6033000513619893/1000000000000000) * x4) + interval(-4.44121293281250051655e-08, 4.44121293281250051655e-08)))
10 (27): exp = -24: floor_power2((((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + ((-6033000513619893/1000000000000000) * x4)) + interval(-3.26422117608535230108e-06, 3.26422117608535230108e-06)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((5500150675535771/1000000000000000)) * x0))
3: rnd32((rnd32((-1320279542375871/250000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1))))
5: rnd32((rnd32((-8533238434522321/10000000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2))))
7: rnd32((rnd32((-1519680719864701/250000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3))))
9: rnd32((rnd32((-6033000513619893/1000000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3)))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * x4))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 439, max = 439): 439
min = -2.374632e+01 (lower_min = -2.357444e+01)
max = 2.374632e+01 (lower_max = 2.357444e+01)
subopt = 1.718797e-01 (0.7%)
bounds: [-2.374632e+01, 2.374632e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 9.860761e-31 (lower_min = 9.860761e-31)
max = 9.860761e-31 (lower_max = 9.860761e-31)
subopt = 0.000000e+00 (0.0%)
rmin(result = 9.860761e-31, lower = 9.860761e-31), rmax(result = 9.860761e-31, lower = 9.860761e-31)
-1: exp = -24: 9.860761e-31 (low = 9.860761e-31, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 5409): 5409
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 6.953045e+01 (lower_max = 6.950337e+01)
subopt = 2.708119e-02 (0.0%)
exact bound (exp = -24): 6.953045e+01 (low = 6.950337e+01, subopt = 0.0%)
total2: 5.877472e-38 (low = 5.877472e-38, subopt = 0.0%)
exact total: 4.144338e-06 (low = 4.142724e-06, subopt = 0.0%)

Elapsed time: 1.93781
Processing: exp15

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((-1058634021620663/312500000000000)) * rnd32(x0))) + rnd32((rnd32((58189846665001/25000000000000)) * rnd32(x1))))) + rnd32((rnd32((2047685781020883/250000000000000)) * rnd32(x2))))) + rnd32((rnd32((6322804980693327/1000000000000000)) * rnd32(x3))))) + rnd32((rnd32((149668693420641/40000000000000)) * rnd32(x4)))))

Conservative bound: [-23.970496, 23.970496]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3)))) + rnd32((rnd32((149668693420641/40000000000000)) * x4))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1058634021620663/312500000000000); err = (-193202408796/152587890625)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (58189846665001/25000000000000); err = (6471094096/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (2047685781020883/250000000000000); err = (-165000481616/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (6322804980693327/1000000000000000); err = (27068108424/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (149668693420641/40000000000000); err = (-62381808/1220703125)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + ((149668693420641/40000000000000) * x4))
-1 (41): exp = -24: (5/5070602400912917605986812821504)
1 (1): exp = -24: (((((x0 * (-193202408796/152587890625)) + (x1 * (6471094096/6103515625))) + (x2 * (-165000481616/30517578125))) + (x3 * (27068108424/30517578125))) + (x4 * (-62381808/1220703125)))
2 (3): exp = -24: floor_power2((((-1058634021620663/312500000000000) * x0) + interval(-7.54696909359375127588e-08, 7.54696909359375127588e-08)))
3 (7): exp = -24: floor_power2((((58189846665001/25000000000000) * x1) + interval(-6.31942782812500035570e-08, 6.31942782812500035570e-08)))
4 (9): exp = -24: floor_power2(((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + interval(-3.77082548318750056020e-07, 3.77082548318750056020e-07)))
5 (13): exp = -24: floor_power2((((2047685781020883/250000000000000) * x2) + interval(-3.22266565656250019022e-07, 3.22266565656250019022e-07)))
6 (15): exp = -24: floor_power2((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + interval(-1.41460485127968826326e-06, 1.41460485127968826326e-06)))
7 (19): exp = -24: floor_power2((((6322804980693327/1000000000000000) * x3) + interval(-5.28673992656250035971e-08, 5.28673992656250035971e-08)))
8 (21): exp = -24: floor_power2(((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + interval(-2.18272798785000123008e-06, 2.18272798785000123008e-06)))
9 (25): exp = -24: floor_power2((((149668693420641/40000000000000) * x4) + interval(-3.04598671875000024041e-09, 3.04598671875000024041e-09)))
10 (27): exp = -24: floor_power2((((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + ((149668693420641/40000000000000) * x4)) + interval(-3.25865758052578224953e-06, 3.25865758052578224953e-06)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((-1058634021620663/312500000000000)) * x0))
3: rnd32((rnd32((58189846665001/25000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1))))
5: rnd32((rnd32((2047685781020883/250000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2))))
7: rnd32((rnd32((6322804980693327/1000000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3))))
9: rnd32((rnd32((149668693420641/40000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3)))) + rnd32((rnd32((149668693420641/40000000000000)) * x4))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 110, max = 110): 110
min = -2.397049e+01 (lower_min = -2.375876e+01)
max = 2.397049e+01 (lower_max = 2.375876e+01)
subopt = 2.117268e-01 (0.9%)
bounds: [-2.397049e+01, 2.397049e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 9.860761e-31 (lower_min = 9.860761e-31)
max = 9.860761e-31 (lower_max = 9.860761e-31)
subopt = 0.000000e+00 (0.0%)
rmin(result = 9.860761e-31, lower = 9.860761e-31), rmax(result = 9.860761e-31, lower = 9.860761e-31)
-1: exp = -24: 9.860761e-31 (low = 9.860761e-31, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 2979): 2979
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 6.531696e+01 (lower_max = 6.514143e+01)
subopt = 1.755318e-01 (0.3%)
exact bound (exp = -24): 6.531696e+01 (low = 6.514143e+01, subopt = 0.3%)
total2: 5.877472e-38 (low = 5.877472e-38, subopt = 0.0%)
exact total: 3.893194e-06 (low = 3.882732e-06, subopt = 0.3%)

Elapsed time: 1.89337
Processing: exp16

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((-7915822334211553/5000000000000000)) * rnd32(x0))) + rnd32((rnd32((9777691808606681/5000000000000000)) * rnd32(x1))))) + rnd32((rnd32((-310584429151839/50000000000000)) * rnd32(x2))))) + rnd32((rnd32((-2817995835279711/500000000000000)) * rnd32(x3))))) + rnd32((rnd32((2079174277985521/500000000000000)) * rnd32(x4)))))

Conservative bound: [-19.544738, 19.544738]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3)))) + rnd32((rnd32((2079174277985521/500000000000000)) * x4))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (-7915822334211553/5000000000000000); err = (-34139752636/152587890625)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (9777691808606681/5000000000000000); err = (-77684785578/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-310584429151839/50000000000000); err = (-6606091272/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2817995835279711/500000000000000); err = (-49779549064/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (2079174277985521/500000000000000); err = (-2233451496/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + ((2079174277985521/500000000000000) * x4))
-1 (41): exp = -24: (5/5070602400912917605986812821504)
1 (1): exp = -24: (((((x0 * (-34139752636/152587890625)) + (x1 * (-77684785578/152587890625))) + (x2 * (-6606091272/6103515625))) + (x3 * (-49779549064/30517578125))) + (x4 * (-2233451496/30517578125)))
2 (3): exp = -24: floor_power2((((-7915822334211553/5000000000000000) * x0) + interval(-1.33358408734375000803e-08, 1.33358408734375000803e-08)))
3 (7): exp = -24: floor_power2((((9777691808606681/5000000000000000) * x1) + interval(-3.03456193664062501199e-08, 3.03456193664062501199e-08)))
4 (9): exp = -24: floor_power2(((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + interval(-1.62890749790625041559e-07, 1.62890749790625041559e-07)))
5 (13): exp = -24: floor_power2((((-310584429151839/50000000000000) * x2) + interval(-6.45126100781250033916e-08, 6.45126100781250033916e-08)))
6 (15): exp = -24: floor_power2((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + interval(-5.85031228521094033179e-07, 5.85031228521094033179e-07)))
7 (19): exp = -24: floor_power2((((-2817995835279711/500000000000000) * x3) + interval(-9.72256817656250018895e-08, 9.72256817656250018895e-08)))
8 (21): exp = -24: floor_power2(((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + interval(-1.39751264759140665418e-06, 1.39751264759140665418e-06)))
9 (25): exp = -24: floor_power2((((2079174277985521/500000000000000) * x4) + interval(-4.36220995312500021692e-09, 4.36220995312500021692e-09)))
10 (27): exp = -24: floor_power2((((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + ((2079174277985521/500000000000000) * x4)) + interval(-2.11713059484921981780e-06, 2.11713059484921981780e-06)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((-7915822334211553/5000000000000000)) * x0))
3: rnd32((rnd32((9777691808606681/5000000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1))))
5: rnd32((rnd32((-310584429151839/50000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2))))
7: rnd32((rnd32((-2817995835279711/500000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3))))
9: rnd32((rnd32((2079174277985521/500000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3)))) + rnd32((rnd32((2079174277985521/500000000000000)) * x4))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 259, max = 259): 259
min = -1.954473e+01 (lower_min = -1.935367e+01)
max = 1.954473e+01 (lower_max = 1.935367e+01)
subopt = 1.910590e-01 (1.0%)
bounds: [-1.954473e+01, 1.954473e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 9.860761e-31 (lower_min = 9.860761e-31)
max = 9.860761e-31 (lower_max = 9.860761e-31)
subopt = 0.000000e+00 (0.0%)
rmin(result = 9.860761e-31, lower = 9.860761e-31), rmax(result = 9.860761e-31, lower = 9.860761e-31)
-1: exp = -24: 9.860761e-31 (low = 9.860761e-31, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 969): 969
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 5.061866e+01 (lower_max = 5.046855e+01)
subopt = 1.501088e-01 (0.3%)
exact bound (exp = -24): 5.061866e+01 (low = 5.046855e+01, subopt = 0.3%)
total2: 5.877472e-38 (low = 5.877472e-38, subopt = 0.0%)
exact total: 3.017107e-06 (low = 3.008160e-06, subopt = 0.3%)

Elapsed time: 1.80727
Processing: exp17

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((607757237522599/62500000000000)) * rnd32(x0))) + rnd32((rnd32((6458190334860863/1000000000000000)) * rnd32(x1))))) + rnd32((rnd32((-1764944452228997/250000000000000)) * rnd32(x2))))) + rnd32((rnd32((1345149462161297/250000000000000)) * rnd32(x3))))) + rnd32((rnd32((4436064321544077/1000000000000000)) * rnd32(x4)))))

Conservative bound: [-33.058758, 33.058758]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3)))) + rnd32((rnd32((4436064321544077/1000000000000000)) * x4))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (607757237522599/62500000000000); err = (219472631008/30517578125)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (6458190334860863/1000000000000000); err = (-54410613144/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1764944452228997/250000000000000); err = (-36993110856/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1345149462161297/250000000000000); err = (-112431163744/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (4436064321544077/1000000000000000); err = (40052442424/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + ((4436064321544077/1000000000000000) * x4))
-1 (41): exp = -24: (5/5070602400912917605986812821504)
1 (1): exp = -24: (((((x0 * (219472631008/30517578125)) + (x1 * (-54410613144/30517578125))) + (x2 * (-36993110856/30517578125))) + (x3 * (-112431163744/30517578125))) + (x4 * (40052442424/30517578125)))
2 (3): exp = -24: floor_power2((((607757237522599/62500000000000) * x0) + interval(-4.28657482437500034349e-07, 4.28657482437500034349e-07)))
3 (7): exp = -24: floor_power2((((6458190334860863/1000000000000000) * x1) + interval(-1.06270728796875009635e-07, 1.06270728796875009635e-07)))
4 (9): exp = -24: floor_power2(((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + interval(-1.25018394853906268957e-06, 1.25018394853906268957e-06)))
5 (13): exp = -24: floor_power2((((-1764944452228997/250000000000000) * x2) + interval(-7.22521696406250023212e-08, 7.22521696406250023212e-08)))
6 (15): exp = -24: floor_power2((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + interval(-2.51452901368750056247e-06, 2.51452901368750056247e-06)))
7 (19): exp = -24: floor_power2((((1345149462161297/250000000000000) * x3) + interval(-2.19592116687500004951e-07, 2.19592116687500004951e-07)))
8 (21): exp = -24: floor_power2(((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + interval(-3.92621402588281346446e-06, 3.92621402588281346446e-06)))
9 (25): exp = -24: floor_power2((((4436064321544077/1000000000000000) * x4) + interval(-7.82274266093750102492e-08, 7.82274266093750102492e-08)))
10 (27): exp = -24: floor_power2((((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + ((4436064321544077/1000000000000000) * x4)) + interval(-5.19653434800000149087e-06, 5.19653434800000149087e-06)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((607757237522599/62500000000000)) * x0))
3: rnd32((rnd32((6458190334860863/1000000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1))))
5: rnd32((rnd32((-1764944452228997/250000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2))))
7: rnd32((rnd32((1345149462161297/250000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3))))
9: rnd32((rnd32((4436064321544077/1000000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3)))) + rnd32((rnd32((4436064321544077/1000000000000000)) * x4))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 157, max = 157): 157
min = -3.305875e+01 (lower_min = -3.283813e+01)
max = 3.305875e+01 (lower_max = 3.283813e+01)
subopt = 2.206181e-01 (0.7%)
bounds: [-3.305875e+01, 3.305875e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 9.860761e-31 (lower_min = 9.860761e-31)
max = 9.860761e-31 (lower_max = 9.860761e-31)
subopt = 0.000000e+00 (0.0%)
rmin(result = 9.860761e-31, lower = 9.860761e-31), rmax(result = 9.860761e-31, lower = 9.860761e-31)
-1: exp = -24: 9.860761e-31 (low = 9.860761e-31, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 767): 767
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 1.091555e+02 (lower_max = 1.088635e+02)
subopt = 2.919779e-01 (0.3%)
exact bound (exp = -24): 1.091555e+02 (low = 1.088635e+02, subopt = 0.3%)
total2: 5.877472e-38 (low = 5.877472e-38, subopt = 0.0%)
exact total: 6.506174e-06 (low = 6.488771e-06, subopt = 0.3%)

Elapsed time: 1.80307
Processing: exp18

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((-2288900303754593/2500000000000000)) * rnd32(x0))) + rnd32((rnd32((-22554566987000557/10000000000000000)) * rnd32(x1))))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * rnd32(x2))))) + rnd32((rnd32((-2168601717666299/250000000000000)) * rnd32(x3))))) + rnd32((rnd32((-37171992112307/4000000000000)) * rnd32(x4)))))

Conservative bound: [-23.237355, 23.237355]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3)))) + rnd32((rnd32((-37171992112307/4000000000000)) * x4))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2288900303754593/2500000000000000); err = (12295140518/152587890625)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-22554566987000557/10000000000000000); err = (-32461205092/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-5247314944310073/2500000000000000); err = (229448360248/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2168601717666299/250000000000000); err = (68938169648/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-37171992112307/4000000000000); err = (1170747632/244140625)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + ((-37171992112307/4000000000000) * x4))
-1 (41): exp = -24: (5/5070602400912917605986812821504)
1 (1): exp = -24: (((((x0 * (12295140518/152587890625)) + (x1 * (-32461205092/152587890625))) + (x2 * (229448360248/152587890625))) + (x3 * (68938169648/30517578125))) + (x4 * (1170747632/244140625)))
2 (3): exp = -24: floor_power2((((-2288900303754593/2500000000000000) * x0) + interval(-4.80278926484375018370e-09, 4.80278926484375018370e-09)))
3 (7): exp = -24: floor_power2((((-22554566987000557/10000000000000000) * x1) + interval(-1.26801582390625001668e-08, 1.26801582390625001668e-08)))
4 (9): exp = -24: floor_power2(((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + interval(-1.66494559442382886470e-07, 1.66494559442382886470e-07)))
5 (13): exp = -24: floor_power2((((-5247314944310073/2500000000000000) * x2) + interval(-8.96282657218750102723e-08, 8.96282657218750102723e-08)))
6 (15): exp = -24: floor_power2((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + interval(-4.94541404265820582030e-07, 4.94541404265820582030e-07)))
7 (19): exp = -24: floor_power2((((-2168601717666299/250000000000000) * x3) + interval(-1.34644862593750006778e-07, 1.34644862593750006778e-07)))
8 (21): exp = -24: floor_power2(((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + interval(-1.34444200416425843292e-06, 1.34444200416425843292e-06)))
9 (25): exp = -24: floor_power2((((-37171992112307/4000000000000) * x4) + interval(-2.85827058593750013100e-07, 2.85827058593750013100e-07)))
10 (27): exp = -24: floor_power2((((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + ((-37171992112307/4000000000000) * x4)) + interval(-2.58394337916425902835e-06, 2.58394337916425902835e-06)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((-2288900303754593/2500000000000000)) * x0))
3: rnd32((rnd32((-22554566987000557/10000000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1))))
5: rnd32((rnd32((-5247314944310073/2500000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2))))
7: rnd32((rnd32((-2168601717666299/250000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3))))
9: rnd32((rnd32((-37171992112307/4000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3)))) + rnd32((rnd32((-37171992112307/4000000000000)) * x4))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = -2.323735e+01 (lower_min = -2.323735e+01)
max = 2.323735e+01 (lower_max = 2.323735e+01)
subopt = 7.105427e-15 (0.0%)
bounds: [-2.323735e+01, 2.323735e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 9.860761e-31 (lower_min = 9.860761e-31)
max = 9.860761e-31 (lower_max = 9.860761e-31)
subopt = 0.000000e+00 (0.0%)
rmin(result = 9.860761e-31, lower = 9.860761e-31), rmax(result = 9.860761e-31, lower = 9.860761e-31)
-1: exp = -24: 9.860761e-31 (low = 9.860761e-31, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 5.935138e+01 (lower_max = 5.892590e+01)
subopt = 4.254755e-01 (0.7%)
exact bound (exp = -24): 5.935138e+01 (low = 5.892590e+01, subopt = 0.7%)
total2: 5.877472e-38 (low = 5.877472e-38, subopt = 0.0%)
exact total: 3.537618e-06 (low = 3.512257e-06, subopt = 0.7%)

Elapsed time: 1.78416
Processing: exp19

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((42965808751803/250000000000000)) * rnd32(x0))) + rnd32((rnd32((9469458133312479/1000000000000000)) * rnd32(x1))))) + rnd32((rnd32((-95585628551697/31250000000000)) * rnd32(x2))))) + rnd32((rnd32((1919295506583817/200000000000000)) * rnd32(x3))))) + rnd32((rnd32((-818548184999683/500000000000000)) * rnd32(x4)))))

Conservative bound: [-23.933644, 23.933644]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3)))) + rnd32((rnd32((-818548184999683/500000000000000)) * x4))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (42965808751803/250000000000000); err = (7090744463/61035156250)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (9469458133312479/1000000000000000); err = (-228712760752/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-95585628551697/31250000000000); err = (12980871352/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1919295506583817/200000000000000); err = (2495914304/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-818548184999683/500000000000000); err = (17935324608/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + ((-818548184999683/500000000000000) * x4))
-1 (41): exp = -24: (5/5070602400912917605986812821504)
1 (1): exp = -24: (((((x0 * (7090744463/61035156250)) + (x1 * (-228712760752/30517578125))) + (x2 * (12980871352/30517578125))) + (x3 * (2495914304/6103515625))) + (x4 * (17935324608/30517578125)))
2 (3): exp = -24: floor_power2((((42965808751803/250000000000000) * x0) + interval(-6.92455513964843808941e-09, 6.92455513964843808941e-09)))
3 (7): exp = -24: floor_power2((((9469458133312479/1000000000000000) * x1) + interval(-4.46704610843750049563e-07, 4.46704610843750049563e-07)))
4 (9): exp = -24: floor_power2(((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + interval(-9.37916904783447629279e-07, 9.37916904783447629279e-07)))
5 (13): exp = -24: floor_power2((((-95585628551697/31250000000000) * x2) + interval(-2.53532643593750031826e-08, 2.53532643593750031826e-08)))
6 (15): exp = -24: floor_power2((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + interval(-1.55931661689672897511e-06, 1.55931661689672897511e-06)))
7 (19): exp = -24: floor_power2((((1919295506583817/200000000000000) * x3) + interval(-2.43741631250000031924e-08, 2.43741631250000031924e-08)))
8 (21): exp = -24: floor_power2(((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + interval(-2.53736509642797955732e-06, 2.53736509642797955732e-06)))
9 (25): exp = -24: floor_power2((((-818548184999683/500000000000000) * x4) + interval(-3.50299308750000040294e-08, 3.50299308750000040294e-08)))
10 (27): exp = -24: floor_power2((((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + ((-818548184999683/500000000000000) * x4)) + interval(-3.58567398848462006724e-06, 3.58567398848462006724e-06)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((42965808751803/250000000000000)) * x0))
3: rnd32((rnd32((9469458133312479/1000000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1))))
5: rnd32((rnd32((-95585628551697/31250000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2))))
7: rnd32((rnd32((1919295506583817/200000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3))))
9: rnd32((rnd32((-818548184999683/500000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3)))) + rnd32((rnd32((-818548184999683/500000000000000)) * x4))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 648, max = 648): 648
min = -2.393364e+01 (lower_min = -2.369130e+01)
max = 2.393364e+01 (lower_max = 2.369130e+01)
subopt = 2.423305e-01 (1.0%)
bounds: [-2.393364e+01, 2.393364e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 9.860761e-31 (lower_min = 9.860761e-31)
max = 9.860761e-31 (lower_max = 9.860761e-31)
subopt = 0.000000e+00 (0.0%)
rmin(result = 9.860761e-31, lower = 9.860761e-31), rmax(result = 9.860761e-31, lower = 9.860761e-31)
-1: exp = -24: 9.860761e-31 (low = 9.860761e-31, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 1713): 1713
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 7.544200e+01 (lower_max = 7.498399e+01)
subopt = 4.580049e-01 (0.6%)
exact bound (exp = -24): 7.544200e+01 (low = 7.498399e+01, subopt = 0.6%)
total2: 5.877472e-38 (low = 5.877472e-38, subopt = 0.0%)
exact total: 4.496694e-06 (low = 4.469394e-06, subopt = 0.6%)

Elapsed time: 1.85515
Processing: exp20

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((-2827894930252577/2500000000000000)) * rnd32(x0))) + rnd32((rnd32((1994222834709629/200000000000000)) * rnd32(x1))))) + rnd32((rnd32((1274841106914257/200000000000000)) * rnd32(x2))))) + rnd32((rnd32((14771345179975999/10000000000000000)) * rnd32(x3))))) + rnd32((rnd32((2304808758576443/250000000000000)) * rnd32(x4))))) + rnd32((rnd32((-2491081851057709/250000000000000)) * rnd32(x5))))) + rnd32((rnd32((2131158074386537/500000000000000)) * rnd32(x6))))) + rnd32((rnd32((4686522586566541/1000000000000000)) * rnd32(x7))))) + rnd32((rnd32((9536941819547941/1000000000000000)) * rnd32(x8))))) + rnd32((rnd32((-470770215245199/50000000000000)) * rnd32(x9)))))

Conservative bound: [-66.038391, 66.038391]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3)))) + rnd32((rnd32((2304808758576443/250000000000000)) * x4)))) + rnd32((rnd32((-2491081851057709/250000000000000)) * x5)))) + rnd32((rnd32((2131158074386537/500000000000000)) * x6)))) + rnd32((rnd32((4686522586566541/1000000000000000)) * x7)))) + rnd32((rnd32((9536941819547941/1000000000000000)) * x8)))) + rnd32((rnd32((-470770215245199/50000000000000)) * x9))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2827894930252577/2500000000000000); err = (56753392402/152587890625)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1994222834709629/200000000000000); err = (1527580048/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1274841106914257/200000000000000); err = (-5603650416/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (14771345179975999/10000000000000000); err = (132675418244/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (2304808758576443/250000000000000); err = (-197591694736/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2491081851057709/250000000000000); err = (208877561968/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (2131158074386537/500000000000000); err = (-40031311112/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (4686522586566541/1000000000000000); err = (52603318992/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (9536941819547941/1000000000000000); err = (149108545792/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-470770215245199/50000000000000); err = (1521582448/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = (((((((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + ((2304808758576443/250000000000000) * x4)) + ((-2491081851057709/250000000000000) * x5)) + ((2131158074386537/500000000000000) * x6)) + ((4686522586566541/1000000000000000) * x7)) + ((9536941819547941/1000000000000000) * x8)) + ((-470770215245199/50000000000000) * x9))
-1 (86): exp = -24: (5/2535301200456458802993406410752)
1 (1): exp = -24: ((((((((((x0 * (56753392402/152587890625)) + (x1 * (1527580048/6103515625))) + (x2 * (-5603650416/6103515625))) + (x3 * (132675418244/152587890625))) + (x4 * (-197591694736/30517578125))) + (x5 * (208877561968/30517578125))) + (x6 * (-40031311112/30517578125))) + (x7 * (52603318992/30517578125))) + (x8 * (149108545792/30517578125))) + (x9 * (1521582448/6103515625)))
2 (3): exp = -24: floor_power2((((-2827894930252577/2500000000000000) * x0) + interval(-2.21692939070312511723e-08, 2.21692939070312511723e-08)))
3 (7): exp = -24: floor_power2((((1994222834709629/200000000000000) * x1) + interval(-1.49177739062500020405e-08, 1.49177739062500020405e-08)))
4 (9): exp = -24: floor_power2(((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + interval(-5.73528870791797086662e-07, 5.73528870791797086662e-07)))
5 (13): exp = -24: floor_power2((((1274841106914257/200000000000000) * x2) + interval(-5.47231485937500060477e-08, 5.47231485937500060477e-08)))
6 (15): exp = -24: floor_power2((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + interval(-1.34350775669023476476e-06, 1.34350775669023476476e-06)))
7 (19): exp = -24: floor_power2((((14771345179975999/10000000000000000) * x3) + interval(-5.18263352515625066126e-08, 5.18263352515625066126e-08)))
8 (21): exp = -24: floor_power2(((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + interval(-2.40861305312343803534e-06, 2.40861305312343803534e-06)))
9 (25): exp = -24: floor_power2((((2304808758576443/250000000000000) * x4) + interval(-3.85921278781250020537e-07, 3.85921278781250020537e-07)))
10 (27): exp = -24: floor_power2((((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + ((2304808758576443/250000000000000) * x4)) + interval(-4.22504580651406400879e-06, 4.22504580651406400879e-06)))
11 (31): exp = -24: floor_power2((((-2491081851057709/250000000000000) * x5) + interval(-4.07963988218750039461e-07, 4.07963988218750039461e-07)))
12 (33): exp = -24: floor_power2(((((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + ((2304808758576443/250000000000000) * x4)) + ((-2491081851057709/250000000000000) * x5)) + interval(-6.06352126934219074232e-06, 6.06352126934219074232e-06)))
13 (37): exp = -24: floor_power2((((2131158074386537/500000000000000) * x6) + interval(-7.81861545156250057528e-08, 7.81861545156250057528e-08)))
14 (39): exp = -24: floor_power2((((((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + ((2304808758576443/250000000000000) * x4)) + ((-2491081851057709/250000000000000) * x5)) + ((2131158074386537/500000000000000) * x6)) + interval(-8.28747463577187852600e-06, 8.28747463577187852600e-06)))
15 (43): exp = -24: floor_power2((((4686522586566541/1000000000000000) * x7) + interval(-1.02740857406250002180e-07, 1.02740857406250002180e-07)))
16 (45): exp = -24: floor_power2(((((((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + ((2304808758576443/250000000000000) * x4)) + ((-2491081851057709/250000000000000) * x5)) + ((2131158074386537/500000000000000) * x6)) + ((4686522586566541/1000000000000000) * x7)) + interval(-1.05359827050921917561e-05, 1.05359827050921917561e-05)))
17 (49): exp = -24: floor_power2((((9536941819547941/1000000000000000) * x8) + interval(-2.91227628500000021129e-07, 2.91227628500000021129e-07)))
18 (51): exp = -24: floor_power2((((((((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + ((2304808758576443/250000000000000) * x4)) + ((-2491081851057709/250000000000000) * x5)) + ((2131158074386537/500000000000000) * x6)) + ((4686522586566541/1000000000000000) * x7)) + ((9536941819547941/1000000000000000) * x8)) + interval(-1.32113961246078174654e-05, 1.32113961246078174654e-05)))
19 (55): exp = -24: floor_power2((((-470770215245199/50000000000000) * x9) + interval(-1.48592035937500015941e-08, 1.48592035937500015941e-08)))
20 (57): exp = -24: floor_power2(((((((((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + ((2304808758576443/250000000000000) * x4)) + ((-2491081851057709/250000000000000) * x5)) + ((2131158074386537/500000000000000) * x6)) + ((4686522586566541/1000000000000000) * x7)) + ((9536941819547941/1000000000000000) * x8)) + ((-470770215245199/50000000000000) * x9)) + interval(-1.56104411192171947567e-05, 1.56104411192171947567e-05)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((-2827894930252577/2500000000000000)) * x0))
3: rnd32((rnd32((1994222834709629/200000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1))))
5: rnd32((rnd32((1274841106914257/200000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2))))
7: rnd32((rnd32((14771345179975999/10000000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3))))
9: rnd32((rnd32((2304808758576443/250000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3)))) + rnd32((rnd32((2304808758576443/250000000000000)) * x4))))
11: rnd32((rnd32((-2491081851057709/250000000000000)) * x5))
12: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3)))) + rnd32((rnd32((2304808758576443/250000000000000)) * x4)))) + rnd32((rnd32((-2491081851057709/250000000000000)) * x5))))
13: rnd32((rnd32((2131158074386537/500000000000000)) * x6))
14: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3)))) + rnd32((rnd32((2304808758576443/250000000000000)) * x4)))) + rnd32((rnd32((-2491081851057709/250000000000000)) * x5)))) + rnd32((rnd32((2131158074386537/500000000000000)) * x6))))
15: rnd32((rnd32((4686522586566541/1000000000000000)) * x7))
16: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3)))) + rnd32((rnd32((2304808758576443/250000000000000)) * x4)))) + rnd32((rnd32((-2491081851057709/250000000000000)) * x5)))) + rnd32((rnd32((2131158074386537/500000000000000)) * x6)))) + rnd32((rnd32((4686522586566541/1000000000000000)) * x7))))
17: rnd32((rnd32((9536941819547941/1000000000000000)) * x8))
18: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3)))) + rnd32((rnd32((2304808758576443/250000000000000)) * x4)))) + rnd32((rnd32((-2491081851057709/250000000000000)) * x5)))) + rnd32((rnd32((2131158074386537/500000000000000)) * x6)))) + rnd32((rnd32((4686522586566541/1000000000000000)) * x7)))) + rnd32((rnd32((9536941819547941/1000000000000000)) * x8))))
19: rnd32((rnd32((-470770215245199/50000000000000)) * x9))
20: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3)))) + rnd32((rnd32((2304808758576443/250000000000000)) * x4)))) + rnd32((rnd32((-2491081851057709/250000000000000)) * x5)))) + rnd32((rnd32((2131158074386537/500000000000000)) * x6)))) + rnd32((rnd32((4686522586566541/1000000000000000)) * x7)))) + rnd32((rnd32((9536941819547941/1000000000000000)) * x8)))) + rnd32((rnd32((-470770215245199/50000000000000)) * x9))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 33608, max = 33608): 33608
min = -6.603836e+01 (lower_min = -6.539739e+01)
max = 6.603836e+01 (lower_max = 6.539739e+01)
subopt = 6.409653e-01 (1.0%)
bounds: [-6.603836e+01, 6.603836e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 1.972152e-30 (lower_min = 1.972152e-30)
max = 1.972152e-30 (lower_max = 1.972152e-30)
subopt = 0.000000e+00 (0.0%)
rmin(result = 1.972152e-30, lower = 1.972152e-30), rmax(result = 1.972152e-30, lower = 1.972152e-30)
-1: exp = -24: 1.972152e-30 (low = 1.972152e-30, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 1000000): 1000000
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 3.116276e+02 (lower_max = 3.112008e+02)
subopt = 4.267674e-01 (0.1%)
exact bound (exp = -24): 3.116276e+02 (low = 3.112008e+02, subopt = 0.1%)
total2: 1.175494e-37 (low = 1.175494e-37, subopt = 0.0%)
exact total: 1.857445e-05 (low = 1.854901e-05, subopt = 0.1%)

Elapsed time: 68.53719
Processing: exp21

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((6225620863768981/1000000000000000)) * rnd32(x0))) + rnd32((rnd32((-1576729160064267/200000000000000)) * rnd32(x1))))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * rnd32(x2))))) + rnd32((rnd32((-767009899096057/500000000000000)) * rnd32(x3))))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * rnd32(x4))))) + rnd32((rnd32((1141763989805051/400000000000000)) * rnd32(x5))))) + rnd32((rnd32((-2241528915269991/250000000000000)) * rnd32(x6))))) + rnd32((rnd32((-9430508080912379/1000000000000000)) * rnd32(x7))))) + rnd32((rnd32((472661195985021/50000000000000)) * rnd32(x8))))) + rnd32((rnd32((-14562180621033063/5000000000000000)) * rnd32(x9)))))

Conservative bound: [-58.276174, 58.276174]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3)))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * x4)))) + rnd32((rnd32((1141763989805051/400000000000000)) * x5)))) + rnd32((rnd32((-2241528915269991/250000000000000)) * x6)))) + rnd32((rnd32((-9430508080912379/1000000000000000)) * x7)))) + rnd32((rnd32((472661195985021/50000000000000)) * x8)))) + rnd32((rnd32((-14562180621033063/5000000000000000)) * x9))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (6225620863768981/1000000000000000); err = (59984093272/30517578125)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1576729160064267/200000000000000); err = (21609595296/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-4182688149163829/1250000000000000); err = (300395290708/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-767009899096057/500000000000000); err = (15181106382/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-5670014627011071/1000000000000000); err = (118392206648/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1141763989805051/400000000000000); err = (4241655556/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2241528915269991/250000000000000); err = (148714558432/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-9430508080912379/1000000000000000); err = (-215552138048/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (472661195985021/50000000000000); err = (-26872676992/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-14562180621033063/5000000000000000); err = (-296328303256/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = (((((((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + ((-5670014627011071/1000000000000000) * x4)) + ((1141763989805051/400000000000000) * x5)) + ((-2241528915269991/250000000000000) * x6)) + ((-9430508080912379/1000000000000000) * x7)) + ((472661195985021/50000000000000) * x8)) + ((-14562180621033063/5000000000000000) * x9))
-1 (86): exp = -24: (5/2535301200456458802993406410752)
1 (1): exp = -24: ((((((((((x0 * (59984093272/30517578125)) + (x1 * (21609595296/6103515625))) + (x2 * (300395290708/152587890625))) + (x3 * (15181106382/30517578125))) + (x4 * (118392206648/30517578125))) + (x5 * (4241655556/6103515625))) + (x6 * (148714558432/30517578125))) + (x7 * (-215552138048/30517578125))) + (x8 * (-26872676992/6103515625))) + (x9 * (-296328303256/152587890625)))
2 (3): exp = -24: floor_power2((((6225620863768981/1000000000000000) * x0) + interval(-1.17156432171875001358e-07, 1.17156432171875001358e-07)))
3 (7): exp = -24: floor_power2((((-1576729160064267/200000000000000) * x1) + interval(-2.11031204062500024420e-07, 2.11031204062500024420e-07)))
4 (9): exp = -24: floor_power2(((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + interval(-8.05024794437500105188e-07, 8.05024794437500105188e-07)))
5 (13): exp = -24: floor_power2((((-4182688149163829/1250000000000000) * x2) + interval(-1.17341910432812511908e-07, 1.17341910432812511908e-07)))
6 (15): exp = -24: floor_power2((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + interval(-1.51841315262421902591e-06, 1.51841315262421902591e-06)))
7 (19): exp = -24: floor_power2((((-767009899096057/500000000000000) * x3) + interval(-2.96505984023437530491e-08, 2.96505984023437530491e-08)))
8 (21): exp = -24: floor_power2(((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + interval(-2.56134271220820353300e-06, 2.56134271220820353300e-06)))
9 (25): exp = -24: floor_power2((((-5670014627011071/1000000000000000) * x4) + interval(-2.31234778609375018121e-07, 2.31234778609375018121e-07)))
10 (27): exp = -24: floor_power2((((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + ((-5670014627011071/1000000000000000) * x4)) + interval(-3.98467038632539203051e-06, 3.98467038632539203051e-06)))
11 (31): exp = -24: floor_power2((((1141763989805051/400000000000000) * x5) + interval(-4.14224175390625036304e-08, 4.14224175390625036304e-08)))
12 (33): exp = -24: floor_power2(((((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + ((-5670014627011071/1000000000000000) * x4)) + ((1141763989805051/400000000000000) * x5)) + interval(-5.09897640982148567826e-06, 5.09897640982148567826e-06)))
13 (37): exp = -24: floor_power2((((-2241528915269991/250000000000000) * x6) + interval(-2.90458121937500018127e-07, 2.90458121937500018127e-07)))
14 (39): exp = -24: floor_power2((((((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + ((-5670014627011071/1000000000000000) * x4)) + ((1141763989805051/400000000000000) * x5)) + ((-2241528915269991/250000000000000) * x6)) + interval(-6.81994600636836186106e-06, 6.81994600636836186106e-06)))
15 (43): exp = -24: floor_power2((((-9430508080912379/1000000000000000) * x7) + interval(-4.21000269625000036275e-07, 4.21000269625000036275e-07)))
16 (45): exp = -24: floor_power2(((((((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + ((-5670014627011071/1000000000000000) * x4)) + ((1141763989805051/400000000000000) * x5)) + ((-2241528915269991/250000000000000) * x6)) + ((-9430508080912379/1000000000000000) * x7)) + interval(-9.62513206700898779730e-06, 9.62513206700898779730e-06)))
17 (49): exp = -24: floor_power2((((472661195985021/50000000000000) * x8) + interval(-2.62428486250000042457e-07, 2.62428486250000042457e-07)))
18 (51): exp = -24: floor_power2((((((((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + ((-5670014627011071/1000000000000000) * x4)) + ((1141763989805051/400000000000000) * x5)) + ((-2241528915269991/250000000000000) * x6)) + ((-9430508080912379/1000000000000000) * x7)) + ((472661195985021/50000000000000) * x8)) + interval(-1.22717463442746141632e-05, 1.22717463442746141632e-05)))
19 (55): exp = -24: floor_power2((((-14562180621033063/5000000000000000) * x9) + interval(-1.15753243459375003639e-07, 1.15753243459375003639e-07)))
20 (57): exp = -24: floor_power2(((((((((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + ((-5670014627011071/1000000000000000) * x4)) + ((1141763989805051/400000000000000) * x5)) + ((-2241528915269991/250000000000000) * x6)) + ((-9430508080912379/1000000000000000) * x7)) + ((472661195985021/50000000000000) * x8)) + ((-14562180621033063/5000000000000000) * x9)) + interval(-1.44140575100972715816e-05, 1.44140575100972715816e-05)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((6225620863768981/1000000000000000)) * x0))
3: rnd32((rnd32((-1576729160064267/200000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1))))
5: rnd32((rnd32((-4182688149163829/1250000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2))))
7: rnd32((rnd32((-767009899096057/500000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3))))
9: rnd32((rnd32((-5670014627011071/1000000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3)))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * x4))))
11: rnd32((rnd32((1141763989805051/400000000000000)) * x5))
12: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3)))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * x4)))) + rnd32((rnd32((1141763989805051/400000000000000)) * x5))))
13: rnd32((rnd32((-2241528915269991/250000000000000)) * x6))
14: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3)))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * x4)))) + rnd32((rnd32((1141763989805051/400000000000000)) * x5)))) + rnd32((rnd32((-2241528915269991/250000000000000)) * x6))))
15: rnd32((rnd32((-9430508080912379/1000000000000000)) * x7))
16: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3)))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * x4)))) + rnd32((rnd32((1141763989805051/400000000000000)) * x5)))) + rnd32((rnd32((-2241528915269991/250000000000000)) * x6)))) + rnd32((rnd32((-9430508080912379/1000000000000000)) * x7))))
17: rnd32((rnd32((472661195985021/50000000000000)) * x8))
18: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3)))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * x4)))) + rnd32((rnd32((1141763989805051/400000000000000)) * x5)))) + rnd32((rnd32((-2241528915269991/250000000000000)) * x6)))) + rnd32((rnd32((-9430508080912379/1000000000000000)) * x7)))) + rnd32((rnd32((472661195985021/50000000000000)) * x8))))
19: rnd32((rnd32((-14562180621033063/5000000000000000)) * x9))
20: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3)))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * x4)))) + rnd32((rnd32((1141763989805051/400000000000000)) * x5)))) + rnd32((rnd32((-2241528915269991/250000000000000)) * x6)))) + rnd32((rnd32((-9430508080912379/1000000000000000)) * x7)))) + rnd32((rnd32((472661195985021/50000000000000)) * x8)))) + rnd32((rnd32((-14562180621033063/5000000000000000)) * x9))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 51578, max = 51578): 51578
min = -5.827615e+01 (lower_min = -5.769698e+01)
max = 5.827615e+01 (lower_max = 5.769698e+01)
subopt = 5.791642e-01 (1.0%)
bounds: [-5.827615e+01, 5.827615e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 1.972152e-30 (lower_min = 1.972152e-30)
max = 1.972152e-30 (lower_max = 1.972152e-30)
subopt = 0.000000e+00 (0.0%)
rmin(result = 1.972152e-30, lower = 1.972152e-30), rmax(result = 1.972152e-30, lower = 1.972152e-30)
-1: exp = -24: 1.972152e-30 (low = 1.972152e-30, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 1000000): 1000000
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 2.618140e+02 (lower_max = 2.471984e+02)
subopt = 1.461555e+01 (5.6%)
exact bound (exp = -24): 2.618140e+02 (low = 2.471984e+02, subopt = 5.6%)
total2: 1.175494e-37 (low = 1.175494e-37, subopt = 0.0%)
exact total: 1.560533e-05 (low = 1.473418e-05, subopt = 5.6%)

Elapsed time: 69.40722
Processing: exp22

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((4069789500263667/500000000000000)) * rnd32(x0))) + rnd32((rnd32((-2300368983996033/1000000000000000)) * rnd32(x1))))) + rnd32((rnd32((-952765572948147/250000000000000)) * rnd32(x2))))) + rnd32((rnd32((24136252216765897/10000000000000000)) * rnd32(x3))))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * rnd32(x4))))) + rnd32((rnd32((-6674615794248657/1000000000000000)) * rnd32(x5))))) + rnd32((rnd32((-3251999686764889/500000000000000)) * rnd32(x6))))) + rnd32((rnd32((15313778346372601/2000000000000000)) * rnd32(x7))))) + rnd32((rnd32((5626784793219439/1000000000000000)) * rnd32(x8))))) + rnd32((rnd32((3211748331564369/500000000000000)) * rnd32(x9)))))

Conservative bound: [-53.480739, 53.480739]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3)))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * x4)))) + rnd32((rnd32((-6674615794248657/1000000000000000)) * x5)))) + rnd32((rnd32((-3251999686764889/500000000000000)) * x6)))) + rnd32((rnd32((15313778346372601/2000000000000000)) * x7)))) + rnd32((rnd32((5626784793219439/1000000000000000)) * x8)))) + rnd32((rnd32((3211748331564369/500000000000000)) * x9))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (4069789500263667/500000000000000); err = (92801245008/30517578125)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2300368983996033/1000000000000000); err = (20623718604/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-952765572948147/250000000000000); err = (22617819944/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (24136252216765897/10000000000000000); err = (-47742305368/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-3930292426663769/1000000000000000); err = (-30069037228/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-6674615794248657/1000000000000000); err = (33657187616/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-3251999686764889/500000000000000); err = (-71825371336/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (15313778346372601/2000000000000000); err = (108233885856/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (5626784793219439/1000000000000000); err = (-4231022232/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (3211748331564369/500000000000000); err = (-30743711144/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = (((((((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + ((-3930292426663769/1000000000000000) * x4)) + ((-6674615794248657/1000000000000000) * x5)) + ((-3251999686764889/500000000000000) * x6)) + ((15313778346372601/2000000000000000) * x7)) + ((5626784793219439/1000000000000000) * x8)) + ((3211748331564369/500000000000000) * x9))
-1 (86): exp = -24: (5/2535301200456458802993406410752)
1 (1): exp = -24: ((((((((((x0 * (92801245008/30517578125)) + (x1 * (20623718604/30517578125))) + (x2 * (22617819944/30517578125))) + (x3 * (-47742305368/152587890625))) + (x4 * (-30069037228/30517578125))) + (x5 * (33657187616/30517578125))) + (x6 * (-71825371336/30517578125))) + (x7 * (108233885856/30517578125))) + (x8 * (-4231022232/30517578125))) + (x9 * (-30743711144/30517578125)))
2 (3): exp = -24: floor_power2((((4069789500263667/500000000000000) * x0) + interval(-1.81252431656250014723e-07, 1.81252431656250014723e-07)))
3 (7): exp = -24: floor_power2((((-2300368983996033/1000000000000000) * x1) + interval(-4.02807003984375011165e-08, 4.02807003984375011165e-08)))
4 (9): exp = -24: floor_power2(((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + interval(-8.17579579808593798927e-07, 8.17579579808593798927e-07)))
5 (13): exp = -24: floor_power2((((-952765572948147/250000000000000) * x2) + interval(-4.41754295781250050183e-08, 4.41754295781250050183e-08)))
6 (15): exp = -24: floor_power2((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + interval(-1.45780145714062518629e-06, 1.45780145714062518629e-06)))
7 (19): exp = -24: floor_power2((((24136252216765897/10000000000000000) * x3) + interval(-1.86493380343750014285e-08, 1.86493380343750014285e-08)))
8 (21): exp = -24: floor_power2(((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + interval(-2.07249724292890673882e-06, 2.07249724292890673882e-06)))
9 (25): exp = -24: floor_power2((((-3930292426663769/1000000000000000) * x4) + interval(-5.87285883359375057068e-08, 5.87285883359375057068e-08)))
10 (27): exp = -24: floor_power2((((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + ((-3930292426663769/1000000000000000) * x4)) + interval(-3.20410943722187581878e-06, 3.20410943722187581878e-06)))
11 (31): exp = -24: floor_power2((((-6674615794248657/1000000000000000) * x5) + interval(-6.57366945625000119822e-08, 6.57366945625000119822e-08)))
12 (33): exp = -24: floor_power2(((((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + ((-3930292426663769/1000000000000000) * x4)) + ((-6674615794248657/1000000000000000) * x5)) + interval(-4.46193902729218889986e-06, 4.46193902729218889986e-06)))
13 (37): exp = -24: floor_power2((((-3251999686764889/500000000000000) * x6) + interval(-1.40283928390625010606e-07, 1.40283928390625010606e-07)))
14 (39): exp = -24: floor_power2((((((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + ((-3930292426663769/1000000000000000) * x4)) + ((-6674615794248657/1000000000000000) * x5)) + ((-3251999686764889/500000000000000) * x6)) + interval(-5.79431585119062704574e-06, 5.79431585119062704574e-06)))
15 (43): exp = -24: floor_power2((((15313778346372601/2000000000000000) * x7) + interval(-2.11394308312500020106e-07, 2.11394308312500020106e-07)))
16 (45): exp = -24: floor_power2(((((((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + ((-3930292426663769/1000000000000000) * x4)) + ((-6674615794248657/1000000000000000) * x5)) + ((-3251999686764889/500000000000000) * x6)) + ((15313778346372601/2000000000000000) * x7)) + interval(-8.15147737141718996289e-06, 8.15147737141718996289e-06)))
17 (49): exp = -24: floor_power2((((5626784793219439/1000000000000000) * x8) + interval(-8.26371529687500163075e-09, 8.26371529687500163075e-09)))
18 (51): exp = -24: floor_power2((((((((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + ((-3930292426663769/1000000000000000) * x4)) + ((-6674615794248657/1000000000000000) * x5)) + ((-3251999686764889/500000000000000) * x6)) + ((15313778346372601/2000000000000000) * x7)) + ((5626784793219439/1000000000000000) * x8)) + interval(-1.03055082986281283777e-05, 1.03055082986281283777e-05)))
19 (55): exp = -24: floor_power2((((3211748331564369/500000000000000) * x9) + interval(-6.00463108281250080006e-08, 6.00463108281250080006e-08)))
20 (57): exp = -24: floor_power2(((((((((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + ((-3930292426663769/1000000000000000) * x4)) + ((-6674615794248657/1000000000000000) * x5)) + ((-3251999686764889/500000000000000) * x6)) + ((15313778346372601/2000000000000000) * x7)) + ((5626784793219439/1000000000000000) * x8)) + ((3211748331564369/500000000000000) * x9)) + interval(-1.25113218213703162695e-05, 1.25113218213703162695e-05)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((4069789500263667/500000000000000)) * x0))
3: rnd32((rnd32((-2300368983996033/1000000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1))))
5: rnd32((rnd32((-952765572948147/250000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2))))
7: rnd32((rnd32((24136252216765897/10000000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3))))
9: rnd32((rnd32((-3930292426663769/1000000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3)))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * x4))))
11: rnd32((rnd32((-6674615794248657/1000000000000000)) * x5))
12: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3)))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * x4)))) + rnd32((rnd32((-6674615794248657/1000000000000000)) * x5))))
13: rnd32((rnd32((-3251999686764889/500000000000000)) * x6))
14: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3)))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * x4)))) + rnd32((rnd32((-6674615794248657/1000000000000000)) * x5)))) + rnd32((rnd32((-3251999686764889/500000000000000)) * x6))))
15: rnd32((rnd32((15313778346372601/2000000000000000)) * x7))
16: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3)))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * x4)))) + rnd32((rnd32((-6674615794248657/1000000000000000)) * x5)))) + rnd32((rnd32((-3251999686764889/500000000000000)) * x6)))) + rnd32((rnd32((15313778346372601/2000000000000000)) * x7))))
17: rnd32((rnd32((5626784793219439/1000000000000000)) * x8))
18: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3)))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * x4)))) + rnd32((rnd32((-6674615794248657/1000000000000000)) * x5)))) + rnd32((rnd32((-3251999686764889/500000000000000)) * x6)))) + rnd32((rnd32((15313778346372601/2000000000000000)) * x7)))) + rnd32((rnd32((5626784793219439/1000000000000000)) * x8))))
19: rnd32((rnd32((3211748331564369/500000000000000)) * x9))
20: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3)))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * x4)))) + rnd32((rnd32((-6674615794248657/1000000000000000)) * x5)))) + rnd32((rnd32((-3251999686764889/500000000000000)) * x6)))) + rnd32((rnd32((15313778346372601/2000000000000000)) * x7)))) + rnd32((rnd32((5626784793219439/1000000000000000)) * x8)))) + rnd32((rnd32((3211748331564369/500000000000000)) * x9))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 121972, max = 121972): 121972
min = -5.348071e+01 (lower_min = -5.296099e+01)
max = 5.348071e+01 (lower_max = 5.296099e+01)
subopt = 5.197197e-01 (1.0%)
bounds: [-5.348071e+01, 5.348071e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 1.972152e-30 (lower_min = 1.972152e-30)
max = 1.972152e-30 (lower_max = 1.972152e-30)
subopt = 0.000000e+00 (0.0%)
rmin(result = 1.972152e-30, lower = 1.972152e-30), rmax(result = 1.972152e-30, lower = 1.972152e-30)
-1: exp = -24: 1.972152e-30 (low = 1.972152e-30, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 1000000): 1000000
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 2.369371e+02 (lower_max = 2.112674e+02)
subopt = 2.566969e+01 (10.8%)
exact bound (exp = -24): 2.369371e+02 (low = 2.112674e+02, subopt = 10.8%)
total2: 1.175494e-37 (low = 1.175494e-37, subopt = 0.0%)
exact total: 1.412255e-05 (low = 1.259252e-05, subopt = 10.8%)

Elapsed time: 81.21930
Processing: exp23

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((-467764930355827/50000000000000)) * rnd32(x0))) + rnd32((rnd32((-4477180195806909/2000000000000000)) * rnd32(x1))))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * rnd32(x2))))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * rnd32(x3))))) + rnd32((rnd32((7497676058034859/1000000000000000)) * rnd32(x4))))) + rnd32((rnd32((2115298428275981/250000000000000)) * rnd32(x5))))) + rnd32((rnd32((9606658664005433/1000000000000000)) * rnd32(x6))))) + rnd32((rnd32((861278755548661/125000000000000)) * rnd32(x7))))) + rnd32((rnd32((-1031230628976247/250000000000000)) * rnd32(x8))))) + rnd32((rnd32((4318127679618291/500000000000000)) * rnd32(x9)))))

Conservative bound: [-65.839333, 65.839333]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3)))) + rnd32((rnd32((7497676058034859/1000000000000000)) * x4)))) + rnd32((rnd32((2115298428275981/250000000000000)) * x5)))) + rnd32((rnd32((9606658664005433/1000000000000000)) * x6)))) + rnd32((rnd32((861278755548661/125000000000000)) * x7)))) + rnd32((rnd32((-1031230628976247/250000000000000)) * x8)))) + rnd32((rnd32((4318127679618291/500000000000000)) * x9))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (-467764930355827/50000000000000); err = (39818766304/6103515625)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-4477180195806909/2000000000000000); err = (-49071881204/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-6307886269679301/1000000000000000); err = (-74763302112/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-13602951095674367/5000000000000000); err = (-267625900904/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (7497676058034859/1000000000000000); err = (83120097808/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (2115298428275981/250000000000000); err = (-166547040912/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (9606658664005433/1000000000000000); err = (-139029218304/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (861278755548661/125000000000000); err = (-68835184544/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1031230628976247/250000000000000); err = (121075396144/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (4318127679618291/500000000000000); err = (48616629984/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = (((((((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + ((7497676058034859/1000000000000000) * x4)) + ((2115298428275981/250000000000000) * x5)) + ((9606658664005433/1000000000000000) * x6)) + ((861278755548661/125000000000000) * x7)) + ((-1031230628976247/250000000000000) * x8)) + ((4318127679618291/500000000000000) * x9))
-1 (86): exp = -24: (5/2535301200456458802993406410752)
1 (1): exp = -24: ((((((((((x0 * (39818766304/6103515625)) + (x1 * (-49071881204/30517578125))) + (x2 * (-74763302112/30517578125))) + (x3 * (-267625900904/152587890625))) + (x4 * (83120097808/30517578125))) + (x5 * (-166547040912/30517578125))) + (x6 * (-139029218304/30517578125))) + (x7 * (-68835184544/30517578125))) + (x8 * (121075396144/30517578125))) + (x9 * (48616629984/30517578125)))
2 (3): exp = -24: floor_power2((((-467764930355827/50000000000000) * x0) + interval(-3.88855139687500007321e-07, 3.88855139687500007321e-07)))
3 (7): exp = -24: floor_power2((((-4477180195806909/2000000000000000) * x1) + interval(-9.58435179765625120172e-08, 9.58435179765625120172e-08)))
4 (9): exp = -24: floor_power2(((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + interval(-1.08074510541796895463e-06, 1.08074510541796895463e-06)))
5 (13): exp = -24: floor_power2((((-6307886269679301/1000000000000000) * x2) + interval(-1.46022074437500020752e-07, 1.46022074437500020752e-07)))
6 (15): exp = -24: floor_power2((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + interval(-1.94202291716015679302e-06, 1.94202291716015679302e-06)))
7 (19): exp = -24: floor_power2((((-13602951095674367/5000000000000000) * x3) + interval(-1.04541367540625003018e-07, 1.04541367540625003018e-07)))
8 (21): exp = -24: floor_power2(((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + interval(-3.11944789065781300633e-06, 3.11944789065781300633e-06)))
9 (25): exp = -24: floor_power2((((7497676058034859/1000000000000000) * x4) + interval(-1.62343941031250022054e-07, 1.62343941031250022054e-07)))
10 (27): exp = -24: floor_power2((((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + ((7497676058034859/1000000000000000) * x4)) + interval(-4.47388472719687653424e-06, 4.47388472719687653424e-06)))
11 (31): exp = -24: floor_power2((((2115298428275981/250000000000000) * x5) + interval(-3.25287189281250027889e-07, 3.25287189281250027889e-07)))
12 (33): exp = -24: floor_power2(((((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + ((7497676058034859/1000000000000000) * x4)) + ((2115298428275981/250000000000000) * x5)) + interval(-6.22968339108750214446e-06, 6.22968339108750214446e-06)))
13 (37): exp = -24: floor_power2((((9606658664005433/1000000000000000) * x6) + interval(-2.71541442000000050958e-07, 2.71541442000000050958e-07)))
14 (39): exp = -24: floor_power2((((((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + ((7497676058034859/1000000000000000) * x4)) + ((2115298428275981/250000000000000) * x5)) + ((9606658664005433/1000000000000000) * x6)) + interval(-8.88541062410312888948e-06, 8.88541062410312888948e-06)))
15 (43): exp = -24: floor_power2((((861278755548661/125000000000000) * x7) + interval(-1.34443719812500018620e-07, 1.34443719812500018620e-07)))
16 (45): exp = -24: floor_power2(((((((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + ((7497676058034859/1000000000000000) * x4)) + ((2115298428275981/250000000000000) * x5)) + ((9606658664005433/1000000000000000) * x6)) + ((861278755548661/125000000000000) * x7)) + interval(-1.11656215558296923081e-05, 1.11656215558296923081e-05)))
17 (49): exp = -24: floor_power2((((-1031230628976247/250000000000000) * x8) + interval(-2.36475383093750021440e-07, 2.36475383093750021440e-07)))
18 (51): exp = -24: floor_power2((((((((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + ((7497676058034859/1000000000000000) * x4)) + ((2115298428275981/250000000000000) * x5)) + ((9606658664005433/1000000000000000) * x6)) + ((861278755548661/125000000000000) * x7)) + ((-1031230628976247/250000000000000) * x8)) + interval(-1.35478641508375039295e-05, 1.35478641508375039295e-05)))
19 (55): exp = -24: floor_power2((((4318127679618291/500000000000000) * x9) + interval(-9.49543554375000033668e-08, 9.49543554375000033668e-08)))
20 (57): exp = -24: floor_power2(((((((((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + ((7497676058034859/1000000000000000) * x4)) + ((2115298428275981/250000000000000) * x5)) + ((9606658664005433/1000000000000000) * x6)) + ((861278755548661/125000000000000) * x7)) + ((-1031230628976247/250000000000000) * x8)) + ((4318127679618291/500000000000000) * x9)) + interval(-1.60270042972906329431e-05, 1.60270042972906329431e-05)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((-467764930355827/50000000000000)) * x0))
3: rnd32((rnd32((-4477180195806909/2000000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1))))
5: rnd32((rnd32((-6307886269679301/1000000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2))))
7: rnd32((rnd32((-13602951095674367/5000000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3))))
9: rnd32((rnd32((7497676058034859/1000000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3)))) + rnd32((rnd32((7497676058034859/1000000000000000)) * x4))))
11: rnd32((rnd32((2115298428275981/250000000000000)) * x5))
12: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3)))) + rnd32((rnd32((7497676058034859/1000000000000000)) * x4)))) + rnd32((rnd32((2115298428275981/250000000000000)) * x5))))
13: rnd32((rnd32((9606658664005433/1000000000000000)) * x6))
14: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3)))) + rnd32((rnd32((7497676058034859/1000000000000000)) * x4)))) + rnd32((rnd32((2115298428275981/250000000000000)) * x5)))) + rnd32((rnd32((9606658664005433/1000000000000000)) * x6))))
15: rnd32((rnd32((861278755548661/125000000000000)) * x7))
16: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3)))) + rnd32((rnd32((7497676058034859/1000000000000000)) * x4)))) + rnd32((rnd32((2115298428275981/250000000000000)) * x5)))) + rnd32((rnd32((9606658664005433/1000000000000000)) * x6)))) + rnd32((rnd32((861278755548661/125000000000000)) * x7))))
17: rnd32((rnd32((-1031230628976247/250000000000000)) * x8))
18: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3)))) + rnd32((rnd32((7497676058034859/1000000000000000)) * x4)))) + rnd32((rnd32((2115298428275981/250000000000000)) * x5)))) + rnd32((rnd32((9606658664005433/1000000000000000)) * x6)))) + rnd32((rnd32((861278755548661/125000000000000)) * x7)))) + rnd32((rnd32((-1031230628976247/250000000000000)) * x8))))
19: rnd32((rnd32((4318127679618291/500000000000000)) * x9))
20: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3)))) + rnd32((rnd32((7497676058034859/1000000000000000)) * x4)))) + rnd32((rnd32((2115298428275981/250000000000000)) * x5)))) + rnd32((rnd32((9606658664005433/1000000000000000)) * x6)))) + rnd32((rnd32((861278755548661/125000000000000)) * x7)))) + rnd32((rnd32((-1031230628976247/250000000000000)) * x8)))) + rnd32((rnd32((4318127679618291/500000000000000)) * x9))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 156402, max = 156402): 156402
min = -6.583930e+01 (lower_min = -6.519724e+01)
max = 6.583930e+01 (lower_max = 6.519724e+01)
subopt = 6.420627e-01 (1.0%)
bounds: [-6.583930e+01, 6.583930e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 1.972152e-30 (lower_min = 1.972152e-30)
max = 1.972152e-30 (lower_max = 1.972152e-30)
subopt = 0.000000e+00 (0.0%)
rmin(result = 1.972152e-30, lower = 1.972152e-30), rmax(result = 1.972152e-30, lower = 1.972152e-30)
-1: exp = -24: 1.972152e-30 (low = 1.972152e-30, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 1000000): 1000000
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 3.145770e+02 (lower_max = 2.797439e+02)
subopt = 3.483302e+01 (11.1%)
exact bound (exp = -24): 3.145770e+02 (low = 2.797439e+02, subopt = 11.1%)
total2: 1.175494e-37 (low = 1.175494e-37, subopt = 0.0%)
exact total: 1.875025e-05 (low = 1.667404e-05, subopt = 11.1%)

Elapsed time: 71.30046
Processing: exp24

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((5500150675535771/1000000000000000)) * rnd32(x0))) + rnd32((rnd32((-1320279542375871/250000000000000)) * rnd32(x1))))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * rnd32(x2))))) + rnd32((rnd32((-1519680719864701/250000000000000)) * rnd32(x3))))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * rnd32(x4))))) + rnd32((rnd32((-5711040965435723/5000000000000000)) * rnd32(x5))))) + rnd32((rnd32((-9598640770688359/1000000000000000)) * rnd32(x6))))) + rnd32((rnd32((420609288095509/2000000000000000)) * rnd32(x7))))) + rnd32((rnd32((15464372313221567/2000000000000000)) * rnd32(x8))))) + rnd32((rnd32((2472783269284073/250000000000000)) * rnd32(x9)))))

Conservative bound: [-52.320813, 52.320813]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3)))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * x4)))) + rnd32((rnd32((-5711040965435723/5000000000000000)) * x5)))) + rnd32((rnd32((-9598640770688359/1000000000000000)) * x6)))) + rnd32((rnd32((420609288095509/2000000000000000)) * x7)))) + rnd32((rnd32((15464372313221567/2000000000000000)) * x8)))) + rnd32((rnd32((2472783269284073/250000000000000)) * x9))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (5500150675535771/1000000000000000); err = (-2563185248/30517578125)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1320279542375871/250000000000000); err = (114401716192/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-8533238434522321/10000000000000000); err = (-67069745426/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1519680719864701/250000000000000); err = (38060842352/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-6033000513619893/1000000000000000); err = (-22739010216/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-5711040965435723/5000000000000000); err = (65247691074/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-9598640770688359/1000000000000000); err = (-168342439808/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (420609288095509/2000000000000000); err = (-3723615017/61035156250)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (15464372313221567/2000000000000000); err = (-82346528848/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (2472783269284073/250000000000000); err = (-118412468496/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = (((((((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + ((-6033000513619893/1000000000000000) * x4)) + ((-5711040965435723/5000000000000000) * x5)) + ((-9598640770688359/1000000000000000) * x6)) + ((420609288095509/2000000000000000) * x7)) + ((15464372313221567/2000000000000000) * x8)) + ((2472783269284073/250000000000000) * x9))
-1 (86): exp = -24: (5/2535301200456458802993406410752)
1 (1): exp = -24: ((((((((((x0 * (-2563185248/30517578125)) + (x1 * (114401716192/30517578125))) + (x2 * (-67069745426/152587890625))) + (x3 * (38060842352/30517578125))) + (x4 * (-22739010216/30517578125))) + (x5 * (65247691074/152587890625))) + (x6 * (-168342439808/30517578125))) + (x7 * (-3723615017/61035156250))) + (x8 * (-82346528848/30517578125))) + (x9 * (-118412468496/30517578125)))
2 (3): exp = -24: floor_power2((((5500150675535771/1000000000000000) * x0) + interval(-5.00622118750000028176e-09, 5.00622118750000028176e-09)))
3 (7): exp = -24: floor_power2((((-1320279542375871/250000000000000) * x1) + interval(-2.23440851937500020899e-07, 2.23440851937500020899e-07)))
4 (9): exp = -24: floor_power2(((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + interval(-7.05284231328125127060e-07, 7.05284231328125127060e-07)))
5 (13): exp = -24: floor_power2((((-8533238434522321/10000000000000000) * x2) + interval(-2.61991193070312521155e-08, 2.61991193070312521155e-08)))
6 (15): exp = -24: floor_power2((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + interval(-1.23812283122597692659e-06, 1.23812283122597692659e-06)))
7 (19): exp = -24: floor_power2((((-1519680719864701/250000000000000) * x3) + interval(-7.43375827187500119757e-08, 7.43375827187500119757e-08)))
8 (21): exp = -24: floor_power2(((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + interval(-2.02771615124941469003e-06, 2.02771615124941469003e-06)))
9 (25): exp = -24: floor_power2((((-6033000513619893/1000000000000000) * x4) + interval(-4.44121293281250051655e-08, 4.44121293281250051655e-08)))
10 (27): exp = -24: floor_power2((((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + ((-6033000513619893/1000000000000000) * x4)) + interval(-3.26422117608535230108e-06, 3.26422117608535230108e-06)))
11 (31): exp = -24: floor_power2((((-5711040965435723/5000000000000000) * x5) + interval(-2.54873793257812529849e-08, 2.54873793257812529849e-08)))
12 (33): exp = -24: floor_power2(((((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + ((-6033000513619893/1000000000000000) * x4)) + ((-5711040965435723/5000000000000000) * x5)) + interval(-4.30298751659277415259e-06, 4.30298751659277415259e-06)))
13 (37): exp = -24: floor_power2((((-9598640770688359/1000000000000000) * x6) + interval(-3.28793827750000009721e-07, 3.28793827750000009721e-07)))
14 (39): exp = -24: floor_power2((((((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + ((-6033000513619893/1000000000000000) * x4)) + ((-5711040965435723/5000000000000000) * x5)) + ((-9598640770688359/1000000000000000) * x6)) + interval(-6.06229281895215096226e-06, 6.06229281895215096226e-06)))
15 (43): exp = -24: floor_power2((((420609288095509/2000000000000000) * x7) + interval(-3.63634279003906287819e-09, 3.63634279003906287819e-09)))
16 (45): exp = -24: floor_power2(((((((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + ((-6033000513619893/1000000000000000) * x4)) + ((-5711040965435723/5000000000000000) * x5)) + ((-9598640770688359/1000000000000000) * x6)) + ((420609288095509/2000000000000000) * x7)) + interval(-7.98072837515161360718e-06, 7.98072837515161360718e-06)))
17 (49): exp = -24: floor_power2((((15464372313221567/2000000000000000) * x8) + interval(-1.60833064156250012650e-07, 1.60833064156250012650e-07)))
18 (51): exp = -24: floor_power2((((((((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + ((-6033000513619893/1000000000000000) * x4)) + ((-5711040965435723/5000000000000000) * x5)) + ((-9598640770688359/1000000000000000) * x6)) + ((420609288095509/2000000000000000) * x7)) + ((15464372313221567/2000000000000000) * x8)) + interval(-1.02873286512219273110e-05, 1.02873286512219273110e-05)))
19 (55): exp = -24: floor_power2((((2472783269284073/250000000000000) * x9) + interval(-2.31274352531250001844e-07, 2.31274352531250001844e-07)))
20 (57): exp = -24: floor_power2(((((((((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + ((-6033000513619893/1000000000000000) * x4)) + ((-5711040965435723/5000000000000000) * x5)) + ((-9598640770688359/1000000000000000) * x6)) + ((420609288095509/2000000000000000) * x7)) + ((15464372313221567/2000000000000000) * x8)) + ((2472783269284073/250000000000000) * x9)) + interval(-1.29027887947688036892e-05, 1.29027887947688036892e-05)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((5500150675535771/1000000000000000)) * x0))
3: rnd32((rnd32((-1320279542375871/250000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1))))
5: rnd32((rnd32((-8533238434522321/10000000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2))))
7: rnd32((rnd32((-1519680719864701/250000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3))))
9: rnd32((rnd32((-6033000513619893/1000000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3)))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * x4))))
11: rnd32((rnd32((-5711040965435723/5000000000000000)) * x5))
12: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3)))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * x4)))) + rnd32((rnd32((-5711040965435723/5000000000000000)) * x5))))
13: rnd32((rnd32((-9598640770688359/1000000000000000)) * x6))
14: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3)))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * x4)))) + rnd32((rnd32((-5711040965435723/5000000000000000)) * x5)))) + rnd32((rnd32((-9598640770688359/1000000000000000)) * x6))))
15: rnd32((rnd32((420609288095509/2000000000000000)) * x7))
16: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3)))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * x4)))) + rnd32((rnd32((-5711040965435723/5000000000000000)) * x5)))) + rnd32((rnd32((-9598640770688359/1000000000000000)) * x6)))) + rnd32((rnd32((420609288095509/2000000000000000)) * x7))))
17: rnd32((rnd32((15464372313221567/2000000000000000)) * x8))
18: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3)))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * x4)))) + rnd32((rnd32((-5711040965435723/5000000000000000)) * x5)))) + rnd32((rnd32((-9598640770688359/1000000000000000)) * x6)))) + rnd32((rnd32((420609288095509/2000000000000000)) * x7)))) + rnd32((rnd32((15464372313221567/2000000000000000)) * x8))))
19: rnd32((rnd32((2472783269284073/250000000000000)) * x9))
20: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3)))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * x4)))) + rnd32((rnd32((-5711040965435723/5000000000000000)) * x5)))) + rnd32((rnd32((-9598640770688359/1000000000000000)) * x6)))) + rnd32((rnd32((420609288095509/2000000000000000)) * x7)))) + rnd32((rnd32((15464372313221567/2000000000000000)) * x8)))) + rnd32((rnd32((2472783269284073/250000000000000)) * x9))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 1000000, max = 1000000): 1000000
min = -5.232079e+01 (lower_min = -5.141973e+01)
max = 5.232079e+01 (lower_max = 5.141973e+01)
subopt = 9.010602e-01 (1.7%)
bounds: [-5.232079e+01, 5.232079e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 1.972152e-30 (lower_min = 1.972152e-30)
max = 1.972152e-30 (lower_max = 1.972152e-30)
subopt = 0.000000e+00 (0.0%)
rmin(result = 1.972152e-30, lower = 1.972152e-30), rmax(result = 1.972152e-30, lower = 1.972152e-30)
-1: exp = -24: 1.972152e-30 (low = 1.972152e-30, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 1000000): 1000000
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 2.375155e+02 (lower_max = 2.295001e+02)
subopt = 8.015416e+00 (3.4%)
exact bound (exp = -24): 2.375155e+02 (low = 2.295001e+02, subopt = 3.4%)
total2: 1.175494e-37 (low = 1.175494e-37, subopt = 0.0%)
exact total: 1.415703e-05 (low = 1.367927e-05, subopt = 3.4%)

Elapsed time: 88.27211
Processing: exp25

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((-1058634021620663/312500000000000)) * rnd32(x0))) + rnd32((rnd32((58189846665001/25000000000000)) * rnd32(x1))))) + rnd32((rnd32((2047685781020883/250000000000000)) * rnd32(x2))))) + rnd32((rnd32((6322804980693327/1000000000000000)) * rnd32(x3))))) + rnd32((rnd32((149668693420641/40000000000000)) * rnd32(x4))))) + rnd32((rnd32((4962445278764287/2500000000000000)) * rnd32(x5))))) + rnd32((rnd32((-12672260182286541/2000000000000000)) * rnd32(x6))))) + rnd32((rnd32((-2220198069228987/5000000000000000)) * rnd32(x7))))) + rnd32((rnd32((-4890835097165249/500000000000000)) * rnd32(x8))))) + rnd32((rnd32((5638312771157189/1000000000000000)) * rnd32(x9)))))

Conservative bound: [-48.155642, 48.155642]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3)))) + rnd32((rnd32((149668693420641/40000000000000)) * x4)))) + rnd32((rnd32((4962445278764287/2500000000000000)) * x5)))) + rnd32((rnd32((-12672260182286541/2000000000000000)) * x6)))) + rnd32((rnd32((-2220198069228987/5000000000000000)) * x7)))) + rnd32((rnd32((-4890835097165249/500000000000000)) * x8)))) + rnd32((rnd32((5638312771157189/1000000000000000)) * x9))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1058634021620663/312500000000000); err = (-193202408796/152587890625)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (58189846665001/25000000000000); err = (6471094096/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (2047685781020883/250000000000000); err = (-165000481616/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (6322804980693327/1000000000000000); err = (27068108424/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (149668693420641/40000000000000); err = (-62381808/1220703125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (4962445278764287/2500000000000000); err = (81177286138/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-12672260182286541/2000000000000000); err = (26147145504/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2220198069228987/5000000000000000); err = (-4286967063/305175781250)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-4890835097165249/500000000000000); err = (192534035024/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (5638312771157189/1000000000000000); err = (-23276894232/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = (((((((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + ((149668693420641/40000000000000) * x4)) + ((4962445278764287/2500000000000000) * x5)) + ((-12672260182286541/2000000000000000) * x6)) + ((-2220198069228987/5000000000000000) * x7)) + ((-4890835097165249/500000000000000) * x8)) + ((5638312771157189/1000000000000000) * x9))
-1 (86): exp = -24: (5/2535301200456458802993406410752)
1 (1): exp = -24: ((((((((((x0 * (-193202408796/152587890625)) + (x1 * (6471094096/6103515625))) + (x2 * (-165000481616/30517578125))) + (x3 * (27068108424/30517578125))) + (x4 * (-62381808/1220703125))) + (x5 * (81177286138/152587890625))) + (x6 * (26147145504/30517578125))) + (x7 * (-4286967063/305175781250))) + (x8 * (192534035024/30517578125))) + (x9 * (-23276894232/30517578125)))
2 (3): exp = -24: floor_power2((((-1058634021620663/312500000000000) * x0) + interval(-7.54696909359375127588e-08, 7.54696909359375127588e-08)))
3 (7): exp = -24: floor_power2((((58189846665001/25000000000000) * x1) + interval(-6.31942782812500035570e-08, 6.31942782812500035570e-08)))
4 (9): exp = -24: floor_power2(((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + interval(-3.77082548318750056020e-07, 3.77082548318750056020e-07)))
5 (13): exp = -24: floor_power2((((2047685781020883/250000000000000) * x2) + interval(-3.22266565656250019022e-07, 3.22266565656250019022e-07)))
6 (15): exp = -24: floor_power2((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + interval(-1.41460485127968826326e-06, 1.41460485127968826326e-06)))
7 (19): exp = -24: floor_power2((((6322804980693327/1000000000000000) * x3) + interval(-5.28673992656250035971e-08, 5.28673992656250035971e-08)))
8 (21): exp = -24: floor_power2(((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + interval(-2.18272798785000123008e-06, 2.18272798785000123008e-06)))
9 (25): exp = -24: floor_power2((((149668693420641/40000000000000) * x4) + interval(-3.04598671875000024041e-09, 3.04598671875000024041e-09)))
10 (27): exp = -24: floor_power2((((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + ((149668693420641/40000000000000) * x4)) + interval(-3.25865758052578224953e-06, 3.25865758052578224953e-06)))
11 (31): exp = -24: floor_power2((((4962445278764287/2500000000000000) * x5) + interval(-3.17098773976562545605e-08, 3.17098773976562545605e-08)))
12 (33): exp = -24: floor_power2(((((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + ((149668693420641/40000000000000) * x4)) + ((4962445278764287/2500000000000000) * x5)) + interval(-4.30364641910507920850e-06, 4.30364641910507920850e-06)))
13 (37): exp = -24: floor_power2((((-12672260182286541/2000000000000000) * x6) + interval(-5.10686435625000029500e-08, 5.10686435625000029500e-08)))
14 (39): exp = -24: floor_power2((((((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + ((149668693420641/40000000000000) * x4)) + ((4962445278764287/2500000000000000) * x5)) + ((-12672260182286541/2000000000000000) * x6)) + interval(-5.54680795817539198938e-06, 5.54680795817539198938e-06)))
15 (43): exp = -24: floor_power2((((-2220198069228987/5000000000000000) * x7) + interval(-8.37298254492187592908e-10, 8.37298254492187592908e-10)))
16 (45): exp = -24: floor_power2(((((((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + ((149668693420641/40000000000000) * x4)) + ((4962445278764287/2500000000000000) * x5)) + ((-12672260182286541/2000000000000000) * x6)) + ((-2220198069228987/5000000000000000) * x7)) + interval(-7.46989505043623201004e-06, 7.46989505043623201004e-06)))
17 (49): exp = -24: floor_power2((((-4890835097165249/500000000000000) * x8) + interval(-3.76043037156250026635e-07, 3.76043037156250026635e-07)))
18 (51): exp = -24: floor_power2((((((((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + ((149668693420641/40000000000000) * x4)) + ((4962445278764287/2500000000000000) * x5)) + ((-12672260182286541/2000000000000000) * x6)) + ((-2220198069228987/5000000000000000) * x7)) + ((-4890835097165249/500000000000000) * x8)) + interval(-1.02301238786081096307e-05, 1.02301238786081096307e-05)))
19 (55): exp = -24: floor_power2((((5638312771157189/1000000000000000) * x9) + interval(-4.54626840468750018684e-08, 4.54626840468750018684e-08)))
20 (57): exp = -24: floor_power2(((((((((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + ((149668693420641/40000000000000) * x4)) + ((4962445278764287/2500000000000000) * x5)) + ((-12672260182286541/2000000000000000) * x6)) + ((-2220198069228987/5000000000000000) * x7)) + ((-4890835097165249/500000000000000) * x8)) + ((5638312771157189/1000000000000000) * x9)) + interval(-1.24213537745690473377e-05, 1.24213537745690473377e-05)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((-1058634021620663/312500000000000)) * x0))
3: rnd32((rnd32((58189846665001/25000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1))))
5: rnd32((rnd32((2047685781020883/250000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2))))
7: rnd32((rnd32((6322804980693327/1000000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3))))
9: rnd32((rnd32((149668693420641/40000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3)))) + rnd32((rnd32((149668693420641/40000000000000)) * x4))))
11: rnd32((rnd32((4962445278764287/2500000000000000)) * x5))
12: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3)))) + rnd32((rnd32((149668693420641/40000000000000)) * x4)))) + rnd32((rnd32((4962445278764287/2500000000000000)) * x5))))
13: rnd32((rnd32((-12672260182286541/2000000000000000)) * x6))
14: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3)))) + rnd32((rnd32((149668693420641/40000000000000)) * x4)))) + rnd32((rnd32((4962445278764287/2500000000000000)) * x5)))) + rnd32((rnd32((-12672260182286541/2000000000000000)) * x6))))
15: rnd32((rnd32((-2220198069228987/5000000000000000)) * x7))
16: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3)))) + rnd32((rnd32((149668693420641/40000000000000)) * x4)))) + rnd32((rnd32((4962445278764287/2500000000000000)) * x5)))) + rnd32((rnd32((-12672260182286541/2000000000000000)) * x6)))) + rnd32((rnd32((-2220198069228987/5000000000000000)) * x7))))
17: rnd32((rnd32((-4890835097165249/500000000000000)) * x8))
18: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3)))) + rnd32((rnd32((149668693420641/40000000000000)) * x4)))) + rnd32((rnd32((4962445278764287/2500000000000000)) * x5)))) + rnd32((rnd32((-12672260182286541/2000000000000000)) * x6)))) + rnd32((rnd32((-2220198069228987/5000000000000000)) * x7)))) + rnd32((rnd32((-4890835097165249/500000000000000)) * x8))))
19: rnd32((rnd32((5638312771157189/1000000000000000)) * x9))
20: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3)))) + rnd32((rnd32((149668693420641/40000000000000)) * x4)))) + rnd32((rnd32((4962445278764287/2500000000000000)) * x5)))) + rnd32((rnd32((-12672260182286541/2000000000000000)) * x6)))) + rnd32((rnd32((-2220198069228987/5000000000000000)) * x7)))) + rnd32((rnd32((-4890835097165249/500000000000000)) * x8)))) + rnd32((rnd32((5638312771157189/1000000000000000)) * x9))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 256568, max = 256568): 256568
min = -4.815562e+01 (lower_min = -4.768504e+01)
max = 4.815562e+01 (lower_max = 4.768504e+01)
subopt = 4.705823e-01 (1.0%)
bounds: [-4.815562e+01, 4.815562e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 1.972152e-30 (lower_min = 1.972152e-30)
max = 1.972152e-30 (lower_max = 1.972152e-30)
subopt = 0.000000e+00 (0.0%)
rmin(result = 1.972152e-30, lower = 1.972152e-30), rmax(result = 1.972152e-30, lower = 1.972152e-30)
-1: exp = -24: 1.972152e-30 (low = 1.972152e-30, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 1000000): 1000000
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 2.338378e+02 (lower_max = 1.969933e+02)
subopt = 3.684449e+01 (15.8%)
exact bound (exp = -24): 2.338378e+02 (low = 1.969933e+02, subopt = 15.8%)
total2: 1.175494e-37 (low = 1.175494e-37, subopt = 0.0%)
exact total: 1.393782e-05 (low = 1.174172e-05, subopt = 15.8%)

Elapsed time: 83.12792
Processing: exp26

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((-7915822334211553/5000000000000000)) * rnd32(x0))) + rnd32((rnd32((9777691808606681/5000000000000000)) * rnd32(x1))))) + rnd32((rnd32((-310584429151839/50000000000000)) * rnd32(x2))))) + rnd32((rnd32((-2817995835279711/500000000000000)) * rnd32(x3))))) + rnd32((rnd32((2079174277985521/500000000000000)) * rnd32(x4))))) + rnd32((rnd32((1683703829051391/200000000000000)) * rnd32(x5))))) + rnd32((rnd32((10598937268590113/2000000000000000)) * rnd32(x6))))) + rnd32((rnd32((-1460929602369307/200000000000000)) * rnd32(x7))))) + rnd32((rnd32((-7815430648456569/10000000000000000)) * rnd32(x8))))) + rnd32((rnd32((14340863792601553/2000000000000000)) * rnd32(x9)))))

Conservative bound: [-48.519365, 48.519365]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3)))) + rnd32((rnd32((2079174277985521/500000000000000)) * x4)))) + rnd32((rnd32((1683703829051391/200000000000000)) * x5)))) + rnd32((rnd32((10598937268590113/2000000000000000)) * x6)))) + rnd32((rnd32((-1460929602369307/200000000000000)) * x7)))) + rnd32((rnd32((-7815430648456569/10000000000000000)) * x8)))) + rnd32((rnd32((14340863792601553/2000000000000000)) * x9))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (-7915822334211553/5000000000000000); err = (-34139752636/152587890625)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (9777691808606681/5000000000000000); err = (-77684785578/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-310584429151839/50000000000000); err = (-6606091272/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2817995835279711/500000000000000); err = (-49779549064/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (2079174277985521/500000000000000); err = (-2233451496/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1683703829051391/200000000000000); err = (12818062192/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (10598937268590113/2000000000000000); err = (59899693928/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1460929602369307/200000000000000); err = (-9147460184/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-7815430648456569/10000000000000000); err = (28653321461/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (14340863792601553/2000000000000000); err = (-99562752432/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = (((((((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + ((2079174277985521/500000000000000) * x4)) + ((1683703829051391/200000000000000) * x5)) + ((10598937268590113/2000000000000000) * x6)) + ((-1460929602369307/200000000000000) * x7)) + ((-7815430648456569/10000000000000000) * x8)) + ((14340863792601553/2000000000000000) * x9))
-1 (86): exp = -24: (5/2535301200456458802993406410752)
1 (1): exp = -24: ((((((((((x0 * (-34139752636/152587890625)) + (x1 * (-77684785578/152587890625))) + (x2 * (-6606091272/6103515625))) + (x3 * (-49779549064/30517578125))) + (x4 * (-2233451496/30517578125))) + (x5 * (12818062192/6103515625))) + (x6 * (59899693928/30517578125))) + (x7 * (-9147460184/6103515625))) + (x8 * (28653321461/152587890625))) + (x9 * (-99562752432/30517578125)))
2 (3): exp = -24: floor_power2((((-7915822334211553/5000000000000000) * x0) + interval(-1.33358408734375000803e-08, 1.33358408734375000803e-08)))
3 (7): exp = -24: floor_power2((((9777691808606681/5000000000000000) * x1) + interval(-3.03456193664062501199e-08, 3.03456193664062501199e-08)))
4 (9): exp = -24: floor_power2(((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + interval(-1.62890749790625041559e-07, 1.62890749790625041559e-07)))
5 (13): exp = -24: floor_power2((((-310584429151839/50000000000000) * x2) + interval(-6.45126100781250033916e-08, 6.45126100781250033916e-08)))
6 (15): exp = -24: floor_power2((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + interval(-5.85031228521094033179e-07, 5.85031228521094033179e-07)))
7 (19): exp = -24: floor_power2((((-2817995835279711/500000000000000) * x3) + interval(-9.72256817656250018895e-08, 9.72256817656250018895e-08)))
8 (21): exp = -24: floor_power2(((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + interval(-1.39751264759140665418e-06, 1.39751264759140665418e-06)))
9 (25): exp = -24: floor_power2((((2079174277985521/500000000000000) * x4) + interval(-4.36220995312500021692e-09, 4.36220995312500021692e-09)))
10 (27): exp = -24: floor_power2((((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + ((2079174277985521/500000000000000) * x4)) + interval(-2.11713059484921981780e-06, 2.11713059484921981780e-06)))
11 (31): exp = -24: floor_power2((((1683703829051391/200000000000000) * x5) + interval(-1.25176388593750018657e-07, 1.25176388593750018657e-07)))
12 (33): exp = -24: floor_power2(((((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + ((2079174277985521/500000000000000) * x4)) + ((1683703829051391/200000000000000) * x5)) + interval(-3.67281845805234499527e-06, 3.67281845805234499527e-06)))
13 (37): exp = -24: floor_power2((((10598937268590113/2000000000000000) * x6) + interval(-1.16991589703125011819e-07, 1.16991589703125011819e-07)))
14 (39): exp = -24: floor_power2((((((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + ((2079174277985521/500000000000000) * x4)) + ((1683703829051391/200000000000000) * x5)) + ((10598937268590113/2000000000000000) * x6)) + interval(-4.98190294326328312913e-06, 4.98190294326328312913e-06)))
15 (43): exp = -24: floor_power2((((-1460929602369307/200000000000000) * x7) + interval(-8.93306658593750081591e-08, 8.93306658593750081591e-08)))
16 (45): exp = -24: floor_power2(((((((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + ((2079174277985521/500000000000000) * x4)) + ((1683703829051391/200000000000000) * x5)) + ((10598937268590113/2000000000000000) * x6)) + ((-1460929602369307/200000000000000) * x7)) + interval(-7.21700082103672143139e-06, 7.21700082103672143139e-06)))
17 (49): exp = -24: floor_power2((((-7815430648456569/10000000000000000) * x8) + interval(-1.11927036957031254908e-08, 1.11927036957031254908e-08)))
18 (51): exp = -24: floor_power2((((((((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + ((2079174277985521/500000000000000) * x4)) + ((1683703829051391/200000000000000) * x5)) + ((10598937268590113/2000000000000000) * x6)) + ((-1460929602369307/200000000000000) * x7)) + ((-7815430648456569/10000000000000000) * x8)) + interval(-9.16534447993262079086e-06, 9.16534447993262079086e-06)))
19 (55): exp = -24: floor_power2((((14340863792601553/2000000000000000) * x9) + interval(-1.94458500843750000273e-07, 1.94458500843750000273e-07)))
20 (57): exp = -24: floor_power2(((((((((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + ((2079174277985521/500000000000000) * x4)) + ((1683703829051391/200000000000000) * x5)) + ((10598937268590113/2000000000000000) * x6)) + ((-1460929602369307/200000000000000) * x7)) + ((-7815430648456569/10000000000000000) * x8)) + ((14340863792601553/2000000000000000) * x9)) + interval(-1.15055701926904342176e-05, 1.15055701926904342176e-05)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((-7915822334211553/5000000000000000)) * x0))
3: rnd32((rnd32((9777691808606681/5000000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1))))
5: rnd32((rnd32((-310584429151839/50000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2))))
7: rnd32((rnd32((-2817995835279711/500000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3))))
9: rnd32((rnd32((2079174277985521/500000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3)))) + rnd32((rnd32((2079174277985521/500000000000000)) * x4))))
11: rnd32((rnd32((1683703829051391/200000000000000)) * x5))
12: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3)))) + rnd32((rnd32((2079174277985521/500000000000000)) * x4)))) + rnd32((rnd32((1683703829051391/200000000000000)) * x5))))
13: rnd32((rnd32((10598937268590113/2000000000000000)) * x6))
14: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3)))) + rnd32((rnd32((2079174277985521/500000000000000)) * x4)))) + rnd32((rnd32((1683703829051391/200000000000000)) * x5)))) + rnd32((rnd32((10598937268590113/2000000000000000)) * x6))))
15: rnd32((rnd32((-1460929602369307/200000000000000)) * x7))
16: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3)))) + rnd32((rnd32((2079174277985521/500000000000000)) * x4)))) + rnd32((rnd32((1683703829051391/200000000000000)) * x5)))) + rnd32((rnd32((10598937268590113/2000000000000000)) * x6)))) + rnd32((rnd32((-1460929602369307/200000000000000)) * x7))))
17: rnd32((rnd32((-7815430648456569/10000000000000000)) * x8))
18: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3)))) + rnd32((rnd32((2079174277985521/500000000000000)) * x4)))) + rnd32((rnd32((1683703829051391/200000000000000)) * x5)))) + rnd32((rnd32((10598937268590113/2000000000000000)) * x6)))) + rnd32((rnd32((-1460929602369307/200000000000000)) * x7)))) + rnd32((rnd32((-7815430648456569/10000000000000000)) * x8))))
19: rnd32((rnd32((14340863792601553/2000000000000000)) * x9))
20: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3)))) + rnd32((rnd32((2079174277985521/500000000000000)) * x4)))) + rnd32((rnd32((1683703829051391/200000000000000)) * x5)))) + rnd32((rnd32((10598937268590113/2000000000000000)) * x6)))) + rnd32((rnd32((-1460929602369307/200000000000000)) * x7)))) + rnd32((rnd32((-7815430648456569/10000000000000000)) * x8)))) + rnd32((rnd32((14340863792601553/2000000000000000)) * x9))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 417045, max = 417045): 417045
min = -4.851934e+01 (lower_min = -4.806688e+01)
max = 4.851934e+01 (lower_max = 4.806688e+01)
subopt = 4.524663e-01 (0.9%)
bounds: [-4.851934e+01, 4.851934e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 1.972152e-30 (lower_min = 1.972152e-30)
max = 1.972152e-30 (lower_max = 1.972152e-30)
subopt = 0.000000e+00 (0.0%)
rmin(result = 1.972152e-30, lower = 1.972152e-30), rmax(result = 1.972152e-30, lower = 1.972152e-30)
-1: exp = -24: 1.972152e-30 (low = 1.972152e-30, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 1000000): 1000000
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 2.241305e+02 (lower_max = 2.020048e+02)
subopt = 2.212570e+01 (9.9%)
exact bound (exp = -24): 2.241305e+02 (low = 2.020048e+02, subopt = 9.9%)
total2: 1.175494e-37 (low = 1.175494e-37, subopt = 0.0%)
exact total: 1.335922e-05 (low = 1.204043e-05, subopt = 9.9%)

Elapsed time: 79.06736
Processing: exp27

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((607757237522599/62500000000000)) * rnd32(x0))) + rnd32((rnd32((6458190334860863/1000000000000000)) * rnd32(x1))))) + rnd32((rnd32((-1764944452228997/250000000000000)) * rnd32(x2))))) + rnd32((rnd32((1345149462161297/250000000000000)) * rnd32(x3))))) + rnd32((rnd32((4436064321544077/1000000000000000)) * rnd32(x4))))) + rnd32((rnd32((547925376226867/62500000000000)) * rnd32(x5))))) + rnd32((rnd32((-14122644247463203/5000000000000000)) * rnd32(x6))))) + rnd32((rnd32((-26288588022793/3906250000000)) * rnd32(x7))))) + rnd32((rnd32((133246771086787/20000000000000)) * rnd32(x8))))) + rnd32((rnd32((3082296763360027/500000000000000)) * rnd32(x9)))))

Conservative bound: [-64.206925, 64.206925]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3)))) + rnd32((rnd32((4436064321544077/1000000000000000)) * x4)))) + rnd32((rnd32((547925376226867/62500000000000)) * x5)))) + rnd32((rnd32((-14122644247463203/5000000000000000)) * x6)))) + rnd32((rnd32((-26288588022793/3906250000000)) * x7)))) + rnd32((rnd32((133246771086787/20000000000000)) * x8)))) + rnd32((rnd32((3082296763360027/500000000000000)) * x9))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (607757237522599/62500000000000); err = (219472631008/30517578125)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (6458190334860863/1000000000000000); err = (-54410613144/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1764944452228997/250000000000000); err = (-36993110856/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1345149462161297/250000000000000); err = (-112431163744/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (4436064321544077/1000000000000000); err = (40052442424/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (547925376226867/62500000000000); err = (189862994464/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-14122644247463203/5000000000000000); err = (212681652564/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-26288588022793/3906250000000); err = (-55417274096/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (133246771086787/20000000000000); err = (-3672755112/1220703125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (3082296763360027/500000000000000); err = (-86975582352/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = (((((((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + ((4436064321544077/1000000000000000) * x4)) + ((547925376226867/62500000000000) * x5)) + ((-14122644247463203/5000000000000000) * x6)) + ((-26288588022793/3906250000000) * x7)) + ((133246771086787/20000000000000) * x8)) + ((3082296763360027/500000000000000) * x9))
-1 (86): exp = -24: (5/2535301200456458802993406410752)
1 (1): exp = -24: ((((((((((x0 * (219472631008/30517578125)) + (x1 * (-54410613144/30517578125))) + (x2 * (-36993110856/30517578125))) + (x3 * (-112431163744/30517578125))) + (x4 * (40052442424/30517578125))) + (x5 * (189862994464/30517578125))) + (x6 * (212681652564/152587890625))) + (x7 * (-55417274096/30517578125))) + (x8 * (-3672755112/1220703125))) + (x9 * (-86975582352/30517578125)))
2 (3): exp = -24: floor_power2((((607757237522599/62500000000000) * x0) + interval(-4.28657482437500034349e-07, 4.28657482437500034349e-07)))
3 (7): exp = -24: floor_power2((((6458190334860863/1000000000000000) * x1) + interval(-1.06270728796875009635e-07, 1.06270728796875009635e-07)))
4 (9): exp = -24: floor_power2(((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + interval(-1.25018394853906268957e-06, 1.25018394853906268957e-06)))
5 (13): exp = -24: floor_power2((((-1764944452228997/250000000000000) * x2) + interval(-7.22521696406250023212e-08, 7.22521696406250023212e-08)))
6 (15): exp = -24: floor_power2((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + interval(-2.51452901368750056247e-06, 2.51452901368750056247e-06)))
7 (19): exp = -24: floor_power2((((1345149462161297/250000000000000) * x3) + interval(-2.19592116687500004951e-07, 2.19592116687500004951e-07)))
8 (21): exp = -24: floor_power2(((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + interval(-3.92621402588281346446e-06, 3.92621402588281346446e-06)))
9 (25): exp = -24: floor_power2((((4436064321544077/1000000000000000) * x4) + interval(-7.82274266093750102492e-08, 7.82274266093750102492e-08)))
10 (27): exp = -24: floor_power2((((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + ((4436064321544077/1000000000000000) * x4)) + interval(-5.19653434800000149087e-06, 5.19653434800000149087e-06)))
11 (31): exp = -24: floor_power2((((547925376226867/62500000000000) * x5) + interval(-3.70826161062500009909e-07, 3.70826161062500009909e-07)))
12 (33): exp = -24: floor_power2(((((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + ((4436064321544077/1000000000000000) * x4)) + ((547925376226867/62500000000000) * x5)) + interval(-7.95154630007812761251e-06, 7.95154630007812761251e-06)))
13 (37): exp = -24: floor_power2((((-14122644247463203/5000000000000000) * x6) + interval(-8.30787705328125081857e-08, 8.30787705328125081857e-08)))
14 (39): exp = -24: floor_power2((((((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + ((4436064321544077/1000000000000000) * x4)) + ((547925376226867/62500000000000) * x5)) + ((-14122644247463203/5000000000000000) * x6)) + interval(-1.00611829929742221913e-05, 1.00611829929742221913e-05)))
15 (43): exp = -24: floor_power2((((-26288588022793/3906250000000) * x7) + interval(-1.08236863468750002711e-07, 1.08236863468750002711e-07)))
16 (45): exp = -24: floor_power2(((((((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + ((4436064321544077/1000000000000000) * x4)) + ((547925376226867/62500000000000) * x5)) + ((-14122644247463203/5000000000000000) * x6)) + ((-26288588022793/3906250000000) * x7)) + interval(-1.23151870683570340719e-05, 1.23151870683570340719e-05)))
17 (49): exp = -24: floor_power2((((133246771086787/20000000000000) * x8) + interval(-1.79333745703125025144e-07, 1.79333745703125025144e-07)))
18 (51): exp = -24: floor_power2((((((((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + ((4436064321544077/1000000000000000) * x4)) + ((547925376226867/62500000000000) * x5)) + ((-14122644247463203/5000000000000000) * x6)) + ((-26288588022793/3906250000000) * x7)) + ((133246771086787/20000000000000) * x8)) + interval(-1.46402880259742228941e-05, 1.46402880259742228941e-05)))
19 (55): exp = -24: floor_power2((((3082296763360027/500000000000000) * x9) + interval(-1.69874184281250019619e-07, 1.69874184281250019619e-07)))
20 (57): exp = -24: floor_power2(((((((((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + ((4436064321544077/1000000000000000) * x4)) + ((547925376226867/62500000000000) * x5)) + ((-14122644247463203/5000000000000000) * x6)) + ((-26288588022793/3906250000000) * x7)) + ((133246771086787/20000000000000) * x8)) + ((3082296763360027/500000000000000) * x9)) + interval(-1.69559294221695361284e-05, 1.69559294221695361284e-05)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((607757237522599/62500000000000)) * x0))
3: rnd32((rnd32((6458190334860863/1000000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1))))
5: rnd32((rnd32((-1764944452228997/250000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2))))
7: rnd32((rnd32((1345149462161297/250000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3))))
9: rnd32((rnd32((4436064321544077/1000000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3)))) + rnd32((rnd32((4436064321544077/1000000000000000)) * x4))))
11: rnd32((rnd32((547925376226867/62500000000000)) * x5))
12: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3)))) + rnd32((rnd32((4436064321544077/1000000000000000)) * x4)))) + rnd32((rnd32((547925376226867/62500000000000)) * x5))))
13: rnd32((rnd32((-14122644247463203/5000000000000000)) * x6))
14: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3)))) + rnd32((rnd32((4436064321544077/1000000000000000)) * x4)))) + rnd32((rnd32((547925376226867/62500000000000)) * x5)))) + rnd32((rnd32((-14122644247463203/5000000000000000)) * x6))))
15: rnd32((rnd32((-26288588022793/3906250000000)) * x7))
16: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3)))) + rnd32((rnd32((4436064321544077/1000000000000000)) * x4)))) + rnd32((rnd32((547925376226867/62500000000000)) * x5)))) + rnd32((rnd32((-14122644247463203/5000000000000000)) * x6)))) + rnd32((rnd32((-26288588022793/3906250000000)) * x7))))
17: rnd32((rnd32((133246771086787/20000000000000)) * x8))
18: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3)))) + rnd32((rnd32((4436064321544077/1000000000000000)) * x4)))) + rnd32((rnd32((547925376226867/62500000000000)) * x5)))) + rnd32((rnd32((-14122644247463203/5000000000000000)) * x6)))) + rnd32((rnd32((-26288588022793/3906250000000)) * x7)))) + rnd32((rnd32((133246771086787/20000000000000)) * x8))))
19: rnd32((rnd32((3082296763360027/500000000000000)) * x9))
20: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3)))) + rnd32((rnd32((4436064321544077/1000000000000000)) * x4)))) + rnd32((rnd32((547925376226867/62500000000000)) * x5)))) + rnd32((rnd32((-14122644247463203/5000000000000000)) * x6)))) + rnd32((rnd32((-26288588022793/3906250000000)) * x7)))) + rnd32((rnd32((133246771086787/20000000000000)) * x8)))) + rnd32((rnd32((3082296763360027/500000000000000)) * x9))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 9114, max = 9114): 9114
min = -6.420689e+01 (lower_min = -6.368770e+01)
max = 6.420689e+01 (lower_max = 6.368770e+01)
subopt = 5.191933e-01 (0.8%)
bounds: [-6.420689e+01, 6.420689e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 1.972152e-30 (lower_min = 1.972152e-30)
max = 1.972152e-30 (lower_max = 1.972152e-30)
subopt = 0.000000e+00 (0.0%)
rmin(result = 1.972152e-30, lower = 1.972152e-30), rmax(result = 1.972152e-30, lower = 1.972152e-30)
-1: exp = -24: 1.972152e-30 (low = 1.972152e-30, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 1000000): 1000000
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 3.253074e+02 (lower_max = 2.884931e+02)
subopt = 3.681426e+01 (11.3%)
exact bound (exp = -24): 3.253074e+02 (low = 2.884931e+02, subopt = 11.3%)
total2: 1.175494e-37 (low = 1.175494e-37, subopt = 0.0%)
exact total: 1.938983e-05 (low = 1.719553e-05, subopt = 11.3%)

Elapsed time: 80.94069
Processing: exp28

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((-2288900303754593/2500000000000000)) * rnd32(x0))) + rnd32((rnd32((-22554566987000557/10000000000000000)) * rnd32(x1))))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * rnd32(x2))))) + rnd32((rnd32((-2168601717666299/250000000000000)) * rnd32(x3))))) + rnd32((rnd32((-37171992112307/4000000000000)) * rnd32(x4))))) + rnd32((rnd32((-35083895233614797/10000000000000000)) * rnd32(x5))))) + rnd32((rnd32((-7237269188346147/5000000000000000)) * rnd32(x6))))) + rnd32((rnd32((-2203440230725679/1000000000000000)) * rnd32(x7))))) + rnd32((rnd32((-44754918643093/31250000000000)) * rnd32(x8))))) + rnd32((rnd32((1029700451972813/200000000000000)) * rnd32(x9)))))

Conservative bound: [-36.977309, 36.977309]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3)))) + rnd32((rnd32((-37171992112307/4000000000000)) * x4)))) + rnd32((rnd32((-35083895233614797/10000000000000000)) * x5)))) + rnd32((rnd32((-7237269188346147/5000000000000000)) * x6)))) + rnd32((rnd32((-2203440230725679/1000000000000000)) * x7)))) + rnd32((rnd32((-44754918643093/31250000000000)) * x8)))) + rnd32((rnd32((1029700451972813/200000000000000)) * x9))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2288900303754593/2500000000000000); err = (12295140518/152587890625)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-22554566987000557/10000000000000000); err = (-32461205092/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-5247314944310073/2500000000000000); err = (229448360248/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2168601717666299/250000000000000); err = (68938169648/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-37171992112307/4000000000000); err = (1170747632/244140625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-35083895233614797/10000000000000000); err = (-129024138032/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-7237269188346147/5000000000000000); err = (48125366486/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2203440230725679/1000000000000000); err = (-21178422648/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-44754918643093/31250000000000); err = (353908038/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1029700451972813/200000000000000); err = (-9214919744/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = (((((((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + ((-37171992112307/4000000000000) * x4)) + ((-35083895233614797/10000000000000000) * x5)) + ((-7237269188346147/5000000000000000) * x6)) + ((-2203440230725679/1000000000000000) * x7)) + ((-44754918643093/31250000000000) * x8)) + ((1029700451972813/200000000000000) * x9))
-1 (86): exp = -24: (5/2535301200456458802993406410752)
1 (1): exp = -24: ((((((((((x0 * (12295140518/152587890625)) + (x1 * (-32461205092/152587890625))) + (x2 * (229448360248/152587890625))) + (x3 * (68938169648/30517578125))) + (x4 * (1170747632/244140625))) + (x5 * (-129024138032/152587890625))) + (x6 * (48125366486/152587890625))) + (x7 * (-21178422648/30517578125))) + (x8 * (353908038/30517578125))) + (x9 * (-9214919744/6103515625)))
2 (3): exp = -24: floor_power2((((-2288900303754593/2500000000000000) * x0) + interval(-4.80278926484375018370e-09, 4.80278926484375018370e-09)))
3 (7): exp = -24: floor_power2((((-22554566987000557/10000000000000000) * x1) + interval(-1.26801582390625001668e-08, 1.26801582390625001668e-08)))
4 (9): exp = -24: floor_power2(((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + interval(-1.66494559442382886470e-07, 1.66494559442382886470e-07)))
5 (13): exp = -24: floor_power2((((-5247314944310073/2500000000000000) * x2) + interval(-8.96282657218750102723e-08, 8.96282657218750102723e-08)))
6 (15): exp = -24: floor_power2((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + interval(-4.94541404265820582030e-07, 4.94541404265820582030e-07)))
7 (19): exp = -24: floor_power2((((-2168601717666299/250000000000000) * x3) + interval(-1.34644862593750006778e-07, 1.34644862593750006778e-07)))
8 (21): exp = -24: floor_power2(((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + interval(-1.34444200416425843292e-06, 1.34444200416425843292e-06)))
9 (25): exp = -24: floor_power2((((-37171992112307/4000000000000) * x4) + interval(-2.85827058593750013100e-07, 2.85827058593750013100e-07)))
10 (27): exp = -24: floor_power2((((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + ((-37171992112307/4000000000000) * x4)) + interval(-2.58394337916425902835e-06, 2.58394337916425902835e-06)))
11 (31): exp = -24: floor_power2((((-35083895233614797/10000000000000000) * x5) + interval(-5.04000539187500043415e-08, 5.04000539187500043415e-08)))
12 (33): exp = -24: floor_power2(((((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + ((-37171992112307/4000000000000) * x4)) + ((-35083895233614797/10000000000000000) * x5)) + interval(-3.70722703904004029593e-06, 3.70722703904004029593e-06)))
13 (37): exp = -24: floor_power2((((-7237269188346147/5000000000000000) * x6) + interval(-1.87989712835937502586e-08, 1.87989712835937502586e-08)))
14 (39): exp = -24: floor_power2((((((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + ((-37171992112307/4000000000000) * x4)) + ((-35083895233614797/10000000000000000) * x5)) + ((-7237269188346147/5000000000000000) * x6)) + interval(-4.73930497150527550167e-06, 4.73930497150527550167e-06)))
15 (43): exp = -24: floor_power2((((-2203440230725679/1000000000000000) * x7) + interval(-4.13641067343750040427e-08, 4.13641067343750040427e-08)))
16 (45): exp = -24: floor_power2(((((((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + ((-37171992112307/4000000000000) * x4)) + ((-35083895233614797/10000000000000000) * x5)) + ((-7237269188346147/5000000000000000) * x6)) + ((-2203440230725679/1000000000000000) * x7)) + interval(-5.85355268419668279466e-06, 5.85355268419668279466e-06)))
17 (49): exp = -24: floor_power2((((-44754918643093/31250000000000) * x8) + interval(-6.91226636718750001102e-10, 6.91226636718750001102e-10)))
18 (51): exp = -24: floor_power2((((((((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + ((-37171992112307/4000000000000) * x4)) + ((-35083895233614797/10000000000000000) * x5)) + ((-7237269188346147/5000000000000000) * x6)) + ((-2203440230725679/1000000000000000) * x7)) + ((-44754918643093/31250000000000) * x8)) + interval(-6.86752287201504146293e-06, 6.86752287201504146293e-06)))
19 (55): exp = -24: floor_power2((((1029700451972813/200000000000000) * x9) + interval(-8.99894506250000060840e-08, 8.99894506250000060840e-08)))
20 (57): exp = -24: floor_power2(((((((((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + ((-37171992112307/4000000000000) * x4)) + ((-35083895233614797/10000000000000000) * x5)) + ((-7237269188346147/5000000000000000) * x6)) + ((-2203440230725679/1000000000000000) * x7)) + ((-44754918643093/31250000000000) * x8)) + ((1029700451972813/200000000000000) * x9)) + interval(-8.14960521814785632483e-06, 8.14960521814785632483e-06)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((-2288900303754593/2500000000000000)) * x0))
3: rnd32((rnd32((-22554566987000557/10000000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1))))
5: rnd32((rnd32((-5247314944310073/2500000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2))))
7: rnd32((rnd32((-2168601717666299/250000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3))))
9: rnd32((rnd32((-37171992112307/4000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3)))) + rnd32((rnd32((-37171992112307/4000000000000)) * x4))))
11: rnd32((rnd32((-35083895233614797/10000000000000000)) * x5))
12: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3)))) + rnd32((rnd32((-37171992112307/4000000000000)) * x4)))) + rnd32((rnd32((-35083895233614797/10000000000000000)) * x5))))
13: rnd32((rnd32((-7237269188346147/5000000000000000)) * x6))
14: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3)))) + rnd32((rnd32((-37171992112307/4000000000000)) * x4)))) + rnd32((rnd32((-35083895233614797/10000000000000000)) * x5)))) + rnd32((rnd32((-7237269188346147/5000000000000000)) * x6))))
15: rnd32((rnd32((-2203440230725679/1000000000000000)) * x7))
16: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3)))) + rnd32((rnd32((-37171992112307/4000000000000)) * x4)))) + rnd32((rnd32((-35083895233614797/10000000000000000)) * x5)))) + rnd32((rnd32((-7237269188346147/5000000000000000)) * x6)))) + rnd32((rnd32((-2203440230725679/1000000000000000)) * x7))))
17: rnd32((rnd32((-44754918643093/31250000000000)) * x8))
18: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3)))) + rnd32((rnd32((-37171992112307/4000000000000)) * x4)))) + rnd32((rnd32((-35083895233614797/10000000000000000)) * x5)))) + rnd32((rnd32((-7237269188346147/5000000000000000)) * x6)))) + rnd32((rnd32((-2203440230725679/1000000000000000)) * x7)))) + rnd32((rnd32((-44754918643093/31250000000000)) * x8))))
19: rnd32((rnd32((1029700451972813/200000000000000)) * x9))
20: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3)))) + rnd32((rnd32((-37171992112307/4000000000000)) * x4)))) + rnd32((rnd32((-35083895233614797/10000000000000000)) * x5)))) + rnd32((rnd32((-7237269188346147/5000000000000000)) * x6)))) + rnd32((rnd32((-2203440230725679/1000000000000000)) * x7)))) + rnd32((rnd32((-44754918643093/31250000000000)) * x8)))) + rnd32((rnd32((1029700451972813/200000000000000)) * x9))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 1126, max = 1126): 1126
min = -3.697729e+01 (lower_min = -3.665551e+01)
max = 3.697729e+01 (lower_max = 3.665551e+01)
subopt = 3.217814e-01 (0.9%)
bounds: [-3.697729e+01, 3.697729e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 1.972152e-30 (lower_min = 1.972152e-30)
max = 1.972152e-30 (lower_max = 1.972152e-30)
subopt = 0.000000e+00 (0.0%)
rmin(result = 1.972152e-30, lower = 1.972152e-30), rmax(result = 1.972152e-30, lower = 1.972152e-30)
-1: exp = -24: 1.972152e-30 (low = 1.972152e-30, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 69535): 69535
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 1.668756e+02 (lower_max = 1.665545e+02)
subopt = 3.211030e-01 (0.2%)
exact bound (exp = -24): 1.668756e+02 (low = 1.665545e+02, subopt = 0.2%)
total2: 1.175494e-37 (low = 1.175494e-37, subopt = 0.0%)
exact total: 9.946563e-06 (low = 9.927424e-06, subopt = 0.2%)

Elapsed time: 6.74269
Processing: exp29

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((42965808751803/250000000000000)) * rnd32(x0))) + rnd32((rnd32((9469458133312479/1000000000000000)) * rnd32(x1))))) + rnd32((rnd32((-95585628551697/31250000000000)) * rnd32(x2))))) + rnd32((rnd32((1919295506583817/200000000000000)) * rnd32(x3))))) + rnd32((rnd32((-818548184999683/500000000000000)) * rnd32(x4))))) + rnd32((rnd32((-7105009932019751/2000000000000000)) * rnd32(x5))))) + rnd32((rnd32((350084226225497/50000000000000)) * rnd32(x6))))) + rnd32((rnd32((-802844893227931/200000000000000)) * rnd32(x7))))) + rnd32((rnd32((-1985794846832853/200000000000000)) * rnd32(x8))))) + rnd32((rnd32((1630231642601517/250000000000000)) * rnd32(x9)))))

Conservative bound: [-54.951976, 54.951976]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3)))) + rnd32((rnd32((-818548184999683/500000000000000)) * x4)))) + rnd32((rnd32((-7105009932019751/2000000000000000)) * x5)))) + rnd32((rnd32((350084226225497/50000000000000)) * x6)))) + rnd32((rnd32((-802844893227931/200000000000000)) * x7)))) + rnd32((rnd32((-1985794846832853/200000000000000)) * x8)))) + rnd32((rnd32((1630231642601517/250000000000000)) * x9))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (42965808751803/250000000000000); err = (7090744463/61035156250)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (9469458133312479/1000000000000000); err = (-228712760752/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-95585628551697/31250000000000); err = (12980871352/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1919295506583817/200000000000000); err = (2495914304/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-818548184999683/500000000000000); err = (17935324608/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-7105009932019751/2000000000000000); err = (25762318744/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (350084226225497/50000000000000); err = (-14455807144/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-802844893227931/200000000000000); err = (6464174328/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1985794846832853/200000000000000); err = (-8453420736/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1630231642601517/250000000000000); err = (48579156816/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = (((((((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + ((-818548184999683/500000000000000) * x4)) + ((-7105009932019751/2000000000000000) * x5)) + ((350084226225497/50000000000000) * x6)) + ((-802844893227931/200000000000000) * x7)) + ((-1985794846832853/200000000000000) * x8)) + ((1630231642601517/250000000000000) * x9))
-1 (86): exp = -24: (5/2535301200456458802993406410752)
1 (1): exp = -24: ((((((((((x0 * (7090744463/61035156250)) + (x1 * (-228712760752/30517578125))) + (x2 * (12980871352/30517578125))) + (x3 * (2495914304/6103515625))) + (x4 * (17935324608/30517578125))) + (x5 * (25762318744/30517578125))) + (x6 * (-14455807144/6103515625))) + (x7 * (6464174328/6103515625))) + (x8 * (-8453420736/6103515625))) + (x9 * (48579156816/30517578125)))
2 (3): exp = -24: floor_power2((((42965808751803/250000000000000) * x0) + interval(-6.92455513964843808941e-09, 6.92455513964843808941e-09)))
3 (7): exp = -24: floor_power2((((9469458133312479/1000000000000000) * x1) + interval(-4.46704610843750049563e-07, 4.46704610843750049563e-07)))
4 (9): exp = -24: floor_power2(((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + interval(-9.37916904783447629279e-07, 9.37916904783447629279e-07)))
5 (13): exp = -24: floor_power2((((-95585628551697/31250000000000) * x2) + interval(-2.53532643593750031826e-08, 2.53532643593750031826e-08)))
6 (15): exp = -24: floor_power2((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + interval(-1.55931661689672897511e-06, 1.55931661689672897511e-06)))
7 (19): exp = -24: floor_power2((((1919295506583817/200000000000000) * x3) + interval(-2.43741631250000031924e-08, 2.43741631250000031924e-08)))
8 (21): exp = -24: floor_power2(((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + interval(-2.53736509642797955732e-06, 2.53736509642797955732e-06)))
9 (25): exp = -24: floor_power2((((-818548184999683/500000000000000) * x4) + interval(-3.50299308750000040294e-08, 3.50299308750000040294e-08)))
10 (27): exp = -24: floor_power2((((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + ((-818548184999683/500000000000000) * x4)) + interval(-3.58567398848462006724e-06, 3.58567398848462006724e-06)))
11 (31): exp = -24: floor_power2((((-7105009932019751/2000000000000000) * x5) + interval(-5.03170287968750000838e-08, 5.03170287968750000838e-08)))
12 (33): exp = -24: floor_power2(((((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + ((-818548184999683/500000000000000) * x4)) + ((-7105009932019751/2000000000000000) * x5)) + interval(-4.70887462323852689966e-06, 4.70887462323852689966e-06)))
13 (37): exp = -24: floor_power2((((350084226225497/50000000000000) * x6) + interval(-1.41169991640625000619e-07, 1.41169991640625000619e-07)))
14 (39): exp = -24: floor_power2((((((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + ((-818548184999683/500000000000000) * x4)) + ((-7105009932019751/2000000000000000) * x5)) + ((350084226225497/50000000000000) * x6)) + interval(-6.04213751038696535319e-06, 6.04213751038696535319e-06)))
15 (43): exp = -24: floor_power2((((-802844893227931/200000000000000) * x7) + interval(-6.31267024218750009082e-08, 6.31267024218750009082e-08)))
16 (45): exp = -24: floor_power2(((((((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + ((-818548184999683/500000000000000) * x4)) + ((-7105009932019751/2000000000000000) * x5)) + ((350084226225497/50000000000000) * x6)) + ((-802844893227931/200000000000000) * x7)) + interval(-8.25103142472290358202e-06, 8.25103142472290358202e-06)))
17 (49): exp = -24: floor_power2((((-1985794846832853/200000000000000) * x8) + interval(-8.25529368750000073734e-08, 8.25529368750000073734e-08)))
18 (51): exp = -24: floor_power2((((((((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + ((-818548184999683/500000000000000) * x4)) + ((-7105009932019751/2000000000000000) * x5)) + ((350084226225497/50000000000000) * x6)) + ((-802844893227931/200000000000000) * x7)) + ((-1985794846832853/200000000000000) * x8)) + interval(-1.07177701526135299393e-05, 1.07177701526135299393e-05)))
19 (55): exp = -24: floor_power2((((1630231642601517/250000000000000) * x9) + interval(-9.48811656562500030927e-08, 9.48811656562500030927e-08)))
20 (57): exp = -24: floor_power2(((((((((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + ((-818548184999683/500000000000000) * x4)) + ((-7105009932019751/2000000000000000) * x5)) + ((350084226225497/50000000000000) * x6)) + ((-802844893227931/200000000000000) * x7)) + ((-1985794846832853/200000000000000) * x8)) + ((1630231642601517/250000000000000) * x9)) + interval(-1.29584185301838429718e-05, 1.29584185301838429718e-05)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((42965808751803/250000000000000)) * x0))
3: rnd32((rnd32((9469458133312479/1000000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1))))
5: rnd32((rnd32((-95585628551697/31250000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2))))
7: rnd32((rnd32((1919295506583817/200000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3))))
9: rnd32((rnd32((-818548184999683/500000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3)))) + rnd32((rnd32((-818548184999683/500000000000000)) * x4))))
11: rnd32((rnd32((-7105009932019751/2000000000000000)) * x5))
12: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3)))) + rnd32((rnd32((-818548184999683/500000000000000)) * x4)))) + rnd32((rnd32((-7105009932019751/2000000000000000)) * x5))))
13: rnd32((rnd32((350084226225497/50000000000000)) * x6))
14: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3)))) + rnd32((rnd32((-818548184999683/500000000000000)) * x4)))) + rnd32((rnd32((-7105009932019751/2000000000000000)) * x5)))) + rnd32((rnd32((350084226225497/50000000000000)) * x6))))
15: rnd32((rnd32((-802844893227931/200000000000000)) * x7))
16: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3)))) + rnd32((rnd32((-818548184999683/500000000000000)) * x4)))) + rnd32((rnd32((-7105009932019751/2000000000000000)) * x5)))) + rnd32((rnd32((350084226225497/50000000000000)) * x6)))) + rnd32((rnd32((-802844893227931/200000000000000)) * x7))))
17: rnd32((rnd32((-1985794846832853/200000000000000)) * x8))
18: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3)))) + rnd32((rnd32((-818548184999683/500000000000000)) * x4)))) + rnd32((rnd32((-7105009932019751/2000000000000000)) * x5)))) + rnd32((rnd32((350084226225497/50000000000000)) * x6)))) + rnd32((rnd32((-802844893227931/200000000000000)) * x7)))) + rnd32((rnd32((-1985794846832853/200000000000000)) * x8))))
19: rnd32((rnd32((1630231642601517/250000000000000)) * x9))
20: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3)))) + rnd32((rnd32((-818548184999683/500000000000000)) * x4)))) + rnd32((rnd32((-7105009932019751/2000000000000000)) * x5)))) + rnd32((rnd32((350084226225497/50000000000000)) * x6)))) + rnd32((rnd32((-802844893227931/200000000000000)) * x7)))) + rnd32((rnd32((-1985794846832853/200000000000000)) * x8)))) + rnd32((rnd32((1630231642601517/250000000000000)) * x9))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 379175, max = 379175): 379175
min = -5.495195e+01 (lower_min = -5.441360e+01)
max = 5.495195e+01 (lower_max = 5.441360e+01)
subopt = 5.383454e-01 (1.0%)
bounds: [-5.495195e+01, 5.495195e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 1.972152e-30 (lower_min = 1.972152e-30)
max = 1.972152e-30 (lower_max = 1.972152e-30)
subopt = 0.000000e+00 (0.0%)
rmin(result = 1.972152e-30, lower = 1.972152e-30), rmax(result = 1.972152e-30, lower = 1.972152e-30)
-1: exp = -24: 1.972152e-30 (low = 1.972152e-30, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 1000000): 1000000
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 2.462668e+02 (lower_max = 2.436656e+02)
subopt = 2.601156e+00 (1.1%)
exact bound (exp = -24): 2.462668e+02 (low = 2.436656e+02, subopt = 1.1%)
total2: 1.175494e-37 (low = 1.175494e-37, subopt = 0.0%)
exact total: 1.467864e-05 (low = 1.452360e-05, subopt = 1.1%)

Elapsed time: 81.54355
Processing: exp30

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((-2827894930252577/2500000000000000)) * rnd32(x0))) + rnd32((rnd32((1994222834709629/200000000000000)) * rnd32(x1))))) + rnd32((rnd32((1274841106914257/200000000000000)) * rnd32(x2))))) + rnd32((rnd32((14771345179975999/10000000000000000)) * rnd32(x3))))) + rnd32((rnd32((2304808758576443/250000000000000)) * rnd32(x4))))) + rnd32((rnd32((-2491081851057709/250000000000000)) * rnd32(x5))))) + rnd32((rnd32((2131158074386537/500000000000000)) * rnd32(x6))))) + rnd32((rnd32((4686522586566541/1000000000000000)) * rnd32(x7))))) + rnd32((rnd32((9536941819547941/1000000000000000)) * rnd32(x8))))) + rnd32((rnd32((-470770215245199/50000000000000)) * rnd32(x9))))) + rnd32((rnd32((5788815619620797/1000000000000000)) * rnd32(x10))))) + rnd32((rnd32((9595646257407019/1000000000000000)) * rnd32(x11))))) + rnd32((rnd32((1355147819487481/200000000000000)) * rnd32(x12))))) + rnd32((rnd32((9224081660200493/1000000000000000)) * rnd32(x13))))) + rnd32((rnd32((-4862496084959629/500000000000000)) * rnd32(x14)))))

Conservative bound: [-107.147699, 107.147699]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3)))) + rnd32((rnd32((2304808758576443/250000000000000)) * x4)))) + rnd32((rnd32((-2491081851057709/250000000000000)) * x5)))) + rnd32((rnd32((2131158074386537/500000000000000)) * x6)))) + rnd32((rnd32((4686522586566541/1000000000000000)) * x7)))) + rnd32((rnd32((9536941819547941/1000000000000000)) * x8)))) + rnd32((rnd32((-470770215245199/50000000000000)) * x9)))) + rnd32((rnd32((5788815619620797/1000000000000000)) * x10)))) + rnd32((rnd32((9595646257407019/1000000000000000)) * x11)))) + rnd32((rnd32((1355147819487481/200000000000000)) * x12)))) + rnd32((rnd32((9224081660200493/1000000000000000)) * x13)))) + rnd32((rnd32((-4862496084959629/500000000000000)) * x14))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2827894930252577/2500000000000000); err = (56753392402/152587890625)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1994222834709629/200000000000000); err = (1527580048/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1274841106914257/200000000000000); err = (-5603650416/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (14771345179975999/10000000000000000); err = (132675418244/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (2304808758576443/250000000000000); err = (-197591694736/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2491081851057709/250000000000000); err = (208877561968/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (2131158074386537/500000000000000); err = (-40031311112/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (4686522586566541/1000000000000000); err = (52603318992/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (9536941819547941/1000000000000000); err = (149108545792/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-470770215245199/50000000000000); err = (1521582448/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (5788815619620797/1000000000000000); err = (62089598064/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (9595646257407019/1000000000000000); err = (180667393728/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1355147819487481/200000000000000); err = (-9781784728/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (9224081660200493/1000000000000000); err = (-170446097584/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-4862496084959629/500000000000000); err = (-190217410096/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((((((((((((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + ((2304808758576443/250000000000000) * x4)) + ((-2491081851057709/250000000000000) * x5)) + ((2131158074386537/500000000000000) * x6)) + ((4686522586566541/1000000000000000) * x7)) + ((9536941819547941/1000000000000000) * x8)) + ((-470770215245199/50000000000000) * x9)) + ((5788815619620797/1000000000000000) * x10)) + ((9595646257407019/1000000000000000) * x11)) + ((1355147819487481/200000000000000) * x12)) + ((9224081660200493/1000000000000000) * x13)) + ((-4862496084959629/500000000000000) * x14))
-1 (131): exp = -24: (15/5070602400912917605986812821504)
1 (1): exp = -24: (((((((((((((((x0 * (56753392402/152587890625)) + (x1 * (1527580048/6103515625))) + (x2 * (-5603650416/6103515625))) + (x3 * (132675418244/152587890625))) + (x4 * (-197591694736/30517578125))) + (x5 * (208877561968/30517578125))) + (x6 * (-40031311112/30517578125))) + (x7 * (52603318992/30517578125))) + (x8 * (149108545792/30517578125))) + (x9 * (1521582448/6103515625))) + (x10 * (62089598064/30517578125))) + (x11 * (180667393728/30517578125))) + (x12 * (-9781784728/6103515625))) + (x13 * (-170446097584/30517578125))) + (x14 * (-190217410096/30517578125)))
2 (3): exp = -24: floor_power2((((-2827894930252577/2500000000000000) * x0) + interval(-2.21692939070312511723e-08, 2.21692939070312511723e-08)))
3 (7): exp = -24: floor_power2((((1994222834709629/200000000000000) * x1) + interval(-1.49177739062500020405e-08, 1.49177739062500020405e-08)))
4 (9): exp = -24: floor_power2(((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + interval(-5.73528870791797086662e-07, 5.73528870791797086662e-07)))
5 (13): exp = -24: floor_power2((((1274841106914257/200000000000000) * x2) + interval(-5.47231485937500060477e-08, 5.47231485937500060477e-08)))
6 (15): exp = -24: floor_power2((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + interval(-1.34350775669023476476e-06, 1.34350775669023476476e-06)))
7 (19): exp = -24: floor_power2((((14771345179975999/10000000000000000) * x3) + interval(-5.18263352515625066126e-08, 5.18263352515625066126e-08)))
8 (21): exp = -24: floor_power2(((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + interval(-2.40861305312343803534e-06, 2.40861305312343803534e-06)))
9 (25): exp = -24: floor_power2((((2304808758576443/250000000000000) * x4) + interval(-3.85921278781250020537e-07, 3.85921278781250020537e-07)))
10 (27): exp = -24: floor_power2((((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + ((2304808758576443/250000000000000) * x4)) + interval(-4.22504580651406400879e-06, 4.22504580651406400879e-06)))
11 (31): exp = -24: floor_power2((((-2491081851057709/250000000000000) * x5) + interval(-4.07963988218750039461e-07, 4.07963988218750039461e-07)))
12 (33): exp = -24: floor_power2(((((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + ((2304808758576443/250000000000000) * x4)) + ((-2491081851057709/250000000000000) * x5)) + interval(-6.06352126934219074232e-06, 6.06352126934219074232e-06)))
13 (37): exp = -24: floor_power2((((2131158074386537/500000000000000) * x6) + interval(-7.81861545156250057528e-08, 7.81861545156250057528e-08)))
14 (39): exp = -24: floor_power2((((((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + ((2304808758576443/250000000000000) * x4)) + ((-2491081851057709/250000000000000) * x5)) + ((2131158074386537/500000000000000) * x6)) + interval(-8.28747463577187852600e-06, 8.28747463577187852600e-06)))
15 (43): exp = -24: floor_power2((((4686522586566541/1000000000000000) * x7) + interval(-1.02740857406250002180e-07, 1.02740857406250002180e-07)))
16 (45): exp = -24: floor_power2(((((((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + ((2304808758576443/250000000000000) * x4)) + ((-2491081851057709/250000000000000) * x5)) + ((2131158074386537/500000000000000) * x6)) + ((4686522586566541/1000000000000000) * x7)) + interval(-1.05359827050921917561e-05, 1.05359827050921917561e-05)))
17 (49): exp = -24: floor_power2((((9536941819547941/1000000000000000) * x8) + interval(-2.91227628500000021129e-07, 2.91227628500000021129e-07)))
18 (51): exp = -24: floor_power2((((((((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + ((2304808758576443/250000000000000) * x4)) + ((-2491081851057709/250000000000000) * x5)) + ((2131158074386537/500000000000000) * x6)) + ((4686522586566541/1000000000000000) * x7)) + ((9536941819547941/1000000000000000) * x8)) + interval(-1.32113961246078174654e-05, 1.32113961246078174654e-05)))
19 (55): exp = -24: floor_power2((((-470770215245199/50000000000000) * x9) + interval(-1.48592035937500015941e-08, 1.48592035937500015941e-08)))
20 (57): exp = -24: floor_power2(((((((((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + ((2304808758576443/250000000000000) * x4)) + ((-2491081851057709/250000000000000) * x5)) + ((2131158074386537/500000000000000) * x6)) + ((4686522586566541/1000000000000000) * x7)) + ((9536941819547941/1000000000000000) * x8)) + ((-470770215245199/50000000000000) * x9)) + interval(-1.56104411192171947567e-05, 1.56104411192171947567e-05)))
21 (61): exp = -24: floor_power2((((5788815619620797/1000000000000000) * x10) + interval(-1.21268746218750021248e-07, 1.21268746218750021248e-07)))
22 (63): exp = -24: floor_power2((((((((((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + ((2304808758576443/250000000000000) * x4)) + ((-2491081851057709/250000000000000) * x5)) + ((2131158074386537/500000000000000) * x6)) + ((4686522586566541/1000000000000000) * x7)) + ((9536941819547941/1000000000000000) * x8)) + ((-470770215245199/50000000000000) * x9)) + ((5788815619620797/1000000000000000) * x10)) + interval(-1.97848257101625085220e-05, 1.97848257101625085220e-05)))
23 (67): exp = -24: floor_power2((((9595646257407019/1000000000000000) * x11) + interval(-3.52866003375000030141e-07, 3.52866003375000030141e-07)))
24 (69): exp = -24: floor_power2(((((((((((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + ((2304808758576443/250000000000000) * x4)) + ((-2491081851057709/250000000000000) * x5)) + ((2131158074386537/500000000000000) * x6)) + ((4686522586566541/1000000000000000) * x7)) + ((9536941819547941/1000000000000000) * x8)) + ((-470770215245199/50000000000000) * x9)) + ((5788815619620797/1000000000000000) * x10)) + ((9595646257407019/1000000000000000) * x11)) + interval(-2.44292261373656345580e-05, 2.44292261373656345580e-05)))
25 (73): exp = -24: floor_power2((((1355147819487481/200000000000000) * x12) + interval(-9.55252414843750008973e-08, 9.55252414843750008973e-08)))
26 (75): exp = -24: floor_power2((((((((((((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + ((2304808758576443/250000000000000) * x4)) + ((-2491081851057709/250000000000000) * x5)) + ((2131158074386537/500000000000000) * x6)) + ((4686522586566541/1000000000000000) * x7)) + ((9536941819547941/1000000000000000) * x8)) + ((-470770215245199/50000000000000) * x9)) + ((5788815619620797/1000000000000000) * x10)) + ((9595646257407019/1000000000000000) * x11)) + ((1355147819487481/200000000000000) * x12)) + interval(-2.85778672235765751294e-05, 2.85778672235765751294e-05)))
27 (79): exp = -24: floor_power2((((9224081660200493/1000000000000000) * x13) + interval(-3.32902534343750008088e-07, 3.32902534343750008088e-07)))
28 (81): exp = -24: floor_power2(((((((((((((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + ((2304808758576443/250000000000000) * x4)) + ((-2491081851057709/250000000000000) * x5)) + ((2131158074386537/500000000000000) * x6)) + ((4686522586566541/1000000000000000) * x7)) + ((9536941819547941/1000000000000000) * x8)) + ((-470770215245199/50000000000000) * x9)) + ((5788815619620797/1000000000000000) * x10)) + ((9595646257407019/1000000000000000) * x11)) + ((1355147819487481/200000000000000) * x12)) + ((9224081660200493/1000000000000000) * x13)) + interval(-3.32023041817484522551e-05, 3.32023041817484522551e-05)))
29 (85): exp = -24: floor_power2((((-4862496084959629/500000000000000) * x14) + interval(-3.71518379093750007228e-07, 3.71518379093750007228e-07)))
30 (87): exp = -24: floor_power2((((((((((((((((((-2827894930252577/2500000000000000) * x0) + ((1994222834709629/200000000000000) * x1)) + ((1274841106914257/200000000000000) * x2)) + ((14771345179975999/10000000000000000) * x3)) + ((2304808758576443/250000000000000) * x4)) + ((-2491081851057709/250000000000000) * x5)) + ((2131158074386537/500000000000000) * x6)) + ((4686522586566541/1000000000000000) * x7)) + ((9536941819547941/1000000000000000) * x8)) + ((-470770215245199/50000000000000) * x9)) + ((5788815619620797/1000000000000000) * x10)) + ((9595646257407019/1000000000000000) * x11)) + ((1355147819487481/200000000000000) * x12)) + ((9224081660200493/1000000000000000) * x13)) + ((-4862496084959629/500000000000000) * x14)) + interval(-3.78653569846703307034e-05, 3.78653569846703307034e-05)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((-2827894930252577/2500000000000000)) * x0))
3: rnd32((rnd32((1994222834709629/200000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1))))
5: rnd32((rnd32((1274841106914257/200000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2))))
7: rnd32((rnd32((14771345179975999/10000000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3))))
9: rnd32((rnd32((2304808758576443/250000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3)))) + rnd32((rnd32((2304808758576443/250000000000000)) * x4))))
11: rnd32((rnd32((-2491081851057709/250000000000000)) * x5))
12: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3)))) + rnd32((rnd32((2304808758576443/250000000000000)) * x4)))) + rnd32((rnd32((-2491081851057709/250000000000000)) * x5))))
13: rnd32((rnd32((2131158074386537/500000000000000)) * x6))
14: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3)))) + rnd32((rnd32((2304808758576443/250000000000000)) * x4)))) + rnd32((rnd32((-2491081851057709/250000000000000)) * x5)))) + rnd32((rnd32((2131158074386537/500000000000000)) * x6))))
15: rnd32((rnd32((4686522586566541/1000000000000000)) * x7))
16: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3)))) + rnd32((rnd32((2304808758576443/250000000000000)) * x4)))) + rnd32((rnd32((-2491081851057709/250000000000000)) * x5)))) + rnd32((rnd32((2131158074386537/500000000000000)) * x6)))) + rnd32((rnd32((4686522586566541/1000000000000000)) * x7))))
17: rnd32((rnd32((9536941819547941/1000000000000000)) * x8))
18: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3)))) + rnd32((rnd32((2304808758576443/250000000000000)) * x4)))) + rnd32((rnd32((-2491081851057709/250000000000000)) * x5)))) + rnd32((rnd32((2131158074386537/500000000000000)) * x6)))) + rnd32((rnd32((4686522586566541/1000000000000000)) * x7)))) + rnd32((rnd32((9536941819547941/1000000000000000)) * x8))))
19: rnd32((rnd32((-470770215245199/50000000000000)) * x9))
20: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3)))) + rnd32((rnd32((2304808758576443/250000000000000)) * x4)))) + rnd32((rnd32((-2491081851057709/250000000000000)) * x5)))) + rnd32((rnd32((2131158074386537/500000000000000)) * x6)))) + rnd32((rnd32((4686522586566541/1000000000000000)) * x7)))) + rnd32((rnd32((9536941819547941/1000000000000000)) * x8)))) + rnd32((rnd32((-470770215245199/50000000000000)) * x9))))
21: rnd32((rnd32((5788815619620797/1000000000000000)) * x10))
22: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3)))) + rnd32((rnd32((2304808758576443/250000000000000)) * x4)))) + rnd32((rnd32((-2491081851057709/250000000000000)) * x5)))) + rnd32((rnd32((2131158074386537/500000000000000)) * x6)))) + rnd32((rnd32((4686522586566541/1000000000000000)) * x7)))) + rnd32((rnd32((9536941819547941/1000000000000000)) * x8)))) + rnd32((rnd32((-470770215245199/50000000000000)) * x9)))) + rnd32((rnd32((5788815619620797/1000000000000000)) * x10))))
23: rnd32((rnd32((9595646257407019/1000000000000000)) * x11))
24: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3)))) + rnd32((rnd32((2304808758576443/250000000000000)) * x4)))) + rnd32((rnd32((-2491081851057709/250000000000000)) * x5)))) + rnd32((rnd32((2131158074386537/500000000000000)) * x6)))) + rnd32((rnd32((4686522586566541/1000000000000000)) * x7)))) + rnd32((rnd32((9536941819547941/1000000000000000)) * x8)))) + rnd32((rnd32((-470770215245199/50000000000000)) * x9)))) + rnd32((rnd32((5788815619620797/1000000000000000)) * x10)))) + rnd32((rnd32((9595646257407019/1000000000000000)) * x11))))
25: rnd32((rnd32((1355147819487481/200000000000000)) * x12))
26: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3)))) + rnd32((rnd32((2304808758576443/250000000000000)) * x4)))) + rnd32((rnd32((-2491081851057709/250000000000000)) * x5)))) + rnd32((rnd32((2131158074386537/500000000000000)) * x6)))) + rnd32((rnd32((4686522586566541/1000000000000000)) * x7)))) + rnd32((rnd32((9536941819547941/1000000000000000)) * x8)))) + rnd32((rnd32((-470770215245199/50000000000000)) * x9)))) + rnd32((rnd32((5788815619620797/1000000000000000)) * x10)))) + rnd32((rnd32((9595646257407019/1000000000000000)) * x11)))) + rnd32((rnd32((1355147819487481/200000000000000)) * x12))))
27: rnd32((rnd32((9224081660200493/1000000000000000)) * x13))
28: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3)))) + rnd32((rnd32((2304808758576443/250000000000000)) * x4)))) + rnd32((rnd32((-2491081851057709/250000000000000)) * x5)))) + rnd32((rnd32((2131158074386537/500000000000000)) * x6)))) + rnd32((rnd32((4686522586566541/1000000000000000)) * x7)))) + rnd32((rnd32((9536941819547941/1000000000000000)) * x8)))) + rnd32((rnd32((-470770215245199/50000000000000)) * x9)))) + rnd32((rnd32((5788815619620797/1000000000000000)) * x10)))) + rnd32((rnd32((9595646257407019/1000000000000000)) * x11)))) + rnd32((rnd32((1355147819487481/200000000000000)) * x12)))) + rnd32((rnd32((9224081660200493/1000000000000000)) * x13))))
29: rnd32((rnd32((-4862496084959629/500000000000000)) * x14))
30: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2827894930252577/2500000000000000)) * x0)) + rnd32((rnd32((1994222834709629/200000000000000)) * x1)))) + rnd32((rnd32((1274841106914257/200000000000000)) * x2)))) + rnd32((rnd32((14771345179975999/10000000000000000)) * x3)))) + rnd32((rnd32((2304808758576443/250000000000000)) * x4)))) + rnd32((rnd32((-2491081851057709/250000000000000)) * x5)))) + rnd32((rnd32((2131158074386537/500000000000000)) * x6)))) + rnd32((rnd32((4686522586566541/1000000000000000)) * x7)))) + rnd32((rnd32((9536941819547941/1000000000000000)) * x8)))) + rnd32((rnd32((-470770215245199/50000000000000)) * x9)))) + rnd32((rnd32((5788815619620797/1000000000000000)) * x10)))) + rnd32((rnd32((9595646257407019/1000000000000000)) * x11)))) + rnd32((rnd32((1355147819487481/200000000000000)) * x12)))) + rnd32((rnd32((9224081660200493/1000000000000000)) * x13)))) + rnd32((rnd32((-4862496084959629/500000000000000)) * x14))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 985629, max = 985629): 985629
min = -1.071476e+02 (lower_min = -1.061674e+02)
max = 1.071476e+02 (lower_max = 1.061674e+02)
subopt = 9.802200e-01 (0.9%)
bounds: [-1.071476e+02, 1.071476e+02]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 2.958228e-30 (lower_min = 2.958228e-30)
max = 2.958228e-30 (lower_max = 2.958228e-30)
subopt = 0.000000e+00 (0.0%)
rmin(result = 2.958228e-30, lower = 2.958228e-30), rmax(result = 2.958228e-30, lower = 2.958228e-30)
-1: exp = -24: 2.958228e-30 (low = 2.958228e-30, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 1000000): 1000000
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 6.851239e+02 (lower_max = 5.909882e+02)
subopt = 9.413571e+01 (13.7%)
exact bound (exp = -24): 6.851239e+02 (low = 5.909882e+02, subopt = 13.7%)
total2: 1.763242e-37 (low = 1.763242e-37, subopt = 0.0%)
exact total: 4.083657e-05 (low = 3.522564e-05, subopt = 13.7%)

Elapsed time: 152.32428
Processing: exp31

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((6225620863768981/1000000000000000)) * rnd32(x0))) + rnd32((rnd32((-1576729160064267/200000000000000)) * rnd32(x1))))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * rnd32(x2))))) + rnd32((rnd32((-767009899096057/500000000000000)) * rnd32(x3))))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * rnd32(x4))))) + rnd32((rnd32((1141763989805051/400000000000000)) * rnd32(x5))))) + rnd32((rnd32((-2241528915269991/250000000000000)) * rnd32(x6))))) + rnd32((rnd32((-9430508080912379/1000000000000000)) * rnd32(x7))))) + rnd32((rnd32((472661195985021/50000000000000)) * rnd32(x8))))) + rnd32((rnd32((-14562180621033063/5000000000000000)) * rnd32(x9))))) + rnd32((rnd32((-1963120611433/800000000000)) * rnd32(x10))))) + rnd32((rnd32((-8057870155805773/20000000000000000)) * rnd32(x11))))) + rnd32((rnd32((775472717350393/500000000000000)) * rnd32(x12))))) + rnd32((rnd32((826878292304889/250000000000000)) * rnd32(x13))))) + rnd32((rnd32((3942230226576191/1000000000000000)) * rnd32(x14)))))

Conservative bound: [-69.933678, 69.933678]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3)))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * x4)))) + rnd32((rnd32((1141763989805051/400000000000000)) * x5)))) + rnd32((rnd32((-2241528915269991/250000000000000)) * x6)))) + rnd32((rnd32((-9430508080912379/1000000000000000)) * x7)))) + rnd32((rnd32((472661195985021/50000000000000)) * x8)))) + rnd32((rnd32((-14562180621033063/5000000000000000)) * x9)))) + rnd32((rnd32((-1963120611433/800000000000)) * x10)))) + rnd32((rnd32((-8057870155805773/20000000000000000)) * x11)))) + rnd32((rnd32((775472717350393/500000000000000)) * x12)))) + rnd32((rnd32((826878292304889/250000000000000)) * x13)))) + rnd32((rnd32((3942230226576191/1000000000000000)) * x14))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (6225620863768981/1000000000000000); err = (59984093272/30517578125)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1576729160064267/200000000000000); err = (21609595296/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-4182688149163829/1250000000000000); err = (300395290708/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-767009899096057/500000000000000); err = (15181106382/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-5670014627011071/1000000000000000); err = (118392206648/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1141763989805051/400000000000000); err = (4241655556/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2241528915269991/250000000000000); err = (148714558432/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-9430508080912379/1000000000000000); err = (-215552138048/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (472661195985021/50000000000000); err = (-26872676992/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-14562180621033063/5000000000000000); err = (-296328303256/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1963120611433/800000000000); err = (40767608/48828125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-8057870155805773/20000000000000000); err = (28932081487/305175781250)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (775472717350393/500000000000000); err = (17156646182/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (826878292304889/250000000000000); err = (-34703337328/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (3942230226576191/1000000000000000); err = (1007009792/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((((((((((((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + ((-5670014627011071/1000000000000000) * x4)) + ((1141763989805051/400000000000000) * x5)) + ((-2241528915269991/250000000000000) * x6)) + ((-9430508080912379/1000000000000000) * x7)) + ((472661195985021/50000000000000) * x8)) + ((-14562180621033063/5000000000000000) * x9)) + ((-1963120611433/800000000000) * x10)) + ((-8057870155805773/20000000000000000) * x11)) + ((775472717350393/500000000000000) * x12)) + ((826878292304889/250000000000000) * x13)) + ((3942230226576191/1000000000000000) * x14))
-1 (131): exp = -24: (15/5070602400912917605986812821504)
1 (1): exp = -24: (((((((((((((((x0 * (59984093272/30517578125)) + (x1 * (21609595296/6103515625))) + (x2 * (300395290708/152587890625))) + (x3 * (15181106382/30517578125))) + (x4 * (118392206648/30517578125))) + (x5 * (4241655556/6103515625))) + (x6 * (148714558432/30517578125))) + (x7 * (-215552138048/30517578125))) + (x8 * (-26872676992/6103515625))) + (x9 * (-296328303256/152587890625))) + (x10 * (40767608/48828125))) + (x11 * (28932081487/305175781250))) + (x12 * (17156646182/30517578125))) + (x13 * (-34703337328/30517578125))) + (x14 * (1007009792/30517578125)))
2 (3): exp = -24: floor_power2((((6225620863768981/1000000000000000) * x0) + interval(-1.17156432171875001358e-07, 1.17156432171875001358e-07)))
3 (7): exp = -24: floor_power2((((-1576729160064267/200000000000000) * x1) + interval(-2.11031204062500024420e-07, 2.11031204062500024420e-07)))
4 (9): exp = -24: floor_power2(((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + interval(-8.05024794437500105188e-07, 8.05024794437500105188e-07)))
5 (13): exp = -24: floor_power2((((-4182688149163829/1250000000000000) * x2) + interval(-1.17341910432812511908e-07, 1.17341910432812511908e-07)))
6 (15): exp = -24: floor_power2((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + interval(-1.51841315262421902591e-06, 1.51841315262421902591e-06)))
7 (19): exp = -24: floor_power2((((-767009899096057/500000000000000) * x3) + interval(-2.96505984023437530491e-08, 2.96505984023437530491e-08)))
8 (21): exp = -24: floor_power2(((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + interval(-2.56134271220820353300e-06, 2.56134271220820353300e-06)))
9 (25): exp = -24: floor_power2((((-5670014627011071/1000000000000000) * x4) + interval(-2.31234778609375018121e-07, 2.31234778609375018121e-07)))
10 (27): exp = -24: floor_power2((((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + ((-5670014627011071/1000000000000000) * x4)) + interval(-3.98467038632539203051e-06, 3.98467038632539203051e-06)))
11 (31): exp = -24: floor_power2((((1141763989805051/400000000000000) * x5) + interval(-4.14224175390625036304e-08, 4.14224175390625036304e-08)))
12 (33): exp = -24: floor_power2(((((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + ((-5670014627011071/1000000000000000) * x4)) + ((1141763989805051/400000000000000) * x5)) + interval(-5.09897640982148567826e-06, 5.09897640982148567826e-06)))
13 (37): exp = -24: floor_power2((((-2241528915269991/250000000000000) * x6) + interval(-2.90458121937500018127e-07, 2.90458121937500018127e-07)))
14 (39): exp = -24: floor_power2((((((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + ((-5670014627011071/1000000000000000) * x4)) + ((1141763989805051/400000000000000) * x5)) + ((-2241528915269991/250000000000000) * x6)) + interval(-6.81994600636836186106e-06, 6.81994600636836186106e-06)))
15 (43): exp = -24: floor_power2((((-9430508080912379/1000000000000000) * x7) + interval(-4.21000269625000036275e-07, 4.21000269625000036275e-07)))
16 (45): exp = -24: floor_power2(((((((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + ((-5670014627011071/1000000000000000) * x4)) + ((1141763989805051/400000000000000) * x5)) + ((-2241528915269991/250000000000000) * x6)) + ((-9430508080912379/1000000000000000) * x7)) + interval(-9.62513206700898779730e-06, 9.62513206700898779730e-06)))
17 (49): exp = -24: floor_power2((((472661195985021/50000000000000) * x8) + interval(-2.62428486250000042457e-07, 2.62428486250000042457e-07)))
18 (51): exp = -24: floor_power2((((((((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + ((-5670014627011071/1000000000000000) * x4)) + ((1141763989805051/400000000000000) * x5)) + ((-2241528915269991/250000000000000) * x6)) + ((-9430508080912379/1000000000000000) * x7)) + ((472661195985021/50000000000000) * x8)) + interval(-1.22717463442746141632e-05, 1.22717463442746141632e-05)))
19 (55): exp = -24: floor_power2((((-14562180621033063/5000000000000000) * x9) + interval(-1.15753243459375003639e-07, 1.15753243459375003639e-07)))
20 (57): exp = -24: floor_power2(((((((((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + ((-5670014627011071/1000000000000000) * x4)) + ((1141763989805051/400000000000000) * x5)) + ((-2241528915269991/250000000000000) * x6)) + ((-9430508080912379/1000000000000000) * x7)) + ((472661195985021/50000000000000) * x8)) + ((-14562180621033063/5000000000000000) * x9)) + interval(-1.44140575100972715816e-05, 1.44140575100972715816e-05)))
21 (61): exp = -24: floor_power2((((-1963120611433/800000000000) * x10) + interval(-4.97651464843750062113e-08, 4.97651464843750062113e-08)))
22 (63): exp = -24: floor_power2((((((((((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + ((-5670014627011071/1000000000000000) * x4)) + ((1141763989805051/400000000000000) * x5)) + ((-2241528915269991/250000000000000) * x6)) + ((-9430508080912379/1000000000000000) * x7)) + ((472661195985021/50000000000000) * x8)) + ((-14562180621033063/5000000000000000) * x9)) + ((-1963120611433/800000000000) * x10)) + interval(-1.64903805789449281157e-05, 1.64903805789449281157e-05)))
23 (67): exp = -24: floor_power2((((-8057870155805773/20000000000000000) * x11) + interval(-5.65079716542968812363e-09, 5.65079716542968812363e-09)))
24 (69): exp = -24: floor_power2(((((((((((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + ((-5670014627011071/1000000000000000) * x4)) + ((1141763989805051/400000000000000) * x5)) + ((-2241528915269991/250000000000000) * x6)) + ((-9430508080912379/1000000000000000) * x7)) + ((472661195985021/50000000000000) * x8)) + ((-14562180621033063/5000000000000000) * x9)) + ((-1963120611433/800000000000) * x10)) + ((-8057870155805773/20000000000000000) * x11)) + interval(-1.84182811701167054692e-05, 1.84182811701167054692e-05)))
25 (73): exp = -24: floor_power2((((775472717350393/500000000000000) * x12) + interval(-3.35090745742187520848e-08, 3.35090745742187520848e-08)))
26 (75): exp = -24: floor_power2((((((((((((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + ((-5670014627011071/1000000000000000) * x4)) + ((1141763989805051/400000000000000) * x5)) + ((-2241528915269991/250000000000000) * x6)) + ((-9430508080912379/1000000000000000) * x7)) + ((472661195985021/50000000000000) * x8)) + ((-14562180621033063/5000000000000000) * x9)) + ((-1963120611433/800000000000) * x10)) + ((-8057870155805773/20000000000000000) * x11)) + ((775472717350393/500000000000000) * x12)) + interval(-2.04187435222788169506e-05, 2.04187435222788169506e-05)))
27 (79): exp = -24: floor_power2((((826878292304889/250000000000000) * x13) + interval(-6.77799557187500035972e-08, 6.77799557187500035972e-08)))
28 (81): exp = -24: floor_power2(((((((((((((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + ((-5670014627011071/1000000000000000) * x4)) + ((1141763989805051/400000000000000) * x5)) + ((-2241528915269991/250000000000000) * x6)) + ((-9430508080912379/1000000000000000) * x7)) + ((472661195985021/50000000000000) * x8)) + ((-14562180621033063/5000000000000000) * x9)) + ((-1963120611433/800000000000) * x10)) + ((-8057870155805773/20000000000000000) * x11)) + ((775472717350393/500000000000000) * x12)) + ((826878292304889/250000000000000) * x13)) + interval(-2.25130814003608503747e-05, 2.25130814003608503747e-05)))
29 (85): exp = -24: floor_power2((((3942230226576191/1000000000000000) * x14) + interval(-1.96681600000000000424e-09, 1.96681600000000000424e-09)))
30 (87): exp = -24: floor_power2((((((((((((((((((6225620863768981/1000000000000000) * x0) + ((-1576729160064267/200000000000000) * x1)) + ((-4182688149163829/1250000000000000) * x2)) + ((-767009899096057/500000000000000) * x3)) + ((-5670014627011071/1000000000000000) * x4)) + ((1141763989805051/400000000000000) * x5)) + ((-2241528915269991/250000000000000) * x6)) + ((-9430508080912379/1000000000000000) * x7)) + ((472661195985021/50000000000000) * x8)) + ((-14562180621033063/5000000000000000) * x9)) + ((-1963120611433/800000000000) * x10)) + ((-8057870155805773/20000000000000000) * x11)) + ((775472717350393/500000000000000) * x12)) + ((826878292304889/250000000000000) * x13)) + ((3942230226576191/1000000000000000) * x14)) + interval(-2.64489547715366308319e-05, 2.64489547715366308319e-05)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((6225620863768981/1000000000000000)) * x0))
3: rnd32((rnd32((-1576729160064267/200000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1))))
5: rnd32((rnd32((-4182688149163829/1250000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2))))
7: rnd32((rnd32((-767009899096057/500000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3))))
9: rnd32((rnd32((-5670014627011071/1000000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3)))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * x4))))
11: rnd32((rnd32((1141763989805051/400000000000000)) * x5))
12: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3)))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * x4)))) + rnd32((rnd32((1141763989805051/400000000000000)) * x5))))
13: rnd32((rnd32((-2241528915269991/250000000000000)) * x6))
14: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3)))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * x4)))) + rnd32((rnd32((1141763989805051/400000000000000)) * x5)))) + rnd32((rnd32((-2241528915269991/250000000000000)) * x6))))
15: rnd32((rnd32((-9430508080912379/1000000000000000)) * x7))
16: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3)))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * x4)))) + rnd32((rnd32((1141763989805051/400000000000000)) * x5)))) + rnd32((rnd32((-2241528915269991/250000000000000)) * x6)))) + rnd32((rnd32((-9430508080912379/1000000000000000)) * x7))))
17: rnd32((rnd32((472661195985021/50000000000000)) * x8))
18: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3)))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * x4)))) + rnd32((rnd32((1141763989805051/400000000000000)) * x5)))) + rnd32((rnd32((-2241528915269991/250000000000000)) * x6)))) + rnd32((rnd32((-9430508080912379/1000000000000000)) * x7)))) + rnd32((rnd32((472661195985021/50000000000000)) * x8))))
19: rnd32((rnd32((-14562180621033063/5000000000000000)) * x9))
20: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3)))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * x4)))) + rnd32((rnd32((1141763989805051/400000000000000)) * x5)))) + rnd32((rnd32((-2241528915269991/250000000000000)) * x6)))) + rnd32((rnd32((-9430508080912379/1000000000000000)) * x7)))) + rnd32((rnd32((472661195985021/50000000000000)) * x8)))) + rnd32((rnd32((-14562180621033063/5000000000000000)) * x9))))
21: rnd32((rnd32((-1963120611433/800000000000)) * x10))
22: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3)))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * x4)))) + rnd32((rnd32((1141763989805051/400000000000000)) * x5)))) + rnd32((rnd32((-2241528915269991/250000000000000)) * x6)))) + rnd32((rnd32((-9430508080912379/1000000000000000)) * x7)))) + rnd32((rnd32((472661195985021/50000000000000)) * x8)))) + rnd32((rnd32((-14562180621033063/5000000000000000)) * x9)))) + rnd32((rnd32((-1963120611433/800000000000)) * x10))))
23: rnd32((rnd32((-8057870155805773/20000000000000000)) * x11))
24: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3)))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * x4)))) + rnd32((rnd32((1141763989805051/400000000000000)) * x5)))) + rnd32((rnd32((-2241528915269991/250000000000000)) * x6)))) + rnd32((rnd32((-9430508080912379/1000000000000000)) * x7)))) + rnd32((rnd32((472661195985021/50000000000000)) * x8)))) + rnd32((rnd32((-14562180621033063/5000000000000000)) * x9)))) + rnd32((rnd32((-1963120611433/800000000000)) * x10)))) + rnd32((rnd32((-8057870155805773/20000000000000000)) * x11))))
25: rnd32((rnd32((775472717350393/500000000000000)) * x12))
26: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3)))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * x4)))) + rnd32((rnd32((1141763989805051/400000000000000)) * x5)))) + rnd32((rnd32((-2241528915269991/250000000000000)) * x6)))) + rnd32((rnd32((-9430508080912379/1000000000000000)) * x7)))) + rnd32((rnd32((472661195985021/50000000000000)) * x8)))) + rnd32((rnd32((-14562180621033063/5000000000000000)) * x9)))) + rnd32((rnd32((-1963120611433/800000000000)) * x10)))) + rnd32((rnd32((-8057870155805773/20000000000000000)) * x11)))) + rnd32((rnd32((775472717350393/500000000000000)) * x12))))
27: rnd32((rnd32((826878292304889/250000000000000)) * x13))
28: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3)))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * x4)))) + rnd32((rnd32((1141763989805051/400000000000000)) * x5)))) + rnd32((rnd32((-2241528915269991/250000000000000)) * x6)))) + rnd32((rnd32((-9430508080912379/1000000000000000)) * x7)))) + rnd32((rnd32((472661195985021/50000000000000)) * x8)))) + rnd32((rnd32((-14562180621033063/5000000000000000)) * x9)))) + rnd32((rnd32((-1963120611433/800000000000)) * x10)))) + rnd32((rnd32((-8057870155805773/20000000000000000)) * x11)))) + rnd32((rnd32((775472717350393/500000000000000)) * x12)))) + rnd32((rnd32((826878292304889/250000000000000)) * x13))))
29: rnd32((rnd32((3942230226576191/1000000000000000)) * x14))
30: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((6225620863768981/1000000000000000)) * x0)) + rnd32((rnd32((-1576729160064267/200000000000000)) * x1)))) + rnd32((rnd32((-4182688149163829/1250000000000000)) * x2)))) + rnd32((rnd32((-767009899096057/500000000000000)) * x3)))) + rnd32((rnd32((-5670014627011071/1000000000000000)) * x4)))) + rnd32((rnd32((1141763989805051/400000000000000)) * x5)))) + rnd32((rnd32((-2241528915269991/250000000000000)) * x6)))) + rnd32((rnd32((-9430508080912379/1000000000000000)) * x7)))) + rnd32((rnd32((472661195985021/50000000000000)) * x8)))) + rnd32((rnd32((-14562180621033063/5000000000000000)) * x9)))) + rnd32((rnd32((-1963120611433/800000000000)) * x10)))) + rnd32((rnd32((-8057870155805773/20000000000000000)) * x11)))) + rnd32((rnd32((775472717350393/500000000000000)) * x12)))) + rnd32((rnd32((826878292304889/250000000000000)) * x13)))) + rnd32((rnd32((3942230226576191/1000000000000000)) * x14))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 1000000, max = 1000000): 1000000
min = -6.993363e+01 (lower_min = -5.315385e+01)
max = 6.993363e+01 (lower_max = 5.315385e+01)
subopt = 1.677978e+01 (24.0%)
bounds: [-6.993363e+01, 6.993363e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 2.958228e-30 (lower_min = 2.958228e-30)
max = 2.958228e-30 (lower_max = 2.958228e-30)
subopt = 0.000000e+00 (0.0%)
rmin(result = 2.958228e-30, lower = 2.958228e-30), rmax(result = 2.958228e-30, lower = 2.958228e-30)
-1: exp = -24: 2.958228e-30 (low = 2.958228e-30, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 1000000): 1000000
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 4.942725e+02 (lower_max = 3.690105e+02)
subopt = 1.252620e+02 (25.3%)
exact bound (exp = -24): 4.942725e+02 (low = 3.690105e+02, subopt = 25.3%)
total2: 1.763242e-37 (low = 1.763242e-37, subopt = 0.0%)
exact total: 2.946094e-05 (low = 2.199474e-05, subopt = 25.3%)

Elapsed time: 207.38355
Processing: exp32

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((4069789500263667/500000000000000)) * rnd32(x0))) + rnd32((rnd32((-2300368983996033/1000000000000000)) * rnd32(x1))))) + rnd32((rnd32((-952765572948147/250000000000000)) * rnd32(x2))))) + rnd32((rnd32((24136252216765897/10000000000000000)) * rnd32(x3))))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * rnd32(x4))))) + rnd32((rnd32((-6674615794248657/1000000000000000)) * rnd32(x5))))) + rnd32((rnd32((-3251999686764889/500000000000000)) * rnd32(x6))))) + rnd32((rnd32((15313778346372601/2000000000000000)) * rnd32(x7))))) + rnd32((rnd32((5626784793219439/1000000000000000)) * rnd32(x8))))) + rnd32((rnd32((3211748331564369/500000000000000)) * rnd32(x9))))) + rnd32((rnd32((5314099728080993/1000000000000000)) * rnd32(x10))))) + rnd32((rnd32((31691918757372157/5000000000000000)) * rnd32(x11))))) + rnd32((rnd32((8824148805219263/1000000000000000)) * rnd32(x12))))) + rnd32((rnd32((1758164327895539/250000000000000)) * rnd32(x13))))) + rnd32((rnd32((-5462048454025581/1000000000000000)) * rnd32(x14)))))

Conservative bound: [-86.452105, 86.452105]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3)))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * x4)))) + rnd32((rnd32((-6674615794248657/1000000000000000)) * x5)))) + rnd32((rnd32((-3251999686764889/500000000000000)) * x6)))) + rnd32((rnd32((15313778346372601/2000000000000000)) * x7)))) + rnd32((rnd32((5626784793219439/1000000000000000)) * x8)))) + rnd32((rnd32((3211748331564369/500000000000000)) * x9)))) + rnd32((rnd32((5314099728080993/1000000000000000)) * x10)))) + rnd32((rnd32((31691918757372157/5000000000000000)) * x11)))) + rnd32((rnd32((8824148805219263/1000000000000000)) * x12)))) + rnd32((rnd32((1758164327895539/250000000000000)) * x13)))) + rnd32((rnd32((-5462048454025581/1000000000000000)) * x14))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (4069789500263667/500000000000000); err = (92801245008/30517578125)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2300368983996033/1000000000000000); err = (20623718604/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-952765572948147/250000000000000); err = (22617819944/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (24136252216765897/10000000000000000); err = (-47742305368/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-3930292426663769/1000000000000000); err = (-30069037228/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-6674615794248657/1000000000000000); err = (33657187616/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-3251999686764889/500000000000000); err = (-71825371336/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (15313778346372601/2000000000000000); err = (108233885856/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (5626784793219439/1000000000000000); err = (-4231022232/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (3211748331564369/500000000000000); err = (-30743711144/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (5314099728080993/1000000000000000); err = (-31019406584/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (31691918757372157/5000000000000000); err = (196743294384/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (8824148805219263/1000000000000000); err = (-167196487344/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1758164327895539/250000000000000); err = (84545688872/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-5462048454025581/1000000000000000); err = (39195152528/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((((((((((((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + ((-3930292426663769/1000000000000000) * x4)) + ((-6674615794248657/1000000000000000) * x5)) + ((-3251999686764889/500000000000000) * x6)) + ((15313778346372601/2000000000000000) * x7)) + ((5626784793219439/1000000000000000) * x8)) + ((3211748331564369/500000000000000) * x9)) + ((5314099728080993/1000000000000000) * x10)) + ((31691918757372157/5000000000000000) * x11)) + ((8824148805219263/1000000000000000) * x12)) + ((1758164327895539/250000000000000) * x13)) + ((-5462048454025581/1000000000000000) * x14))
-1 (131): exp = -24: (15/5070602400912917605986812821504)
1 (1): exp = -24: (((((((((((((((x0 * (92801245008/30517578125)) + (x1 * (20623718604/30517578125))) + (x2 * (22617819944/30517578125))) + (x3 * (-47742305368/152587890625))) + (x4 * (-30069037228/30517578125))) + (x5 * (33657187616/30517578125))) + (x6 * (-71825371336/30517578125))) + (x7 * (108233885856/30517578125))) + (x8 * (-4231022232/30517578125))) + (x9 * (-30743711144/30517578125))) + (x10 * (-31019406584/30517578125))) + (x11 * (196743294384/152587890625))) + (x12 * (-167196487344/30517578125))) + (x13 * (84545688872/30517578125))) + (x14 * (39195152528/30517578125)))
2 (3): exp = -24: floor_power2((((4069789500263667/500000000000000) * x0) + interval(-1.81252431656250014723e-07, 1.81252431656250014723e-07)))
3 (7): exp = -24: floor_power2((((-2300368983996033/1000000000000000) * x1) + interval(-4.02807003984375011165e-08, 4.02807003984375011165e-08)))
4 (9): exp = -24: floor_power2(((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + interval(-8.17579579808593798927e-07, 8.17579579808593798927e-07)))
5 (13): exp = -24: floor_power2((((-952765572948147/250000000000000) * x2) + interval(-4.41754295781250050183e-08, 4.41754295781250050183e-08)))
6 (15): exp = -24: floor_power2((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + interval(-1.45780145714062518629e-06, 1.45780145714062518629e-06)))
7 (19): exp = -24: floor_power2((((24136252216765897/10000000000000000) * x3) + interval(-1.86493380343750014285e-08, 1.86493380343750014285e-08)))
8 (21): exp = -24: floor_power2(((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + interval(-2.07249724292890673882e-06, 2.07249724292890673882e-06)))
9 (25): exp = -24: floor_power2((((-3930292426663769/1000000000000000) * x4) + interval(-5.87285883359375057068e-08, 5.87285883359375057068e-08)))
10 (27): exp = -24: floor_power2((((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + ((-3930292426663769/1000000000000000) * x4)) + interval(-3.20410943722187581878e-06, 3.20410943722187581878e-06)))
11 (31): exp = -24: floor_power2((((-6674615794248657/1000000000000000) * x5) + interval(-6.57366945625000119822e-08, 6.57366945625000119822e-08)))
12 (33): exp = -24: floor_power2(((((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + ((-3930292426663769/1000000000000000) * x4)) + ((-6674615794248657/1000000000000000) * x5)) + interval(-4.46193902729218889986e-06, 4.46193902729218889986e-06)))
13 (37): exp = -24: floor_power2((((-3251999686764889/500000000000000) * x6) + interval(-1.40283928390625010606e-07, 1.40283928390625010606e-07)))
14 (39): exp = -24: floor_power2((((((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + ((-3930292426663769/1000000000000000) * x4)) + ((-6674615794248657/1000000000000000) * x5)) + ((-3251999686764889/500000000000000) * x6)) + interval(-5.79431585119062704574e-06, 5.79431585119062704574e-06)))
15 (43): exp = -24: floor_power2((((15313778346372601/2000000000000000) * x7) + interval(-2.11394308312500020106e-07, 2.11394308312500020106e-07)))
16 (45): exp = -24: floor_power2(((((((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + ((-3930292426663769/1000000000000000) * x4)) + ((-6674615794248657/1000000000000000) * x5)) + ((-3251999686764889/500000000000000) * x6)) + ((15313778346372601/2000000000000000) * x7)) + interval(-8.15147737141718996289e-06, 8.15147737141718996289e-06)))
17 (49): exp = -24: floor_power2((((5626784793219439/1000000000000000) * x8) + interval(-8.26371529687500163075e-09, 8.26371529687500163075e-09)))
18 (51): exp = -24: floor_power2((((((((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + ((-3930292426663769/1000000000000000) * x4)) + ((-6674615794248657/1000000000000000) * x5)) + ((-3251999686764889/500000000000000) * x6)) + ((15313778346372601/2000000000000000) * x7)) + ((5626784793219439/1000000000000000) * x8)) + interval(-1.03055082986281283777e-05, 1.03055082986281283777e-05)))
19 (55): exp = -24: floor_power2((((3211748331564369/500000000000000) * x9) + interval(-6.00463108281250080006e-08, 6.00463108281250080006e-08)))
20 (57): exp = -24: floor_power2(((((((((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + ((-3930292426663769/1000000000000000) * x4)) + ((-6674615794248657/1000000000000000) * x5)) + ((-3251999686764889/500000000000000) * x6)) + ((15313778346372601/2000000000000000) * x7)) + ((5626784793219439/1000000000000000) * x8)) + ((3211748331564369/500000000000000) * x9)) + interval(-1.25113218213703162695e-05, 1.25113218213703162695e-05)))
21 (61): exp = -24: floor_power2((((5314099728080993/1000000000000000) * x10) + interval(-6.05847784843750082902e-08, 6.05847784843750082902e-08)))
22 (63): exp = -24: floor_power2((((((((((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + ((-3930292426663769/1000000000000000) * x4)) + ((-6674615794248657/1000000000000000) * x5)) + ((-3251999686764889/500000000000000) * x6)) + ((15313778346372601/2000000000000000) * x7)) + ((5626784793219439/1000000000000000) * x8)) + ((3211748331564369/500000000000000) * x9)) + ((5314099728080993/1000000000000000) * x10)) + interval(-1.47176738117687557763e-05, 1.47176738117687557763e-05)))
23 (67): exp = -24: floor_power2((((31691918757372157/5000000000000000) * x11) + interval(-7.68528493687500114667e-08, 7.68528493687500114667e-08)))
24 (69): exp = -24: floor_power2(((((((((((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + ((-3930292426663769/1000000000000000) * x4)) + ((-6674615794248657/1000000000000000) * x5)) + ((-3251999686764889/500000000000000) * x6)) + ((15313778346372601/2000000000000000) * x7)) + ((5626784793219439/1000000000000000) * x8)) + ((3211748331564369/500000000000000) * x9)) + ((5314099728080993/1000000000000000) * x10)) + ((31691918757372157/5000000000000000) * x11)) + interval(-1.69402938730515685789e-05, 1.69402938730515685789e-05)))
25 (73): exp = -24: floor_power2((((8824148805219263/1000000000000000) * x12) + interval(-3.26555639343750047657e-07, 3.26555639343750047657e-07)))
26 (75): exp = -24: floor_power2((((((((((((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + ((-3930292426663769/1000000000000000) * x4)) + ((-6674615794248657/1000000000000000) * x5)) + ((-3251999686764889/500000000000000) * x6)) + ((15313778346372601/2000000000000000) * x7)) + ((5626784793219439/1000000000000000) * x8)) + ((3211748331564369/500000000000000) * x9)) + ((5314099728080993/1000000000000000) * x10)) + ((31691918757372157/5000000000000000) * x11)) + ((8824148805219263/1000000000000000) * x12)) + interval(-2.15583839362234467500e-05, 2.15583839362234467500e-05)))
27 (79): exp = -24: floor_power2((((1758164327895539/250000000000000) * x13) + interval(-1.65128298578125017383e-07, 1.65128298578125017383e-07)))
28 (81): exp = -24: floor_power2(((((((((((((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + ((-3930292426663769/1000000000000000) * x4)) + ((-6674615794248657/1000000000000000) * x5)) + ((-3251999686764889/500000000000000) * x6)) + ((15313778346372601/2000000000000000) * x7)) + ((5626784793219439/1000000000000000) * x8)) + ((3211748331564369/500000000000000) * x9)) + ((5314099728080993/1000000000000000) * x10)) + ((31691918757372157/5000000000000000) * x11)) + ((8824148805219263/1000000000000000) * x12)) + ((1758164327895539/250000000000000) * x13)) + interval(-2.57766280795281366232e-05, 2.57766280795281366232e-05)))
29 (85): exp = -24: floor_power2((((-5462048454025581/1000000000000000) * x14) + interval(-7.65530322812500052559e-08, 7.65530322812500052559e-08)))
30 (87): exp = -24: floor_power2((((((((((((((((((4069789500263667/500000000000000) * x0) + ((-2300368983996033/1000000000000000) * x1)) + ((-952765572948147/250000000000000) * x2)) + ((24136252216765897/10000000000000000) * x3)) + ((-3930292426663769/1000000000000000) * x4)) + ((-6674615794248657/1000000000000000) * x5)) + ((-3251999686764889/500000000000000) * x6)) + ((15313778346372601/2000000000000000) * x7)) + ((5626784793219439/1000000000000000) * x8)) + ((3211748331564369/500000000000000) * x9)) + ((5314099728080993/1000000000000000) * x10)) + ((31691918757372157/5000000000000000) * x11)) + ((8824148805219263/1000000000000000) * x12)) + ((1758164327895539/250000000000000) * x13)) + ((-5462048454025581/1000000000000000) * x14)) + interval(-2.99062969565359480697e-05, 2.99062969565359480697e-05)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((4069789500263667/500000000000000)) * x0))
3: rnd32((rnd32((-2300368983996033/1000000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1))))
5: rnd32((rnd32((-952765572948147/250000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2))))
7: rnd32((rnd32((24136252216765897/10000000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3))))
9: rnd32((rnd32((-3930292426663769/1000000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3)))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * x4))))
11: rnd32((rnd32((-6674615794248657/1000000000000000)) * x5))
12: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3)))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * x4)))) + rnd32((rnd32((-6674615794248657/1000000000000000)) * x5))))
13: rnd32((rnd32((-3251999686764889/500000000000000)) * x6))
14: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3)))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * x4)))) + rnd32((rnd32((-6674615794248657/1000000000000000)) * x5)))) + rnd32((rnd32((-3251999686764889/500000000000000)) * x6))))
15: rnd32((rnd32((15313778346372601/2000000000000000)) * x7))
16: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3)))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * x4)))) + rnd32((rnd32((-6674615794248657/1000000000000000)) * x5)))) + rnd32((rnd32((-3251999686764889/500000000000000)) * x6)))) + rnd32((rnd32((15313778346372601/2000000000000000)) * x7))))
17: rnd32((rnd32((5626784793219439/1000000000000000)) * x8))
18: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3)))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * x4)))) + rnd32((rnd32((-6674615794248657/1000000000000000)) * x5)))) + rnd32((rnd32((-3251999686764889/500000000000000)) * x6)))) + rnd32((rnd32((15313778346372601/2000000000000000)) * x7)))) + rnd32((rnd32((5626784793219439/1000000000000000)) * x8))))
19: rnd32((rnd32((3211748331564369/500000000000000)) * x9))
20: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3)))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * x4)))) + rnd32((rnd32((-6674615794248657/1000000000000000)) * x5)))) + rnd32((rnd32((-3251999686764889/500000000000000)) * x6)))) + rnd32((rnd32((15313778346372601/2000000000000000)) * x7)))) + rnd32((rnd32((5626784793219439/1000000000000000)) * x8)))) + rnd32((rnd32((3211748331564369/500000000000000)) * x9))))
21: rnd32((rnd32((5314099728080993/1000000000000000)) * x10))
22: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3)))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * x4)))) + rnd32((rnd32((-6674615794248657/1000000000000000)) * x5)))) + rnd32((rnd32((-3251999686764889/500000000000000)) * x6)))) + rnd32((rnd32((15313778346372601/2000000000000000)) * x7)))) + rnd32((rnd32((5626784793219439/1000000000000000)) * x8)))) + rnd32((rnd32((3211748331564369/500000000000000)) * x9)))) + rnd32((rnd32((5314099728080993/1000000000000000)) * x10))))
23: rnd32((rnd32((31691918757372157/5000000000000000)) * x11))
24: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3)))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * x4)))) + rnd32((rnd32((-6674615794248657/1000000000000000)) * x5)))) + rnd32((rnd32((-3251999686764889/500000000000000)) * x6)))) + rnd32((rnd32((15313778346372601/2000000000000000)) * x7)))) + rnd32((rnd32((5626784793219439/1000000000000000)) * x8)))) + rnd32((rnd32((3211748331564369/500000000000000)) * x9)))) + rnd32((rnd32((5314099728080993/1000000000000000)) * x10)))) + rnd32((rnd32((31691918757372157/5000000000000000)) * x11))))
25: rnd32((rnd32((8824148805219263/1000000000000000)) * x12))
26: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3)))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * x4)))) + rnd32((rnd32((-6674615794248657/1000000000000000)) * x5)))) + rnd32((rnd32((-3251999686764889/500000000000000)) * x6)))) + rnd32((rnd32((15313778346372601/2000000000000000)) * x7)))) + rnd32((rnd32((5626784793219439/1000000000000000)) * x8)))) + rnd32((rnd32((3211748331564369/500000000000000)) * x9)))) + rnd32((rnd32((5314099728080993/1000000000000000)) * x10)))) + rnd32((rnd32((31691918757372157/5000000000000000)) * x11)))) + rnd32((rnd32((8824148805219263/1000000000000000)) * x12))))
27: rnd32((rnd32((1758164327895539/250000000000000)) * x13))
28: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3)))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * x4)))) + rnd32((rnd32((-6674615794248657/1000000000000000)) * x5)))) + rnd32((rnd32((-3251999686764889/500000000000000)) * x6)))) + rnd32((rnd32((15313778346372601/2000000000000000)) * x7)))) + rnd32((rnd32((5626784793219439/1000000000000000)) * x8)))) + rnd32((rnd32((3211748331564369/500000000000000)) * x9)))) + rnd32((rnd32((5314099728080993/1000000000000000)) * x10)))) + rnd32((rnd32((31691918757372157/5000000000000000)) * x11)))) + rnd32((rnd32((8824148805219263/1000000000000000)) * x12)))) + rnd32((rnd32((1758164327895539/250000000000000)) * x13))))
29: rnd32((rnd32((-5462048454025581/1000000000000000)) * x14))
30: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((4069789500263667/500000000000000)) * x0)) + rnd32((rnd32((-2300368983996033/1000000000000000)) * x1)))) + rnd32((rnd32((-952765572948147/250000000000000)) * x2)))) + rnd32((rnd32((24136252216765897/10000000000000000)) * x3)))) + rnd32((rnd32((-3930292426663769/1000000000000000)) * x4)))) + rnd32((rnd32((-6674615794248657/1000000000000000)) * x5)))) + rnd32((rnd32((-3251999686764889/500000000000000)) * x6)))) + rnd32((rnd32((15313778346372601/2000000000000000)) * x7)))) + rnd32((rnd32((5626784793219439/1000000000000000)) * x8)))) + rnd32((rnd32((3211748331564369/500000000000000)) * x9)))) + rnd32((rnd32((5314099728080993/1000000000000000)) * x10)))) + rnd32((rnd32((31691918757372157/5000000000000000)) * x11)))) + rnd32((rnd32((8824148805219263/1000000000000000)) * x12)))) + rnd32((rnd32((1758164327895539/250000000000000)) * x13)))) + rnd32((rnd32((-5462048454025581/1000000000000000)) * x14))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 1000000, max = 1000000): 1000000
min = -8.645205e+01 (lower_min = -7.996421e+01)
max = 8.645205e+01 (lower_max = 7.996421e+01)
subopt = 6.487841e+00 (7.5%)
bounds: [-8.645205e+01, 8.645205e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 2.958228e-30 (lower_min = 2.958228e-30)
max = 2.958228e-30 (lower_max = 2.958228e-30)
subopt = 0.000000e+00 (0.0%)
rmin(result = 2.958228e-30, lower = 2.958228e-30), rmax(result = 2.958228e-30, lower = 2.958228e-30)
-1: exp = -24: 2.958228e-30 (low = 2.958228e-30, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 1000000): 1000000
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 5.538839e+02 (lower_max = 3.101956e+02)
subopt = 2.436883e+02 (44.0%)
exact bound (exp = -24): 5.538839e+02 (low = 3.101956e+02, subopt = 44.0%)
total2: 1.763242e-37 (low = 1.763242e-37, subopt = 0.0%)
exact total: 3.301406e-05 (low = 1.848910e-05, subopt = 44.0%)

Elapsed time: 202.40572
Processing: exp33

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((-467764930355827/50000000000000)) * rnd32(x0))) + rnd32((rnd32((-4477180195806909/2000000000000000)) * rnd32(x1))))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * rnd32(x2))))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * rnd32(x3))))) + rnd32((rnd32((7497676058034859/1000000000000000)) * rnd32(x4))))) + rnd32((rnd32((2115298428275981/250000000000000)) * rnd32(x5))))) + rnd32((rnd32((9606658664005433/1000000000000000)) * rnd32(x6))))) + rnd32((rnd32((861278755548661/125000000000000)) * rnd32(x7))))) + rnd32((rnd32((-1031230628976247/250000000000000)) * rnd32(x8))))) + rnd32((rnd32((4318127679618291/500000000000000)) * rnd32(x9))))) + rnd32((rnd32((-1147833077546627/125000000000000)) * rnd32(x10))))) + rnd32((rnd32((2644824291658443/1000000000000000)) * rnd32(x11))))) + rnd32((rnd32((1664652292923683/200000000000000)) * rnd32(x12))))) + rnd32((rnd32((27762586286805053/10000000000000000)) * rnd32(x13))))) + rnd32((rnd32((-908517787985921/125000000000000)) * rnd32(x14)))))

Conservative bound: [-96.034515, 96.034515]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3)))) + rnd32((rnd32((7497676058034859/1000000000000000)) * x4)))) + rnd32((rnd32((2115298428275981/250000000000000)) * x5)))) + rnd32((rnd32((9606658664005433/1000000000000000)) * x6)))) + rnd32((rnd32((861278755548661/125000000000000)) * x7)))) + rnd32((rnd32((-1031230628976247/250000000000000)) * x8)))) + rnd32((rnd32((4318127679618291/500000000000000)) * x9)))) + rnd32((rnd32((-1147833077546627/125000000000000)) * x10)))) + rnd32((rnd32((2644824291658443/1000000000000000)) * x11)))) + rnd32((rnd32((1664652292923683/200000000000000)) * x12)))) + rnd32((rnd32((27762586286805053/10000000000000000)) * x13)))) + rnd32((rnd32((-908517787985921/125000000000000)) * x14))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (-467764930355827/50000000000000); err = (39818766304/6103515625)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-4477180195806909/2000000000000000); err = (-49071881204/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-6307886269679301/1000000000000000); err = (-74763302112/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-13602951095674367/5000000000000000); err = (-267625900904/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (7497676058034859/1000000000000000); err = (83120097808/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (2115298428275981/250000000000000); err = (-166547040912/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (9606658664005433/1000000000000000); err = (-139029218304/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (861278755548661/125000000000000); err = (-68835184544/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1031230628976247/250000000000000); err = (121075396144/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (4318127679618291/500000000000000); err = (48616629984/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1147833077546627/125000000000000); err = (128431515808/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (2644824291658443/1000000000000000); err = (12915060316/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1664652292923683/200000000000000); err = (20851925696/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (27762586286805053/10000000000000000); err = (-200616968932/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-908517787985921/125000000000000); err = (-41230957416/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((((((((((((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + ((7497676058034859/1000000000000000) * x4)) + ((2115298428275981/250000000000000) * x5)) + ((9606658664005433/1000000000000000) * x6)) + ((861278755548661/125000000000000) * x7)) + ((-1031230628976247/250000000000000) * x8)) + ((4318127679618291/500000000000000) * x9)) + ((-1147833077546627/125000000000000) * x10)) + ((2644824291658443/1000000000000000) * x11)) + ((1664652292923683/200000000000000) * x12)) + ((27762586286805053/10000000000000000) * x13)) + ((-908517787985921/125000000000000) * x14))
-1 (131): exp = -24: (15/5070602400912917605986812821504)
1 (1): exp = -24: (((((((((((((((x0 * (39818766304/6103515625)) + (x1 * (-49071881204/30517578125))) + (x2 * (-74763302112/30517578125))) + (x3 * (-267625900904/152587890625))) + (x4 * (83120097808/30517578125))) + (x5 * (-166547040912/30517578125))) + (x6 * (-139029218304/30517578125))) + (x7 * (-68835184544/30517578125))) + (x8 * (121075396144/30517578125))) + (x9 * (48616629984/30517578125))) + (x10 * (128431515808/30517578125))) + (x11 * (12915060316/30517578125))) + (x12 * (20851925696/6103515625))) + (x13 * (-200616968932/152587890625))) + (x14 * (-41230957416/30517578125)))
2 (3): exp = -24: floor_power2((((-467764930355827/50000000000000) * x0) + interval(-3.88855139687500007321e-07, 3.88855139687500007321e-07)))
3 (7): exp = -24: floor_power2((((-4477180195806909/2000000000000000) * x1) + interval(-9.58435179765625120172e-08, 9.58435179765625120172e-08)))
4 (9): exp = -24: floor_power2(((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + interval(-1.08074510541796895463e-06, 1.08074510541796895463e-06)))
5 (13): exp = -24: floor_power2((((-6307886269679301/1000000000000000) * x2) + interval(-1.46022074437500020752e-07, 1.46022074437500020752e-07)))
6 (15): exp = -24: floor_power2((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + interval(-1.94202291716015679302e-06, 1.94202291716015679302e-06)))
7 (19): exp = -24: floor_power2((((-13602951095674367/5000000000000000) * x3) + interval(-1.04541367540625003018e-07, 1.04541367540625003018e-07)))
8 (21): exp = -24: floor_power2(((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + interval(-3.11944789065781300633e-06, 3.11944789065781300633e-06)))
9 (25): exp = -24: floor_power2((((7497676058034859/1000000000000000) * x4) + interval(-1.62343941031250022054e-07, 1.62343941031250022054e-07)))
10 (27): exp = -24: floor_power2((((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + ((7497676058034859/1000000000000000) * x4)) + interval(-4.47388472719687653424e-06, 4.47388472719687653424e-06)))
11 (31): exp = -24: floor_power2((((2115298428275981/250000000000000) * x5) + interval(-3.25287189281250027889e-07, 3.25287189281250027889e-07)))
12 (33): exp = -24: floor_power2(((((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + ((7497676058034859/1000000000000000) * x4)) + ((2115298428275981/250000000000000) * x5)) + interval(-6.22968339108750214446e-06, 6.22968339108750214446e-06)))
13 (37): exp = -24: floor_power2((((9606658664005433/1000000000000000) * x6) + interval(-2.71541442000000050958e-07, 2.71541442000000050958e-07)))
14 (39): exp = -24: floor_power2((((((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + ((7497676058034859/1000000000000000) * x4)) + ((2115298428275981/250000000000000) * x5)) + ((9606658664005433/1000000000000000) * x6)) + interval(-8.88541062410312888948e-06, 8.88541062410312888948e-06)))
15 (43): exp = -24: floor_power2((((861278755548661/125000000000000) * x7) + interval(-1.34443719812500018620e-07, 1.34443719812500018620e-07)))
16 (45): exp = -24: floor_power2(((((((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + ((7497676058034859/1000000000000000) * x4)) + ((2115298428275981/250000000000000) * x5)) + ((9606658664005433/1000000000000000) * x6)) + ((861278755548661/125000000000000) * x7)) + interval(-1.11656215558296923081e-05, 1.11656215558296923081e-05)))
17 (49): exp = -24: floor_power2((((-1031230628976247/250000000000000) * x8) + interval(-2.36475383093750021440e-07, 2.36475383093750021440e-07)))
18 (51): exp = -24: floor_power2((((((((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + ((7497676058034859/1000000000000000) * x4)) + ((2115298428275981/250000000000000) * x5)) + ((9606658664005433/1000000000000000) * x6)) + ((861278755548661/125000000000000) * x7)) + ((-1031230628976247/250000000000000) * x8)) + interval(-1.35478641508375039295e-05, 1.35478641508375039295e-05)))
19 (55): exp = -24: floor_power2((((4318127679618291/500000000000000) * x9) + interval(-9.49543554375000033668e-08, 9.49543554375000033668e-08)))
20 (57): exp = -24: floor_power2(((((((((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + ((7497676058034859/1000000000000000) * x4)) + ((2115298428275981/250000000000000) * x5)) + ((9606658664005433/1000000000000000) * x6)) + ((861278755548661/125000000000000) * x7)) + ((-1031230628976247/250000000000000) * x8)) + ((4318127679618291/500000000000000) * x9)) + interval(-1.60270042972906329431e-05, 1.60270042972906329431e-05)))
21 (61): exp = -24: floor_power2((((-1147833077546627/125000000000000) * x10) + interval(-2.50842804312500042821e-07, 2.50842804312500042821e-07)))
22 (63): exp = -24: floor_power2((((((((((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + ((7497676058034859/1000000000000000) * x4)) + ((2115298428275981/250000000000000) * x5)) + ((9606658664005433/1000000000000000) * x6)) + ((861278755548661/125000000000000) * x7)) + ((-1031230628976247/250000000000000) * x8)) + ((4318127679618291/500000000000000) * x9)) + ((-1147833077546627/125000000000000) * x10)) + interval(-2.05693815254312589388e-05, 2.05693815254312589388e-05)))
23 (67): exp = -24: floor_power2((((2644824291658443/1000000000000000) * x11) + interval(-2.52247271796875030190e-08, 2.52247271796875030190e-08)))
24 (69): exp = -24: floor_power2(((((((((((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + ((7497676058034859/1000000000000000) * x4)) + ((2115298428275981/250000000000000) * x5)) + ((9606658664005433/1000000000000000) * x6)) + ((861278755548661/125000000000000) * x7)) + ((-1031230628976247/250000000000000) * x8)) + ((4318127679618291/500000000000000) * x9)) + ((-1147833077546627/125000000000000) * x10)) + ((2644824291658443/1000000000000000) * x11)) + interval(-2.45285128077867295513e-05, 2.45285128077867295513e-05)))
25 (73): exp = -24: floor_power2((((1664652292923683/200000000000000) * x12) + interval(-2.03632086875000017268e-07, 2.03632086875000017268e-07)))
26 (75): exp = -24: floor_power2((((((((((((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + ((7497676058034859/1000000000000000) * x4)) + ((2115298428275981/250000000000000) * x5)) + ((9606658664005433/1000000000000000) * x6)) + ((861278755548661/125000000000000) * x7)) + ((-1031230628976247/250000000000000) * x8)) + ((4318127679618291/500000000000000) * x9)) + ((-1147833077546627/125000000000000) * x10)) + ((2644824291658443/1000000000000000) * x11)) + ((1664652292923683/200000000000000) * x12)) + interval(-2.90236793184898537480e-05, 2.90236793184898537480e-05)))
27 (79): exp = -24: floor_power2((((27762586286805053/10000000000000000) * x13) + interval(-7.83660034890625029744e-08, 7.83660034890625029744e-08)))
28 (81): exp = -24: floor_power2(((((((((((((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + ((7497676058034859/1000000000000000) * x4)) + ((2115298428275981/250000000000000) * x5)) + ((9606658664005433/1000000000000000) * x6)) + ((861278755548661/125000000000000) * x7)) + ((-1031230628976247/250000000000000) * x8)) + ((4318127679618291/500000000000000) * x9)) + ((-1147833077546627/125000000000000) * x10)) + ((2644824291658443/1000000000000000) * x11)) + ((1664652292923683/200000000000000) * x12)) + ((27762586286805053/10000000000000000) * x13)) + interval(-3.30359518771546986789e-05, 3.30359518771546986789e-05)))
29 (85): exp = -24: floor_power2((((-908517787985921/125000000000000) * x14) + interval(-8.05292137031250118763e-08, 8.05292137031250118763e-08)))
30 (87): exp = -24: floor_power2((((((((((((((((((-467764930355827/50000000000000) * x0) + ((-4477180195806909/2000000000000000) * x1)) + ((-6307886269679301/1000000000000000) * x2)) + ((-13602951095674367/5000000000000000) * x3)) + ((7497676058034859/1000000000000000) * x4)) + ((2115298428275981/250000000000000) * x5)) + ((9606658664005433/1000000000000000) * x6)) + ((861278755548661/125000000000000) * x7)) + ((-1031230628976247/250000000000000) * x8)) + ((4318127679618291/500000000000000) * x9)) + ((-1147833077546627/125000000000000) * x10)) + ((2644824291658443/1000000000000000) * x11)) + ((1664652292923683/200000000000000) * x12)) + ((27762586286805053/10000000000000000) * x13)) + ((-908517787985921/125000000000000) * x14)) + interval(-3.71695969355843869320e-05, 3.71695969355843869320e-05)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((-467764930355827/50000000000000)) * x0))
3: rnd32((rnd32((-4477180195806909/2000000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1))))
5: rnd32((rnd32((-6307886269679301/1000000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2))))
7: rnd32((rnd32((-13602951095674367/5000000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3))))
9: rnd32((rnd32((7497676058034859/1000000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3)))) + rnd32((rnd32((7497676058034859/1000000000000000)) * x4))))
11: rnd32((rnd32((2115298428275981/250000000000000)) * x5))
12: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3)))) + rnd32((rnd32((7497676058034859/1000000000000000)) * x4)))) + rnd32((rnd32((2115298428275981/250000000000000)) * x5))))
13: rnd32((rnd32((9606658664005433/1000000000000000)) * x6))
14: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3)))) + rnd32((rnd32((7497676058034859/1000000000000000)) * x4)))) + rnd32((rnd32((2115298428275981/250000000000000)) * x5)))) + rnd32((rnd32((9606658664005433/1000000000000000)) * x6))))
15: rnd32((rnd32((861278755548661/125000000000000)) * x7))
16: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3)))) + rnd32((rnd32((7497676058034859/1000000000000000)) * x4)))) + rnd32((rnd32((2115298428275981/250000000000000)) * x5)))) + rnd32((rnd32((9606658664005433/1000000000000000)) * x6)))) + rnd32((rnd32((861278755548661/125000000000000)) * x7))))
17: rnd32((rnd32((-1031230628976247/250000000000000)) * x8))
18: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3)))) + rnd32((rnd32((7497676058034859/1000000000000000)) * x4)))) + rnd32((rnd32((2115298428275981/250000000000000)) * x5)))) + rnd32((rnd32((9606658664005433/1000000000000000)) * x6)))) + rnd32((rnd32((861278755548661/125000000000000)) * x7)))) + rnd32((rnd32((-1031230628976247/250000000000000)) * x8))))
19: rnd32((rnd32((4318127679618291/500000000000000)) * x9))
20: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3)))) + rnd32((rnd32((7497676058034859/1000000000000000)) * x4)))) + rnd32((rnd32((2115298428275981/250000000000000)) * x5)))) + rnd32((rnd32((9606658664005433/1000000000000000)) * x6)))) + rnd32((rnd32((861278755548661/125000000000000)) * x7)))) + rnd32((rnd32((-1031230628976247/250000000000000)) * x8)))) + rnd32((rnd32((4318127679618291/500000000000000)) * x9))))
21: rnd32((rnd32((-1147833077546627/125000000000000)) * x10))
22: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3)))) + rnd32((rnd32((7497676058034859/1000000000000000)) * x4)))) + rnd32((rnd32((2115298428275981/250000000000000)) * x5)))) + rnd32((rnd32((9606658664005433/1000000000000000)) * x6)))) + rnd32((rnd32((861278755548661/125000000000000)) * x7)))) + rnd32((rnd32((-1031230628976247/250000000000000)) * x8)))) + rnd32((rnd32((4318127679618291/500000000000000)) * x9)))) + rnd32((rnd32((-1147833077546627/125000000000000)) * x10))))
23: rnd32((rnd32((2644824291658443/1000000000000000)) * x11))
24: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3)))) + rnd32((rnd32((7497676058034859/1000000000000000)) * x4)))) + rnd32((rnd32((2115298428275981/250000000000000)) * x5)))) + rnd32((rnd32((9606658664005433/1000000000000000)) * x6)))) + rnd32((rnd32((861278755548661/125000000000000)) * x7)))) + rnd32((rnd32((-1031230628976247/250000000000000)) * x8)))) + rnd32((rnd32((4318127679618291/500000000000000)) * x9)))) + rnd32((rnd32((-1147833077546627/125000000000000)) * x10)))) + rnd32((rnd32((2644824291658443/1000000000000000)) * x11))))
25: rnd32((rnd32((1664652292923683/200000000000000)) * x12))
26: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3)))) + rnd32((rnd32((7497676058034859/1000000000000000)) * x4)))) + rnd32((rnd32((2115298428275981/250000000000000)) * x5)))) + rnd32((rnd32((9606658664005433/1000000000000000)) * x6)))) + rnd32((rnd32((861278755548661/125000000000000)) * x7)))) + rnd32((rnd32((-1031230628976247/250000000000000)) * x8)))) + rnd32((rnd32((4318127679618291/500000000000000)) * x9)))) + rnd32((rnd32((-1147833077546627/125000000000000)) * x10)))) + rnd32((rnd32((2644824291658443/1000000000000000)) * x11)))) + rnd32((rnd32((1664652292923683/200000000000000)) * x12))))
27: rnd32((rnd32((27762586286805053/10000000000000000)) * x13))
28: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3)))) + rnd32((rnd32((7497676058034859/1000000000000000)) * x4)))) + rnd32((rnd32((2115298428275981/250000000000000)) * x5)))) + rnd32((rnd32((9606658664005433/1000000000000000)) * x6)))) + rnd32((rnd32((861278755548661/125000000000000)) * x7)))) + rnd32((rnd32((-1031230628976247/250000000000000)) * x8)))) + rnd32((rnd32((4318127679618291/500000000000000)) * x9)))) + rnd32((rnd32((-1147833077546627/125000000000000)) * x10)))) + rnd32((rnd32((2644824291658443/1000000000000000)) * x11)))) + rnd32((rnd32((1664652292923683/200000000000000)) * x12)))) + rnd32((rnd32((27762586286805053/10000000000000000)) * x13))))
29: rnd32((rnd32((-908517787985921/125000000000000)) * x14))
30: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-467764930355827/50000000000000)) * x0)) + rnd32((rnd32((-4477180195806909/2000000000000000)) * x1)))) + rnd32((rnd32((-6307886269679301/1000000000000000)) * x2)))) + rnd32((rnd32((-13602951095674367/5000000000000000)) * x3)))) + rnd32((rnd32((7497676058034859/1000000000000000)) * x4)))) + rnd32((rnd32((2115298428275981/250000000000000)) * x5)))) + rnd32((rnd32((9606658664005433/1000000000000000)) * x6)))) + rnd32((rnd32((861278755548661/125000000000000)) * x7)))) + rnd32((rnd32((-1031230628976247/250000000000000)) * x8)))) + rnd32((rnd32((4318127679618291/500000000000000)) * x9)))) + rnd32((rnd32((-1147833077546627/125000000000000)) * x10)))) + rnd32((rnd32((2644824291658443/1000000000000000)) * x11)))) + rnd32((rnd32((1664652292923683/200000000000000)) * x12)))) + rnd32((rnd32((27762586286805053/10000000000000000)) * x13)))) + rnd32((rnd32((-908517787985921/125000000000000)) * x14))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 1000000, max = 1000000): 1000000
min = -9.603445e+01 (lower_min = -6.861627e+01)
max = 9.603445e+01 (lower_max = 6.861627e+01)
subopt = 2.741818e+01 (28.6%)
bounds: [-9.603445e+01, 9.603445e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 2.958228e-30 (lower_min = 2.958228e-30)
max = 2.958228e-30 (lower_max = 2.958228e-30)
subopt = 0.000000e+00 (0.0%)
rmin(result = 2.958228e-30, lower = 2.958228e-30), rmax(result = 2.958228e-30, lower = 2.958228e-30)
-1: exp = -24: 2.958228e-30 (low = 2.958228e-30, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 1000000): 1000000
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 6.774739e+02 (lower_max = 3.460070e+02)
subopt = 3.314669e+02 (48.9%)
exact bound (exp = -24): 6.774739e+02 (low = 3.460070e+02, subopt = 48.9%)
total2: 1.763242e-37 (low = 1.763242e-37, subopt = 0.0%)
exact total: 4.038059e-05 (low = 2.062362e-05, subopt = 48.9%)

Elapsed time: 209.11141
Processing: exp34

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((5500150675535771/1000000000000000)) * rnd32(x0))) + rnd32((rnd32((-1320279542375871/250000000000000)) * rnd32(x1))))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * rnd32(x2))))) + rnd32((rnd32((-1519680719864701/250000000000000)) * rnd32(x3))))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * rnd32(x4))))) + rnd32((rnd32((-5711040965435723/5000000000000000)) * rnd32(x5))))) + rnd32((rnd32((-9598640770688359/1000000000000000)) * rnd32(x6))))) + rnd32((rnd32((420609288095509/2000000000000000)) * rnd32(x7))))) + rnd32((rnd32((15464372313221567/2000000000000000)) * rnd32(x8))))) + rnd32((rnd32((2472783269284073/250000000000000)) * rnd32(x9))))) + rnd32((rnd32((2910987077068473/2000000000000000)) * rnd32(x10))))) + rnd32((rnd32((59310929189039/8000000000000)) * rnd32(x11))))) + rnd32((rnd32((5078925940961231/1000000000000000)) * rnd32(x12))))) + rnd32((rnd32((-795214842879323/200000000000000)) * rnd32(x13))))) + rnd32((rnd32((-8241871332084953/1000000000000000)) * rnd32(x14)))))

Conservative bound: [-78.487069, 78.487069]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3)))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * x4)))) + rnd32((rnd32((-5711040965435723/5000000000000000)) * x5)))) + rnd32((rnd32((-9598640770688359/1000000000000000)) * x6)))) + rnd32((rnd32((420609288095509/2000000000000000)) * x7)))) + rnd32((rnd32((15464372313221567/2000000000000000)) * x8)))) + rnd32((rnd32((2472783269284073/250000000000000)) * x9)))) + rnd32((rnd32((2910987077068473/2000000000000000)) * x10)))) + rnd32((rnd32((59310929189039/8000000000000)) * x11)))) + rnd32((rnd32((5078925940961231/1000000000000000)) * x12)))) + rnd32((rnd32((-795214842879323/200000000000000)) * x13)))) + rnd32((rnd32((-8241871332084953/1000000000000000)) * x14))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (5500150675535771/1000000000000000); err = (-2563185248/30517578125)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1320279542375871/250000000000000); err = (114401716192/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-8533238434522321/10000000000000000); err = (-67069745426/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1519680719864701/250000000000000); err = (38060842352/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-6033000513619893/1000000000000000); err = (-22739010216/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-5711040965435723/5000000000000000); err = (65247691074/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-9598640770688359/1000000000000000); err = (-168342439808/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (420609288095509/2000000000000000); err = (-3723615017/61035156250)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (15464372313221567/2000000000000000); err = (-82346528848/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (2472783269284073/250000000000000); err = (-118412468496/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (2910987077068473/2000000000000000); err = (-15790002162/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (59310929189039/8000000000000); err = (432287968/244140625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (5078925940961231/1000000000000000); err = (-74477849728/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-795214842879323/200000000000000); err = (445786624/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-8241871332084953/1000000000000000); err = (-231402495936/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((((((((((((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + ((-6033000513619893/1000000000000000) * x4)) + ((-5711040965435723/5000000000000000) * x5)) + ((-9598640770688359/1000000000000000) * x6)) + ((420609288095509/2000000000000000) * x7)) + ((15464372313221567/2000000000000000) * x8)) + ((2472783269284073/250000000000000) * x9)) + ((2910987077068473/2000000000000000) * x10)) + ((59310929189039/8000000000000) * x11)) + ((5078925940961231/1000000000000000) * x12)) + ((-795214842879323/200000000000000) * x13)) + ((-8241871332084953/1000000000000000) * x14))
-1 (131): exp = -24: (15/5070602400912917605986812821504)
1 (1): exp = -24: (((((((((((((((x0 * (-2563185248/30517578125)) + (x1 * (114401716192/30517578125))) + (x2 * (-67069745426/152587890625))) + (x3 * (38060842352/30517578125))) + (x4 * (-22739010216/30517578125))) + (x5 * (65247691074/152587890625))) + (x6 * (-168342439808/30517578125))) + (x7 * (-3723615017/61035156250))) + (x8 * (-82346528848/30517578125))) + (x9 * (-118412468496/30517578125))) + (x10 * (-15790002162/30517578125))) + (x11 * (432287968/244140625))) + (x12 * (-74477849728/30517578125))) + (x13 * (445786624/6103515625))) + (x14 * (-231402495936/30517578125)))
2 (3): exp = -24: floor_power2((((5500150675535771/1000000000000000) * x0) + interval(-5.00622118750000028176e-09, 5.00622118750000028176e-09)))
3 (7): exp = -24: floor_power2((((-1320279542375871/250000000000000) * x1) + interval(-2.23440851937500020899e-07, 2.23440851937500020899e-07)))
4 (9): exp = -24: floor_power2(((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + interval(-7.05284231328125127060e-07, 7.05284231328125127060e-07)))
5 (13): exp = -24: floor_power2((((-8533238434522321/10000000000000000) * x2) + interval(-2.61991193070312521155e-08, 2.61991193070312521155e-08)))
6 (15): exp = -24: floor_power2((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + interval(-1.23812283122597692659e-06, 1.23812283122597692659e-06)))
7 (19): exp = -24: floor_power2((((-1519680719864701/250000000000000) * x3) + interval(-7.43375827187500119757e-08, 7.43375827187500119757e-08)))
8 (21): exp = -24: floor_power2(((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + interval(-2.02771615124941469003e-06, 2.02771615124941469003e-06)))
9 (25): exp = -24: floor_power2((((-6033000513619893/1000000000000000) * x4) + interval(-4.44121293281250051655e-08, 4.44121293281250051655e-08)))
10 (27): exp = -24: floor_power2((((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + ((-6033000513619893/1000000000000000) * x4)) + interval(-3.26422117608535230108e-06, 3.26422117608535230108e-06)))
11 (31): exp = -24: floor_power2((((-5711040965435723/5000000000000000) * x5) + interval(-2.54873793257812529849e-08, 2.54873793257812529849e-08)))
12 (33): exp = -24: floor_power2(((((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + ((-6033000513619893/1000000000000000) * x4)) + ((-5711040965435723/5000000000000000) * x5)) + interval(-4.30298751659277415259e-06, 4.30298751659277415259e-06)))
13 (37): exp = -24: floor_power2((((-9598640770688359/1000000000000000) * x6) + interval(-3.28793827750000009721e-07, 3.28793827750000009721e-07)))
14 (39): exp = -24: floor_power2((((((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + ((-6033000513619893/1000000000000000) * x4)) + ((-5711040965435723/5000000000000000) * x5)) + ((-9598640770688359/1000000000000000) * x6)) + interval(-6.06229281895215096226e-06, 6.06229281895215096226e-06)))
15 (43): exp = -24: floor_power2((((420609288095509/2000000000000000) * x7) + interval(-3.63634279003906287819e-09, 3.63634279003906287819e-09)))
16 (45): exp = -24: floor_power2(((((((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + ((-6033000513619893/1000000000000000) * x4)) + ((-5711040965435723/5000000000000000) * x5)) + ((-9598640770688359/1000000000000000) * x6)) + ((420609288095509/2000000000000000) * x7)) + interval(-7.98072837515161360718e-06, 7.98072837515161360718e-06)))
17 (49): exp = -24: floor_power2((((15464372313221567/2000000000000000) * x8) + interval(-1.60833064156250012650e-07, 1.60833064156250012650e-07)))
18 (51): exp = -24: floor_power2((((((((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + ((-6033000513619893/1000000000000000) * x4)) + ((-5711040965435723/5000000000000000) * x5)) + ((-9598640770688359/1000000000000000) * x6)) + ((420609288095509/2000000000000000) * x7)) + ((15464372313221567/2000000000000000) * x8)) + interval(-1.02873286512219273110e-05, 1.02873286512219273110e-05)))
19 (55): exp = -24: floor_power2((((2472783269284073/250000000000000) * x9) + interval(-2.31274352531250001844e-07, 2.31274352531250001844e-07)))
20 (57): exp = -24: floor_power2(((((((((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + ((-6033000513619893/1000000000000000) * x4)) + ((-5711040965435723/5000000000000000) * x5)) + ((-9598640770688359/1000000000000000) * x6)) + ((420609288095509/2000000000000000) * x7)) + ((15464372313221567/2000000000000000) * x8)) + ((2472783269284073/250000000000000) * x9)) + interval(-1.29027887947688036892e-05, 1.29027887947688036892e-05)))
21 (61): exp = -24: floor_power2((((2910987077068473/2000000000000000) * x10) + interval(-3.08398479726562558364e-08, 3.08398479726562558364e-08)))
22 (63): exp = -24: floor_power2((((((((((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + ((-6033000513619893/1000000000000000) * x4)) + ((-5711040965435723/5000000000000000) * x5)) + ((-9598640770688359/1000000000000000) * x6)) + ((420609288095509/2000000000000000) * x7)) + ((15464372313221567/2000000000000000) * x8)) + ((2472783269284073/250000000000000) * x9)) + ((2910987077068473/2000000000000000) * x10)) + interval(-1.49005819203293515693e-05, 1.49005819203293515693e-05)))
23 (67): exp = -24: floor_power2((((59310929189039/8000000000000) * x11) + interval(-1.05539054687500009393e-07, 1.05539054687500009393e-07)))
24 (69): exp = -24: floor_power2(((((((((((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + ((-6033000513619893/1000000000000000) * x4)) + ((-5711040965435723/5000000000000000) * x5)) + ((-9598640770688359/1000000000000000) * x6)) + ((420609288095509/2000000000000000) * x7)) + ((15464372313221567/2000000000000000) * x8)) + ((2472783269284073/250000000000000) * x9)) + ((2910987077068473/2000000000000000) * x10)) + ((59310929189039/8000000000000) * x11)) + interval(-1.71518881869309165007e-05, 1.71518881869309165007e-05)))
25 (73): exp = -24: floor_power2((((5078925940961231/1000000000000000) * x12) + interval(-1.45464550250000022153e-07, 1.45464550250000022153e-07)))
26 (75): exp = -24: floor_power2((((((((((((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + ((-6033000513619893/1000000000000000) * x4)) + ((-5711040965435723/5000000000000000) * x5)) + ((-9598640770688359/1000000000000000) * x6)) + ((420609288095509/2000000000000000) * x7)) + ((15464372313221567/2000000000000000) * x8)) + ((2472783269284073/250000000000000) * x9)) + ((2910987077068473/2000000000000000) * x10)) + ((59310929189039/8000000000000) * x11)) + ((5078925940961231/1000000000000000) * x12)) + interval(-1.94431199490949783082e-05, 1.94431199490949783082e-05)))
27 (79): exp = -24: floor_power2((((-795214842879323/200000000000000) * x13) + interval(-4.35338500000000047172e-09, 4.35338500000000047172e-09)))
28 (81): exp = -24: floor_power2(((((((((((((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + ((-6033000513619893/1000000000000000) * x4)) + ((-5711040965435723/5000000000000000) * x5)) + ((-9598640770688359/1000000000000000) * x6)) + ((420609288095509/2000000000000000) * x7)) + ((15464372313221567/2000000000000000) * x8)) + ((2472783269284073/250000000000000) * x9)) + ((2910987077068473/2000000000000000) * x10)) + ((59310929189039/8000000000000) * x11)) + ((5078925940961231/1000000000000000) * x12)) + ((-795214842879323/200000000000000) * x13)) + interval(-2.33813798892707588233e-05, 2.33813798892707588233e-05)))
29 (85): exp = -24: floor_power2((((-8241871332084953/1000000000000000) * x14) + interval(-4.51957999875000042112e-07, 4.51957999875000042112e-07)))
30 (87): exp = -24: floor_power2((((((((((((((((((5500150675535771/1000000000000000) * x0) + ((-1320279542375871/250000000000000) * x1)) + ((-8533238434522321/10000000000000000) * x2)) + ((-1519680719864701/250000000000000) * x3)) + ((-6033000513619893/1000000000000000) * x4)) + ((-5711040965435723/5000000000000000) * x5)) + ((-9598640770688359/1000000000000000) * x6)) + ((420609288095509/2000000000000000) * x7)) + ((15464372313221567/2000000000000000) * x8)) + ((2472783269284073/250000000000000) * x9)) + ((2910987077068473/2000000000000000) * x10)) + ((59310929189039/8000000000000) * x11)) + ((5078925940961231/1000000000000000) * x12)) + ((-795214842879323/200000000000000) * x13)) + ((-8241871332084953/1000000000000000) * x14)) + interval(-2.81248723129738890535e-05, 2.81248723129738890535e-05)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((5500150675535771/1000000000000000)) * x0))
3: rnd32((rnd32((-1320279542375871/250000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1))))
5: rnd32((rnd32((-8533238434522321/10000000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2))))
7: rnd32((rnd32((-1519680719864701/250000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3))))
9: rnd32((rnd32((-6033000513619893/1000000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3)))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * x4))))
11: rnd32((rnd32((-5711040965435723/5000000000000000)) * x5))
12: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3)))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * x4)))) + rnd32((rnd32((-5711040965435723/5000000000000000)) * x5))))
13: rnd32((rnd32((-9598640770688359/1000000000000000)) * x6))
14: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3)))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * x4)))) + rnd32((rnd32((-5711040965435723/5000000000000000)) * x5)))) + rnd32((rnd32((-9598640770688359/1000000000000000)) * x6))))
15: rnd32((rnd32((420609288095509/2000000000000000)) * x7))
16: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3)))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * x4)))) + rnd32((rnd32((-5711040965435723/5000000000000000)) * x5)))) + rnd32((rnd32((-9598640770688359/1000000000000000)) * x6)))) + rnd32((rnd32((420609288095509/2000000000000000)) * x7))))
17: rnd32((rnd32((15464372313221567/2000000000000000)) * x8))
18: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3)))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * x4)))) + rnd32((rnd32((-5711040965435723/5000000000000000)) * x5)))) + rnd32((rnd32((-9598640770688359/1000000000000000)) * x6)))) + rnd32((rnd32((420609288095509/2000000000000000)) * x7)))) + rnd32((rnd32((15464372313221567/2000000000000000)) * x8))))
19: rnd32((rnd32((2472783269284073/250000000000000)) * x9))
20: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3)))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * x4)))) + rnd32((rnd32((-5711040965435723/5000000000000000)) * x5)))) + rnd32((rnd32((-9598640770688359/1000000000000000)) * x6)))) + rnd32((rnd32((420609288095509/2000000000000000)) * x7)))) + rnd32((rnd32((15464372313221567/2000000000000000)) * x8)))) + rnd32((rnd32((2472783269284073/250000000000000)) * x9))))
21: rnd32((rnd32((2910987077068473/2000000000000000)) * x10))
22: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3)))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * x4)))) + rnd32((rnd32((-5711040965435723/5000000000000000)) * x5)))) + rnd32((rnd32((-9598640770688359/1000000000000000)) * x6)))) + rnd32((rnd32((420609288095509/2000000000000000)) * x7)))) + rnd32((rnd32((15464372313221567/2000000000000000)) * x8)))) + rnd32((rnd32((2472783269284073/250000000000000)) * x9)))) + rnd32((rnd32((2910987077068473/2000000000000000)) * x10))))
23: rnd32((rnd32((59310929189039/8000000000000)) * x11))
24: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3)))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * x4)))) + rnd32((rnd32((-5711040965435723/5000000000000000)) * x5)))) + rnd32((rnd32((-9598640770688359/1000000000000000)) * x6)))) + rnd32((rnd32((420609288095509/2000000000000000)) * x7)))) + rnd32((rnd32((15464372313221567/2000000000000000)) * x8)))) + rnd32((rnd32((2472783269284073/250000000000000)) * x9)))) + rnd32((rnd32((2910987077068473/2000000000000000)) * x10)))) + rnd32((rnd32((59310929189039/8000000000000)) * x11))))
25: rnd32((rnd32((5078925940961231/1000000000000000)) * x12))
26: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3)))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * x4)))) + rnd32((rnd32((-5711040965435723/5000000000000000)) * x5)))) + rnd32((rnd32((-9598640770688359/1000000000000000)) * x6)))) + rnd32((rnd32((420609288095509/2000000000000000)) * x7)))) + rnd32((rnd32((15464372313221567/2000000000000000)) * x8)))) + rnd32((rnd32((2472783269284073/250000000000000)) * x9)))) + rnd32((rnd32((2910987077068473/2000000000000000)) * x10)))) + rnd32((rnd32((59310929189039/8000000000000)) * x11)))) + rnd32((rnd32((5078925940961231/1000000000000000)) * x12))))
27: rnd32((rnd32((-795214842879323/200000000000000)) * x13))
28: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3)))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * x4)))) + rnd32((rnd32((-5711040965435723/5000000000000000)) * x5)))) + rnd32((rnd32((-9598640770688359/1000000000000000)) * x6)))) + rnd32((rnd32((420609288095509/2000000000000000)) * x7)))) + rnd32((rnd32((15464372313221567/2000000000000000)) * x8)))) + rnd32((rnd32((2472783269284073/250000000000000)) * x9)))) + rnd32((rnd32((2910987077068473/2000000000000000)) * x10)))) + rnd32((rnd32((59310929189039/8000000000000)) * x11)))) + rnd32((rnd32((5078925940961231/1000000000000000)) * x12)))) + rnd32((rnd32((-795214842879323/200000000000000)) * x13))))
29: rnd32((rnd32((-8241871332084953/1000000000000000)) * x14))
30: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((5500150675535771/1000000000000000)) * x0)) + rnd32((rnd32((-1320279542375871/250000000000000)) * x1)))) + rnd32((rnd32((-8533238434522321/10000000000000000)) * x2)))) + rnd32((rnd32((-1519680719864701/250000000000000)) * x3)))) + rnd32((rnd32((-6033000513619893/1000000000000000)) * x4)))) + rnd32((rnd32((-5711040965435723/5000000000000000)) * x5)))) + rnd32((rnd32((-9598640770688359/1000000000000000)) * x6)))) + rnd32((rnd32((420609288095509/2000000000000000)) * x7)))) + rnd32((rnd32((15464372313221567/2000000000000000)) * x8)))) + rnd32((rnd32((2472783269284073/250000000000000)) * x9)))) + rnd32((rnd32((2910987077068473/2000000000000000)) * x10)))) + rnd32((rnd32((59310929189039/8000000000000)) * x11)))) + rnd32((rnd32((5078925940961231/1000000000000000)) * x12)))) + rnd32((rnd32((-795214842879323/200000000000000)) * x13)))) + rnd32((rnd32((-8241871332084953/1000000000000000)) * x14))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 1000000, max = 1000000): 1000000
min = -7.848702e+01 (lower_min = -5.709591e+01)
max = 7.848702e+01 (lower_max = 5.709591e+01)
subopt = 2.139111e+01 (27.3%)
bounds: [-7.848702e+01, 7.848702e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 2.958228e-30 (lower_min = 2.958228e-30)
max = 2.958228e-30 (lower_max = 2.958228e-30)
subopt = 0.000000e+00 (0.0%)
rmin(result = 2.958228e-30, lower = 2.958228e-30), rmax(result = 2.958228e-30, lower = 2.958228e-30)
-1: exp = -24: 2.958228e-30 (low = 2.958228e-30, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 1000000): 1000000
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 5.269397e+02 (lower_max = 3.401000e+02)
subopt = 1.868397e+02 (35.5%)
exact bound (exp = -24): 5.269397e+02 (low = 3.401000e+02, subopt = 35.5%)
total2: 1.763242e-37 (low = 1.763242e-37, subopt = 0.0%)
exact total: 3.140806e-05 (low = 2.027154e-05, subopt = 35.5%)

Elapsed time: 205.11181
Processing: exp35

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((-1058634021620663/312500000000000)) * rnd32(x0))) + rnd32((rnd32((58189846665001/25000000000000)) * rnd32(x1))))) + rnd32((rnd32((2047685781020883/250000000000000)) * rnd32(x2))))) + rnd32((rnd32((6322804980693327/1000000000000000)) * rnd32(x3))))) + rnd32((rnd32((149668693420641/40000000000000)) * rnd32(x4))))) + rnd32((rnd32((4962445278764287/2500000000000000)) * rnd32(x5))))) + rnd32((rnd32((-12672260182286541/2000000000000000)) * rnd32(x6))))) + rnd32((rnd32((-2220198069228987/5000000000000000)) * rnd32(x7))))) + rnd32((rnd32((-4890835097165249/500000000000000)) * rnd32(x8))))) + rnd32((rnd32((5638312771157189/1000000000000000)) * rnd32(x9))))) + rnd32((rnd32((-3409155358232237/1000000000000000)) * rnd32(x10))))) + rnd32((rnd32((-8452878970167681/1000000000000000)) * rnd32(x11))))) + rnd32((rnd32((2595578807214263/1000000000000000)) * rnd32(x12))))) + rnd32((rnd32((-8876804072775819/5000000000000000)) * rnd32(x13))))) + rnd32((rnd32((1141982309128323/200000000000000)) * rnd32(x14)))))

Conservative bound: [-70.098550, 70.098550]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3)))) + rnd32((rnd32((149668693420641/40000000000000)) * x4)))) + rnd32((rnd32((4962445278764287/2500000000000000)) * x5)))) + rnd32((rnd32((-12672260182286541/2000000000000000)) * x6)))) + rnd32((rnd32((-2220198069228987/5000000000000000)) * x7)))) + rnd32((rnd32((-4890835097165249/500000000000000)) * x8)))) + rnd32((rnd32((5638312771157189/1000000000000000)) * x9)))) + rnd32((rnd32((-3409155358232237/1000000000000000)) * x10)))) + rnd32((rnd32((-8452878970167681/1000000000000000)) * x11)))) + rnd32((rnd32((2595578807214263/1000000000000000)) * x12)))) + rnd32((rnd32((-8876804072775819/5000000000000000)) * x13)))) + rnd32((rnd32((1141982309128323/200000000000000)) * x14))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1058634021620663/312500000000000); err = (-193202408796/152587890625)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (58189846665001/25000000000000); err = (6471094096/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (2047685781020883/250000000000000); err = (-165000481616/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (6322804980693327/1000000000000000); err = (27068108424/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (149668693420641/40000000000000); err = (-62381808/1220703125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (4962445278764287/2500000000000000); err = (81177286138/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-12672260182286541/2000000000000000); err = (26147145504/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2220198069228987/5000000000000000); err = (-4286967063/305175781250)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-4890835097165249/500000000000000); err = (192534035024/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (5638312771157189/1000000000000000); err = (-23276894232/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-3409155358232237/1000000000000000); err = (5413219656/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-8452878970167681/1000000000000000); err = (-9288352672/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (2595578807214263/1000000000000000); err = (-52073484844/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-8876804072775819/5000000000000000); err = (20793468172/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1141982309128323/200000000000000); err = (20398701376/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((((((((((((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + ((149668693420641/40000000000000) * x4)) + ((4962445278764287/2500000000000000) * x5)) + ((-12672260182286541/2000000000000000) * x6)) + ((-2220198069228987/5000000000000000) * x7)) + ((-4890835097165249/500000000000000) * x8)) + ((5638312771157189/1000000000000000) * x9)) + ((-3409155358232237/1000000000000000) * x10)) + ((-8452878970167681/1000000000000000) * x11)) + ((2595578807214263/1000000000000000) * x12)) + ((-8876804072775819/5000000000000000) * x13)) + ((1141982309128323/200000000000000) * x14))
-1 (131): exp = -24: (15/5070602400912917605986812821504)
1 (1): exp = -24: (((((((((((((((x0 * (-193202408796/152587890625)) + (x1 * (6471094096/6103515625))) + (x2 * (-165000481616/30517578125))) + (x3 * (27068108424/30517578125))) + (x4 * (-62381808/1220703125))) + (x5 * (81177286138/152587890625))) + (x6 * (26147145504/30517578125))) + (x7 * (-4286967063/305175781250))) + (x8 * (192534035024/30517578125))) + (x9 * (-23276894232/30517578125))) + (x10 * (5413219656/30517578125))) + (x11 * (-9288352672/30517578125))) + (x12 * (-52073484844/30517578125))) + (x13 * (20793468172/152587890625))) + (x14 * (20398701376/6103515625)))
2 (3): exp = -24: floor_power2((((-1058634021620663/312500000000000) * x0) + interval(-7.54696909359375127588e-08, 7.54696909359375127588e-08)))
3 (7): exp = -24: floor_power2((((58189846665001/25000000000000) * x1) + interval(-6.31942782812500035570e-08, 6.31942782812500035570e-08)))
4 (9): exp = -24: floor_power2(((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + interval(-3.77082548318750056020e-07, 3.77082548318750056020e-07)))
5 (13): exp = -24: floor_power2((((2047685781020883/250000000000000) * x2) + interval(-3.22266565656250019022e-07, 3.22266565656250019022e-07)))
6 (15): exp = -24: floor_power2((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + interval(-1.41460485127968826326e-06, 1.41460485127968826326e-06)))
7 (19): exp = -24: floor_power2((((6322804980693327/1000000000000000) * x3) + interval(-5.28673992656250035971e-08, 5.28673992656250035971e-08)))
8 (21): exp = -24: floor_power2(((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + interval(-2.18272798785000123008e-06, 2.18272798785000123008e-06)))
9 (25): exp = -24: floor_power2((((149668693420641/40000000000000) * x4) + interval(-3.04598671875000024041e-09, 3.04598671875000024041e-09)))
10 (27): exp = -24: floor_power2((((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + ((149668693420641/40000000000000) * x4)) + interval(-3.25865758052578224953e-06, 3.25865758052578224953e-06)))
11 (31): exp = -24: floor_power2((((4962445278764287/2500000000000000) * x5) + interval(-3.17098773976562545605e-08, 3.17098773976562545605e-08)))
12 (33): exp = -24: floor_power2(((((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + ((149668693420641/40000000000000) * x4)) + ((4962445278764287/2500000000000000) * x5)) + interval(-4.30364641910507920850e-06, 4.30364641910507920850e-06)))
13 (37): exp = -24: floor_power2((((-12672260182286541/2000000000000000) * x6) + interval(-5.10686435625000029500e-08, 5.10686435625000029500e-08)))
14 (39): exp = -24: floor_power2((((((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + ((149668693420641/40000000000000) * x4)) + ((4962445278764287/2500000000000000) * x5)) + ((-12672260182286541/2000000000000000) * x6)) + interval(-5.54680795817539198938e-06, 5.54680795817539198938e-06)))
15 (43): exp = -24: floor_power2((((-2220198069228987/5000000000000000) * x7) + interval(-8.37298254492187592908e-10, 8.37298254492187592908e-10)))
16 (45): exp = -24: floor_power2(((((((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + ((149668693420641/40000000000000) * x4)) + ((4962445278764287/2500000000000000) * x5)) + ((-12672260182286541/2000000000000000) * x6)) + ((-2220198069228987/5000000000000000) * x7)) + interval(-7.46989505043623201004e-06, 7.46989505043623201004e-06)))
17 (49): exp = -24: floor_power2((((-4890835097165249/500000000000000) * x8) + interval(-3.76043037156250026635e-07, 3.76043037156250026635e-07)))
18 (51): exp = -24: floor_power2((((((((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + ((149668693420641/40000000000000) * x4)) + ((4962445278764287/2500000000000000) * x5)) + ((-12672260182286541/2000000000000000) * x6)) + ((-2220198069228987/5000000000000000) * x7)) + ((-4890835097165249/500000000000000) * x8)) + interval(-1.02301238786081096307e-05, 1.02301238786081096307e-05)))
19 (55): exp = -24: floor_power2((((5638312771157189/1000000000000000) * x9) + interval(-4.54626840468750018684e-08, 4.54626840468750018684e-08)))
20 (57): exp = -24: floor_power2(((((((((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + ((149668693420641/40000000000000) * x4)) + ((4962445278764287/2500000000000000) * x5)) + ((-12672260182286541/2000000000000000) * x6)) + ((-2220198069228987/5000000000000000) * x7)) + ((-4890835097165249/500000000000000) * x8)) + ((5638312771157189/1000000000000000) * x9)) + interval(-1.24213537745690473377e-05, 1.24213537745690473377e-05)))
21 (61): exp = -24: floor_power2((((-3409155358232237/1000000000000000) * x10) + interval(-1.05726946406250005143e-08, 1.05726946406250005143e-08)))
22 (63): exp = -24: floor_power2((((((((((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + ((149668693420641/40000000000000) * x4)) + ((4962445278764287/2500000000000000) * x5)) + ((-12672260182286541/2000000000000000) * x6)) + ((-2220198069228987/5000000000000000) * x7)) + ((-4890835097165249/500000000000000) * x8)) + ((5638312771157189/1000000000000000) * x9)) + ((-3409155358232237/1000000000000000) * x10)) + interval(-1.44584843915729537934e-05, 1.44584843915729537934e-05)))
23 (67): exp = -24: floor_power2((((-8452878970167681/1000000000000000) * x11) + interval(-1.81413138125000002695e-08, 1.81413138125000002695e-08)))
24 (69): exp = -24: floor_power2(((((((((((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + ((149668693420641/40000000000000) * x4)) + ((4962445278764287/2500000000000000) * x5)) + ((-12672260182286541/2000000000000000) * x6)) + ((-2220198069228987/5000000000000000) * x7)) + ((-4890835097165249/500000000000000) * x8)) + ((5638312771157189/1000000000000000) * x9)) + ((-3409155358232237/1000000000000000) * x10)) + ((-8452878970167681/1000000000000000) * x11)) + interval(-1.68608114964010800344e-05, 1.68608114964010800344e-05)))
25 (73): exp = -24: floor_power2((((2595578807214263/1000000000000000) * x12) + interval(-1.01706025085937510066e-07, 1.01706025085937510066e-07)))
26 (75): exp = -24: floor_power2((((((((((((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + ((149668693420641/40000000000000) * x4)) + ((4962445278764287/2500000000000000) * x5)) + ((-12672260182286541/2000000000000000) * x6)) + ((-2220198069228987/5000000000000000) * x7)) + ((-4890835097165249/500000000000000) * x8)) + ((5638312771157189/1000000000000000) * x9)) + ((-3409155358232237/1000000000000000) * x10)) + ((-8452878970167681/1000000000000000) * x11)) + ((2595578807214263/1000000000000000) * x12)) + interval(-1.89890754438503016267e-05, 1.89890754438503016267e-05)))
27 (79): exp = -24: floor_power2((((-8876804072775819/5000000000000000) * x13) + interval(-8.12244850468750074645e-09, 8.12244850468750074645e-09)))
28 (81): exp = -24: floor_power2(((((((((((((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + ((149668693420641/40000000000000) * x4)) + ((4962445278764287/2500000000000000) * x5)) + ((-12672260182286541/2000000000000000) * x6)) + ((-2220198069228987/5000000000000000) * x7)) + ((-4890835097165249/500000000000000) * x8)) + ((5638312771157189/1000000000000000) * x9)) + ((-3409155358232237/1000000000000000) * x10)) + ((-8452878970167681/1000000000000000) * x11)) + ((2595578807214263/1000000000000000) * x12)) + ((-8876804072775819/5000000000000000) * x13)) + interval(-2.09641511699428808278e-05, 2.09641511699428808278e-05)))
29 (85): exp = -24: floor_power2((((1141982309128323/200000000000000) * x14) + interval(-1.99206068125000012719e-07, 1.99206068125000012719e-07)))
30 (87): exp = -24: floor_power2((((((((((((((((((-1058634021620663/312500000000000) * x0) + ((58189846665001/25000000000000) * x1)) + ((2047685781020883/250000000000000) * x2)) + ((6322804980693327/1000000000000000) * x3)) + ((149668693420641/40000000000000) * x4)) + ((4962445278764287/2500000000000000) * x5)) + ((-12672260182286541/2000000000000000) * x6)) + ((-2220198069228987/5000000000000000) * x7)) + ((-4890835097165249/500000000000000) * x8)) + ((5638312771157189/1000000000000000) * x9)) + ((-3409155358232237/1000000000000000) * x10)) + ((-8452878970167681/1000000000000000) * x11)) + ((2595578807214263/1000000000000000) * x12)) + ((-8876804072775819/5000000000000000) * x13)) + ((1141982309128323/200000000000000) * x14)) + interval(-2.52164730827944426523e-05, 2.52164730827944426523e-05)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((-1058634021620663/312500000000000)) * x0))
3: rnd32((rnd32((58189846665001/25000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1))))
5: rnd32((rnd32((2047685781020883/250000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2))))
7: rnd32((rnd32((6322804980693327/1000000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3))))
9: rnd32((rnd32((149668693420641/40000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3)))) + rnd32((rnd32((149668693420641/40000000000000)) * x4))))
11: rnd32((rnd32((4962445278764287/2500000000000000)) * x5))
12: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3)))) + rnd32((rnd32((149668693420641/40000000000000)) * x4)))) + rnd32((rnd32((4962445278764287/2500000000000000)) * x5))))
13: rnd32((rnd32((-12672260182286541/2000000000000000)) * x6))
14: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3)))) + rnd32((rnd32((149668693420641/40000000000000)) * x4)))) + rnd32((rnd32((4962445278764287/2500000000000000)) * x5)))) + rnd32((rnd32((-12672260182286541/2000000000000000)) * x6))))
15: rnd32((rnd32((-2220198069228987/5000000000000000)) * x7))
16: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3)))) + rnd32((rnd32((149668693420641/40000000000000)) * x4)))) + rnd32((rnd32((4962445278764287/2500000000000000)) * x5)))) + rnd32((rnd32((-12672260182286541/2000000000000000)) * x6)))) + rnd32((rnd32((-2220198069228987/5000000000000000)) * x7))))
17: rnd32((rnd32((-4890835097165249/500000000000000)) * x8))
18: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3)))) + rnd32((rnd32((149668693420641/40000000000000)) * x4)))) + rnd32((rnd32((4962445278764287/2500000000000000)) * x5)))) + rnd32((rnd32((-12672260182286541/2000000000000000)) * x6)))) + rnd32((rnd32((-2220198069228987/5000000000000000)) * x7)))) + rnd32((rnd32((-4890835097165249/500000000000000)) * x8))))
19: rnd32((rnd32((5638312771157189/1000000000000000)) * x9))
20: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3)))) + rnd32((rnd32((149668693420641/40000000000000)) * x4)))) + rnd32((rnd32((4962445278764287/2500000000000000)) * x5)))) + rnd32((rnd32((-12672260182286541/2000000000000000)) * x6)))) + rnd32((rnd32((-2220198069228987/5000000000000000)) * x7)))) + rnd32((rnd32((-4890835097165249/500000000000000)) * x8)))) + rnd32((rnd32((5638312771157189/1000000000000000)) * x9))))
21: rnd32((rnd32((-3409155358232237/1000000000000000)) * x10))
22: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3)))) + rnd32((rnd32((149668693420641/40000000000000)) * x4)))) + rnd32((rnd32((4962445278764287/2500000000000000)) * x5)))) + rnd32((rnd32((-12672260182286541/2000000000000000)) * x6)))) + rnd32((rnd32((-2220198069228987/5000000000000000)) * x7)))) + rnd32((rnd32((-4890835097165249/500000000000000)) * x8)))) + rnd32((rnd32((5638312771157189/1000000000000000)) * x9)))) + rnd32((rnd32((-3409155358232237/1000000000000000)) * x10))))
23: rnd32((rnd32((-8452878970167681/1000000000000000)) * x11))
24: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3)))) + rnd32((rnd32((149668693420641/40000000000000)) * x4)))) + rnd32((rnd32((4962445278764287/2500000000000000)) * x5)))) + rnd32((rnd32((-12672260182286541/2000000000000000)) * x6)))) + rnd32((rnd32((-2220198069228987/5000000000000000)) * x7)))) + rnd32((rnd32((-4890835097165249/500000000000000)) * x8)))) + rnd32((rnd32((5638312771157189/1000000000000000)) * x9)))) + rnd32((rnd32((-3409155358232237/1000000000000000)) * x10)))) + rnd32((rnd32((-8452878970167681/1000000000000000)) * x11))))
25: rnd32((rnd32((2595578807214263/1000000000000000)) * x12))
26: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3)))) + rnd32((rnd32((149668693420641/40000000000000)) * x4)))) + rnd32((rnd32((4962445278764287/2500000000000000)) * x5)))) + rnd32((rnd32((-12672260182286541/2000000000000000)) * x6)))) + rnd32((rnd32((-2220198069228987/5000000000000000)) * x7)))) + rnd32((rnd32((-4890835097165249/500000000000000)) * x8)))) + rnd32((rnd32((5638312771157189/1000000000000000)) * x9)))) + rnd32((rnd32((-3409155358232237/1000000000000000)) * x10)))) + rnd32((rnd32((-8452878970167681/1000000000000000)) * x11)))) + rnd32((rnd32((2595578807214263/1000000000000000)) * x12))))
27: rnd32((rnd32((-8876804072775819/5000000000000000)) * x13))
28: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3)))) + rnd32((rnd32((149668693420641/40000000000000)) * x4)))) + rnd32((rnd32((4962445278764287/2500000000000000)) * x5)))) + rnd32((rnd32((-12672260182286541/2000000000000000)) * x6)))) + rnd32((rnd32((-2220198069228987/5000000000000000)) * x7)))) + rnd32((rnd32((-4890835097165249/500000000000000)) * x8)))) + rnd32((rnd32((5638312771157189/1000000000000000)) * x9)))) + rnd32((rnd32((-3409155358232237/1000000000000000)) * x10)))) + rnd32((rnd32((-8452878970167681/1000000000000000)) * x11)))) + rnd32((rnd32((2595578807214263/1000000000000000)) * x12)))) + rnd32((rnd32((-8876804072775819/5000000000000000)) * x13))))
29: rnd32((rnd32((1141982309128323/200000000000000)) * x14))
30: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-1058634021620663/312500000000000)) * x0)) + rnd32((rnd32((58189846665001/25000000000000)) * x1)))) + rnd32((rnd32((2047685781020883/250000000000000)) * x2)))) + rnd32((rnd32((6322804980693327/1000000000000000)) * x3)))) + rnd32((rnd32((149668693420641/40000000000000)) * x4)))) + rnd32((rnd32((4962445278764287/2500000000000000)) * x5)))) + rnd32((rnd32((-12672260182286541/2000000000000000)) * x6)))) + rnd32((rnd32((-2220198069228987/5000000000000000)) * x7)))) + rnd32((rnd32((-4890835097165249/500000000000000)) * x8)))) + rnd32((rnd32((5638312771157189/1000000000000000)) * x9)))) + rnd32((rnd32((-3409155358232237/1000000000000000)) * x10)))) + rnd32((rnd32((-8452878970167681/1000000000000000)) * x11)))) + rnd32((rnd32((2595578807214263/1000000000000000)) * x12)))) + rnd32((rnd32((-8876804072775819/5000000000000000)) * x13)))) + rnd32((rnd32((1141982309128323/200000000000000)) * x14))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 1000000, max = 1000000): 1000000
min = -7.009850e+01 (lower_min = -5.161126e+01)
max = 7.009850e+01 (lower_max = 5.161126e+01)
subopt = 1.848725e+01 (26.4%)
bounds: [-7.009850e+01, 7.009850e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 2.958228e-30 (lower_min = 2.958228e-30)
max = 2.958228e-30 (lower_max = 2.958228e-30)
subopt = 0.000000e+00 (0.0%)
rmin(result = 2.958228e-30, lower = 2.958228e-30), rmax(result = 2.958228e-30, lower = 2.958228e-30)
-1: exp = -24: 2.958228e-30 (low = 2.958228e-30, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 1000000): 1000000
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 4.791752e+02 (lower_max = 3.039190e+02)
subopt = 1.752562e+02 (36.6%)
exact bound (exp = -24): 4.791752e+02 (low = 3.039190e+02, subopt = 36.6%)
total2: 1.763242e-37 (low = 1.763242e-37, subopt = 0.0%)
exact total: 2.856107e-05 (low = 1.811499e-05, subopt = 36.6%)

Elapsed time: 195.53620
Processing: exp36

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((-7915822334211553/5000000000000000)) * rnd32(x0))) + rnd32((rnd32((9777691808606681/5000000000000000)) * rnd32(x1))))) + rnd32((rnd32((-310584429151839/50000000000000)) * rnd32(x2))))) + rnd32((rnd32((-2817995835279711/500000000000000)) * rnd32(x3))))) + rnd32((rnd32((2079174277985521/500000000000000)) * rnd32(x4))))) + rnd32((rnd32((1683703829051391/200000000000000)) * rnd32(x5))))) + rnd32((rnd32((10598937268590113/2000000000000000)) * rnd32(x6))))) + rnd32((rnd32((-1460929602369307/200000000000000)) * rnd32(x7))))) + rnd32((rnd32((-7815430648456569/10000000000000000)) * rnd32(x8))))) + rnd32((rnd32((14340863792601553/2000000000000000)) * rnd32(x9))))) + rnd32((rnd32((-3744192879586733/500000000000000)) * rnd32(x10))))) + rnd32((rnd32((-834018103150541/100000000000000)) * rnd32(x11))))) + rnd32((rnd32((-46073037508743/7812500000000)) * rnd32(x12))))) + rnd32((rnd32((-2310224680106007/500000000000000)) * rnd32(x13))))) + rnd32((rnd32((-566035699702927/312500000000000)) * rnd32(x14)))))

Conservative bound: [-76.677070, 76.677070]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3)))) + rnd32((rnd32((2079174277985521/500000000000000)) * x4)))) + rnd32((rnd32((1683703829051391/200000000000000)) * x5)))) + rnd32((rnd32((10598937268590113/2000000000000000)) * x6)))) + rnd32((rnd32((-1460929602369307/200000000000000)) * x7)))) + rnd32((rnd32((-7815430648456569/10000000000000000)) * x8)))) + rnd32((rnd32((14340863792601553/2000000000000000)) * x9)))) + rnd32((rnd32((-3744192879586733/500000000000000)) * x10)))) + rnd32((rnd32((-834018103150541/100000000000000)) * x11)))) + rnd32((rnd32((-46073037508743/7812500000000)) * x12)))) + rnd32((rnd32((-2310224680106007/500000000000000)) * x13)))) + rnd32((rnd32((-566035699702927/312500000000000)) * x14))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (-7915822334211553/5000000000000000); err = (-34139752636/152587890625)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (9777691808606681/5000000000000000); err = (-77684785578/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-310584429151839/50000000000000); err = (-6606091272/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2817995835279711/500000000000000); err = (-49779549064/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (2079174277985521/500000000000000); err = (-2233451496/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1683703829051391/200000000000000); err = (12818062192/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (10598937268590113/2000000000000000); err = (59899693928/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1460929602369307/200000000000000); err = (-9147460184/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-7815430648456569/10000000000000000); err = (28653321461/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (14340863792601553/2000000000000000); err = (-99562752432/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-3744192879586733/500000000000000); err = (-41899939592/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-834018103150541/100000000000000); err = (32686346016/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-46073037508743/7812500000000); err = (40780143752/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2310224680106007/500000000000000); err = (93587073832/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-566035699702927/312500000000000); err = (-35462471734/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((((((((((((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + ((2079174277985521/500000000000000) * x4)) + ((1683703829051391/200000000000000) * x5)) + ((10598937268590113/2000000000000000) * x6)) + ((-1460929602369307/200000000000000) * x7)) + ((-7815430648456569/10000000000000000) * x8)) + ((14340863792601553/2000000000000000) * x9)) + ((-3744192879586733/500000000000000) * x10)) + ((-834018103150541/100000000000000) * x11)) + ((-46073037508743/7812500000000) * x12)) + ((-2310224680106007/500000000000000) * x13)) + ((-566035699702927/312500000000000) * x14))
-1 (131): exp = -24: (15/5070602400912917605986812821504)
1 (1): exp = -24: (((((((((((((((x0 * (-34139752636/152587890625)) + (x1 * (-77684785578/152587890625))) + (x2 * (-6606091272/6103515625))) + (x3 * (-49779549064/30517578125))) + (x4 * (-2233451496/30517578125))) + (x5 * (12818062192/6103515625))) + (x6 * (59899693928/30517578125))) + (x7 * (-9147460184/6103515625))) + (x8 * (28653321461/152587890625))) + (x9 * (-99562752432/30517578125))) + (x10 * (-41899939592/30517578125))) + (x11 * (32686346016/6103515625))) + (x12 * (40780143752/30517578125))) + (x13 * (93587073832/30517578125))) + (x14 * (-35462471734/152587890625)))
2 (3): exp = -24: floor_power2((((-7915822334211553/5000000000000000) * x0) + interval(-1.33358408734375000803e-08, 1.33358408734375000803e-08)))
3 (7): exp = -24: floor_power2((((9777691808606681/5000000000000000) * x1) + interval(-3.03456193664062501199e-08, 3.03456193664062501199e-08)))
4 (9): exp = -24: floor_power2(((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + interval(-1.62890749790625041559e-07, 1.62890749790625041559e-07)))
5 (13): exp = -24: floor_power2((((-310584429151839/50000000000000) * x2) + interval(-6.45126100781250033916e-08, 6.45126100781250033916e-08)))
6 (15): exp = -24: floor_power2((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + interval(-5.85031228521094033179e-07, 5.85031228521094033179e-07)))
7 (19): exp = -24: floor_power2((((-2817995835279711/500000000000000) * x3) + interval(-9.72256817656250018895e-08, 9.72256817656250018895e-08)))
8 (21): exp = -24: floor_power2(((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + interval(-1.39751264759140665418e-06, 1.39751264759140665418e-06)))
9 (25): exp = -24: floor_power2((((2079174277985521/500000000000000) * x4) + interval(-4.36220995312500021692e-09, 4.36220995312500021692e-09)))
10 (27): exp = -24: floor_power2((((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + ((2079174277985521/500000000000000) * x4)) + interval(-2.11713059484921981780e-06, 2.11713059484921981780e-06)))
11 (31): exp = -24: floor_power2((((1683703829051391/200000000000000) * x5) + interval(-1.25176388593750018657e-07, 1.25176388593750018657e-07)))
12 (33): exp = -24: floor_power2(((((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + ((2079174277985521/500000000000000) * x4)) + ((1683703829051391/200000000000000) * x5)) + interval(-3.67281845805234499527e-06, 3.67281845805234499527e-06)))
13 (37): exp = -24: floor_power2((((10598937268590113/2000000000000000) * x6) + interval(-1.16991589703125011819e-07, 1.16991589703125011819e-07)))
14 (39): exp = -24: floor_power2((((((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + ((2079174277985521/500000000000000) * x4)) + ((1683703829051391/200000000000000) * x5)) + ((10598937268590113/2000000000000000) * x6)) + interval(-4.98190294326328312913e-06, 4.98190294326328312913e-06)))
15 (43): exp = -24: floor_power2((((-1460929602369307/200000000000000) * x7) + interval(-8.93306658593750081591e-08, 8.93306658593750081591e-08)))
16 (45): exp = -24: floor_power2(((((((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + ((2079174277985521/500000000000000) * x4)) + ((1683703829051391/200000000000000) * x5)) + ((10598937268590113/2000000000000000) * x6)) + ((-1460929602369307/200000000000000) * x7)) + interval(-7.21700082103672143139e-06, 7.21700082103672143139e-06)))
17 (49): exp = -24: floor_power2((((-7815430648456569/10000000000000000) * x8) + interval(-1.11927036957031254908e-08, 1.11927036957031254908e-08)))
18 (51): exp = -24: floor_power2((((((((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + ((2079174277985521/500000000000000) * x4)) + ((1683703829051391/200000000000000) * x5)) + ((10598937268590113/2000000000000000) * x6)) + ((-1460929602369307/200000000000000) * x7)) + ((-7815430648456569/10000000000000000) * x8)) + interval(-9.16534447993262079086e-06, 9.16534447993262079086e-06)))
19 (55): exp = -24: floor_power2((((14340863792601553/2000000000000000) * x9) + interval(-1.94458500843750000273e-07, 1.94458500843750000273e-07)))
20 (57): exp = -24: floor_power2(((((((((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + ((2079174277985521/500000000000000) * x4)) + ((1683703829051391/200000000000000) * x5)) + ((10598937268590113/2000000000000000) * x6)) + ((-1460929602369307/200000000000000) * x7)) + ((-7815430648456569/10000000000000000) * x8)) + ((14340863792601553/2000000000000000) * x9)) + interval(-1.15055701926904342176e-05, 1.15055701926904342176e-05)))
21 (61): exp = -24: floor_power2((((-3744192879586733/500000000000000) * x10) + interval(-8.18358195156250044402e-08, 8.18358195156250044402e-08)))
22 (63): exp = -24: floor_power2((((((((((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + ((2079174277985521/500000000000000) * x4)) + ((1683703829051391/200000000000000) * x5)) + ((10598937268590113/2000000000000000) * x6)) + ((-1460929602369307/200000000000000) * x7)) + ((-7815430648456569/10000000000000000) * x8)) + ((14340863792601553/2000000000000000) * x9)) + ((-3744192879586733/500000000000000) * x10)) + interval(-1.37331732241201223308e-05, 1.37331732241201223308e-05)))
23 (67): exp = -24: floor_power2((((-834018103150541/100000000000000) * x11) + interval(-3.19202597812500046161e-07, 3.19202597812500046161e-07)))
24 (69): exp = -24: floor_power2(((((((((((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + ((2079174277985521/500000000000000) * x4)) + ((1683703829051391/200000000000000) * x5)) + ((10598937268590113/2000000000000000) * x6)) + ((-1460929602369307/200000000000000) * x7)) + ((-7815430648456569/10000000000000000) * x8)) + ((14340863792601553/2000000000000000) * x9)) + ((-3744192879586733/500000000000000) * x10)) + ((-834018103150541/100000000000000) * x11)) + interval(-1.64365616129482512416e-05, 1.64365616129482512416e-05)))
25 (73): exp = -24: floor_power2((((-46073037508743/7812500000000) * x12) + interval(-7.96487182656250027745e-08, 7.96487182656250027745e-08)))
26 (75): exp = -24: floor_power2((((((((((((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + ((2079174277985521/500000000000000) * x4)) + ((1683703829051391/200000000000000) * x5)) + ((10598937268590113/2000000000000000) * x6)) + ((-1460929602369307/200000000000000) * x7)) + ((-7815430648456569/10000000000000000) * x8)) + ((14340863792601553/2000000000000000) * x9)) + ((-3744192879586733/500000000000000) * x10)) + ((-834018103150541/100000000000000) * x11)) + ((-46073037508743/7812500000000) * x12)) + interval(-2.05693261759404398428e-05, 2.05693261759404398428e-05)))
27 (79): exp = -24: floor_power2((((-2310224680106007/500000000000000) * x13) + interval(-1.82787253578125025706e-07, 1.82787253578125025706e-07)))
28 (81): exp = -24: floor_power2(((((((((((((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + ((2079174277985521/500000000000000) * x4)) + ((1683703829051391/200000000000000) * x5)) + ((10598937268590113/2000000000000000) * x6)) + ((-1460929602369307/200000000000000) * x7)) + ((-7815430648456569/10000000000000000) * x8)) + ((14340863792601553/2000000000000000) * x9)) + ((-3744192879586733/500000000000000) * x10)) + ((-834018103150541/100000000000000) * x11)) + ((-46073037508743/7812500000000) * x12)) + ((-2310224680106007/500000000000000) * x13)) + interval(-2.48052292742451281626e-05, 2.48052292742451281626e-05)))
29 (85): exp = -24: floor_power2((((-566035699702927/312500000000000) * x14) + interval(-1.38525280210937509432e-08, 1.38525280210937509432e-08)))
30 (87): exp = -24: floor_power2((((((((((((((((((-7915822334211553/5000000000000000) * x0) + ((9777691808606681/5000000000000000) * x1)) + ((-310584429151839/50000000000000) * x2)) + ((-2817995835279711/500000000000000) * x3)) + ((2079174277985521/500000000000000) * x4)) + ((1683703829051391/200000000000000) * x5)) + ((10598937268590113/2000000000000000) * x6)) + ((-1460929602369307/200000000000000) * x7)) + ((-7815430648456569/10000000000000000) * x8)) + ((14340863792601553/2000000000000000) * x9)) + ((-3744192879586733/500000000000000) * x10)) + ((-834018103150541/100000000000000) * x11)) + ((-46073037508743/7812500000000) * x12)) + ((-2310224680106007/500000000000000) * x13)) + ((-566035699702927/312500000000000) * x14)) + interval(-2.86933837126666121779e-05, 2.86933837126666121779e-05)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((-7915822334211553/5000000000000000)) * x0))
3: rnd32((rnd32((9777691808606681/5000000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1))))
5: rnd32((rnd32((-310584429151839/50000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2))))
7: rnd32((rnd32((-2817995835279711/500000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3))))
9: rnd32((rnd32((2079174277985521/500000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3)))) + rnd32((rnd32((2079174277985521/500000000000000)) * x4))))
11: rnd32((rnd32((1683703829051391/200000000000000)) * x5))
12: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3)))) + rnd32((rnd32((2079174277985521/500000000000000)) * x4)))) + rnd32((rnd32((1683703829051391/200000000000000)) * x5))))
13: rnd32((rnd32((10598937268590113/2000000000000000)) * x6))
14: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3)))) + rnd32((rnd32((2079174277985521/500000000000000)) * x4)))) + rnd32((rnd32((1683703829051391/200000000000000)) * x5)))) + rnd32((rnd32((10598937268590113/2000000000000000)) * x6))))
15: rnd32((rnd32((-1460929602369307/200000000000000)) * x7))
16: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3)))) + rnd32((rnd32((2079174277985521/500000000000000)) * x4)))) + rnd32((rnd32((1683703829051391/200000000000000)) * x5)))) + rnd32((rnd32((10598937268590113/2000000000000000)) * x6)))) + rnd32((rnd32((-1460929602369307/200000000000000)) * x7))))
17: rnd32((rnd32((-7815430648456569/10000000000000000)) * x8))
18: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3)))) + rnd32((rnd32((2079174277985521/500000000000000)) * x4)))) + rnd32((rnd32((1683703829051391/200000000000000)) * x5)))) + rnd32((rnd32((10598937268590113/2000000000000000)) * x6)))) + rnd32((rnd32((-1460929602369307/200000000000000)) * x7)))) + rnd32((rnd32((-7815430648456569/10000000000000000)) * x8))))
19: rnd32((rnd32((14340863792601553/2000000000000000)) * x9))
20: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3)))) + rnd32((rnd32((2079174277985521/500000000000000)) * x4)))) + rnd32((rnd32((1683703829051391/200000000000000)) * x5)))) + rnd32((rnd32((10598937268590113/2000000000000000)) * x6)))) + rnd32((rnd32((-1460929602369307/200000000000000)) * x7)))) + rnd32((rnd32((-7815430648456569/10000000000000000)) * x8)))) + rnd32((rnd32((14340863792601553/2000000000000000)) * x9))))
21: rnd32((rnd32((-3744192879586733/500000000000000)) * x10))
22: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3)))) + rnd32((rnd32((2079174277985521/500000000000000)) * x4)))) + rnd32((rnd32((1683703829051391/200000000000000)) * x5)))) + rnd32((rnd32((10598937268590113/2000000000000000)) * x6)))) + rnd32((rnd32((-1460929602369307/200000000000000)) * x7)))) + rnd32((rnd32((-7815430648456569/10000000000000000)) * x8)))) + rnd32((rnd32((14340863792601553/2000000000000000)) * x9)))) + rnd32((rnd32((-3744192879586733/500000000000000)) * x10))))
23: rnd32((rnd32((-834018103150541/100000000000000)) * x11))
24: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3)))) + rnd32((rnd32((2079174277985521/500000000000000)) * x4)))) + rnd32((rnd32((1683703829051391/200000000000000)) * x5)))) + rnd32((rnd32((10598937268590113/2000000000000000)) * x6)))) + rnd32((rnd32((-1460929602369307/200000000000000)) * x7)))) + rnd32((rnd32((-7815430648456569/10000000000000000)) * x8)))) + rnd32((rnd32((14340863792601553/2000000000000000)) * x9)))) + rnd32((rnd32((-3744192879586733/500000000000000)) * x10)))) + rnd32((rnd32((-834018103150541/100000000000000)) * x11))))
25: rnd32((rnd32((-46073037508743/7812500000000)) * x12))
26: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3)))) + rnd32((rnd32((2079174277985521/500000000000000)) * x4)))) + rnd32((rnd32((1683703829051391/200000000000000)) * x5)))) + rnd32((rnd32((10598937268590113/2000000000000000)) * x6)))) + rnd32((rnd32((-1460929602369307/200000000000000)) * x7)))) + rnd32((rnd32((-7815430648456569/10000000000000000)) * x8)))) + rnd32((rnd32((14340863792601553/2000000000000000)) * x9)))) + rnd32((rnd32((-3744192879586733/500000000000000)) * x10)))) + rnd32((rnd32((-834018103150541/100000000000000)) * x11)))) + rnd32((rnd32((-46073037508743/7812500000000)) * x12))))
27: rnd32((rnd32((-2310224680106007/500000000000000)) * x13))
28: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3)))) + rnd32((rnd32((2079174277985521/500000000000000)) * x4)))) + rnd32((rnd32((1683703829051391/200000000000000)) * x5)))) + rnd32((rnd32((10598937268590113/2000000000000000)) * x6)))) + rnd32((rnd32((-1460929602369307/200000000000000)) * x7)))) + rnd32((rnd32((-7815430648456569/10000000000000000)) * x8)))) + rnd32((rnd32((14340863792601553/2000000000000000)) * x9)))) + rnd32((rnd32((-3744192879586733/500000000000000)) * x10)))) + rnd32((rnd32((-834018103150541/100000000000000)) * x11)))) + rnd32((rnd32((-46073037508743/7812500000000)) * x12)))) + rnd32((rnd32((-2310224680106007/500000000000000)) * x13))))
29: rnd32((rnd32((-566035699702927/312500000000000)) * x14))
30: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-7915822334211553/5000000000000000)) * x0)) + rnd32((rnd32((9777691808606681/5000000000000000)) * x1)))) + rnd32((rnd32((-310584429151839/50000000000000)) * x2)))) + rnd32((rnd32((-2817995835279711/500000000000000)) * x3)))) + rnd32((rnd32((2079174277985521/500000000000000)) * x4)))) + rnd32((rnd32((1683703829051391/200000000000000)) * x5)))) + rnd32((rnd32((10598937268590113/2000000000000000)) * x6)))) + rnd32((rnd32((-1460929602369307/200000000000000)) * x7)))) + rnd32((rnd32((-7815430648456569/10000000000000000)) * x8)))) + rnd32((rnd32((14340863792601553/2000000000000000)) * x9)))) + rnd32((rnd32((-3744192879586733/500000000000000)) * x10)))) + rnd32((rnd32((-834018103150541/100000000000000)) * x11)))) + rnd32((rnd32((-46073037508743/7812500000000)) * x12)))) + rnd32((rnd32((-2310224680106007/500000000000000)) * x13)))) + rnd32((rnd32((-566035699702927/312500000000000)) * x14))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 1000000, max = 1000000): 1000000
min = -7.667702e+01 (lower_min = -6.317587e+01)
max = 7.667702e+01 (lower_max = 6.317587e+01)
subopt = 1.350115e+01 (17.6%)
bounds: [-7.667702e+01, 7.667702e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 2.958228e-30 (lower_min = 2.958228e-30)
max = 2.958228e-30 (lower_max = 2.958228e-30)
subopt = 0.000000e+00 (0.0%)
rmin(result = 2.958228e-30, lower = 2.958228e-30), rmax(result = 2.958228e-30, lower = 2.958228e-30)
-1: exp = -24: 2.958228e-30 (low = 2.958228e-30, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 1000000): 1000000
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 5.348367e+02 (lower_max = 2.713315e+02)
subopt = 2.635052e+02 (49.3%)
exact bound (exp = -24): 5.348367e+02 (low = 2.713315e+02, subopt = 49.3%)
total2: 1.763242e-37 (low = 1.763242e-37, subopt = 0.0%)
exact total: 3.187875e-05 (low = 1.617262e-05, subopt = 49.3%)

Elapsed time: 205.74782
Processing: exp37

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((607757237522599/62500000000000)) * rnd32(x0))) + rnd32((rnd32((6458190334860863/1000000000000000)) * rnd32(x1))))) + rnd32((rnd32((-1764944452228997/250000000000000)) * rnd32(x2))))) + rnd32((rnd32((1345149462161297/250000000000000)) * rnd32(x3))))) + rnd32((rnd32((4436064321544077/1000000000000000)) * rnd32(x4))))) + rnd32((rnd32((547925376226867/62500000000000)) * rnd32(x5))))) + rnd32((rnd32((-14122644247463203/5000000000000000)) * rnd32(x6))))) + rnd32((rnd32((-26288588022793/3906250000000)) * rnd32(x7))))) + rnd32((rnd32((133246771086787/20000000000000)) * rnd32(x8))))) + rnd32((rnd32((3082296763360027/500000000000000)) * rnd32(x9))))) + rnd32((rnd32((8230894643900477/5000000000000000)) * rnd32(x10))))) + rnd32((rnd32((1801814268484593/250000000000000)) * rnd32(x11))))) + rnd32((rnd32((-745276829167411/100000000000000)) * rnd32(x12))))) + rnd32((rnd32((-16042886282875113/5000000000000000)) * rnd32(x13))))) + rnd32((rnd32((-1147288066523679/200000000000000)) * rnd32(x14)))))

Conservative bound: [-89.458174, 89.458174]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3)))) + rnd32((rnd32((4436064321544077/1000000000000000)) * x4)))) + rnd32((rnd32((547925376226867/62500000000000)) * x5)))) + rnd32((rnd32((-14122644247463203/5000000000000000)) * x6)))) + rnd32((rnd32((-26288588022793/3906250000000)) * x7)))) + rnd32((rnd32((133246771086787/20000000000000)) * x8)))) + rnd32((rnd32((3082296763360027/500000000000000)) * x9)))) + rnd32((rnd32((8230894643900477/5000000000000000)) * x10)))) + rnd32((rnd32((1801814268484593/250000000000000)) * x11)))) + rnd32((rnd32((-745276829167411/100000000000000)) * x12)))) + rnd32((rnd32((-16042886282875113/5000000000000000)) * x13)))) + rnd32((rnd32((-1147288066523679/200000000000000)) * x14))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (607757237522599/62500000000000); err = (219472631008/30517578125)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (6458190334860863/1000000000000000); err = (-54410613144/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1764944452228997/250000000000000); err = (-36993110856/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1345149462161297/250000000000000); err = (-112431163744/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (4436064321544077/1000000000000000); err = (40052442424/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (547925376226867/62500000000000); err = (189862994464/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-14122644247463203/5000000000000000); err = (212681652564/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-26288588022793/3906250000000); err = (-55417274096/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (133246771086787/20000000000000); err = (-3672755112/1220703125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (3082296763360027/500000000000000); err = (-86975582352/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (8230894643900477/5000000000000000); err = (-81971393276/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1801814268484593/250000000000000); err = (-100799803536/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-745276829167411/100000000000000); err = (3495071136/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-16042886282875113/5000000000000000); err = (-257300807856/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1147288066523679/200000000000000); err = (-15450748648/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((((((((((((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + ((4436064321544077/1000000000000000) * x4)) + ((547925376226867/62500000000000) * x5)) + ((-14122644247463203/5000000000000000) * x6)) + ((-26288588022793/3906250000000) * x7)) + ((133246771086787/20000000000000) * x8)) + ((3082296763360027/500000000000000) * x9)) + ((8230894643900477/5000000000000000) * x10)) + ((1801814268484593/250000000000000) * x11)) + ((-745276829167411/100000000000000) * x12)) + ((-16042886282875113/5000000000000000) * x13)) + ((-1147288066523679/200000000000000) * x14))
-1 (131): exp = -24: (15/5070602400912917605986812821504)
1 (1): exp = -24: (((((((((((((((x0 * (219472631008/30517578125)) + (x1 * (-54410613144/30517578125))) + (x2 * (-36993110856/30517578125))) + (x3 * (-112431163744/30517578125))) + (x4 * (40052442424/30517578125))) + (x5 * (189862994464/30517578125))) + (x6 * (212681652564/152587890625))) + (x7 * (-55417274096/30517578125))) + (x8 * (-3672755112/1220703125))) + (x9 * (-86975582352/30517578125))) + (x10 * (-81971393276/152587890625))) + (x11 * (-100799803536/30517578125))) + (x12 * (3495071136/6103515625))) + (x13 * (-257300807856/152587890625))) + (x14 * (-15450748648/6103515625)))
2 (3): exp = -24: floor_power2((((607757237522599/62500000000000) * x0) + interval(-4.28657482437500034349e-07, 4.28657482437500034349e-07)))
3 (7): exp = -24: floor_power2((((6458190334860863/1000000000000000) * x1) + interval(-1.06270728796875009635e-07, 1.06270728796875009635e-07)))
4 (9): exp = -24: floor_power2(((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + interval(-1.25018394853906268957e-06, 1.25018394853906268957e-06)))
5 (13): exp = -24: floor_power2((((-1764944452228997/250000000000000) * x2) + interval(-7.22521696406250023212e-08, 7.22521696406250023212e-08)))
6 (15): exp = -24: floor_power2((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + interval(-2.51452901368750056247e-06, 2.51452901368750056247e-06)))
7 (19): exp = -24: floor_power2((((1345149462161297/250000000000000) * x3) + interval(-2.19592116687500004951e-07, 2.19592116687500004951e-07)))
8 (21): exp = -24: floor_power2(((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + interval(-3.92621402588281346446e-06, 3.92621402588281346446e-06)))
9 (25): exp = -24: floor_power2((((4436064321544077/1000000000000000) * x4) + interval(-7.82274266093750102492e-08, 7.82274266093750102492e-08)))
10 (27): exp = -24: floor_power2((((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + ((4436064321544077/1000000000000000) * x4)) + interval(-5.19653434800000149087e-06, 5.19653434800000149087e-06)))
11 (31): exp = -24: floor_power2((((547925376226867/62500000000000) * x5) + interval(-3.70826161062500009909e-07, 3.70826161062500009909e-07)))
12 (33): exp = -24: floor_power2(((((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + ((4436064321544077/1000000000000000) * x4)) + ((547925376226867/62500000000000) * x5)) + interval(-7.95154630007812761251e-06, 7.95154630007812761251e-06)))
13 (37): exp = -24: floor_power2((((-14122644247463203/5000000000000000) * x6) + interval(-8.30787705328125081857e-08, 8.30787705328125081857e-08)))
14 (39): exp = -24: floor_power2((((((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + ((4436064321544077/1000000000000000) * x4)) + ((547925376226867/62500000000000) * x5)) + ((-14122644247463203/5000000000000000) * x6)) + interval(-1.00611829929742221913e-05, 1.00611829929742221913e-05)))
15 (43): exp = -24: floor_power2((((-26288588022793/3906250000000) * x7) + interval(-1.08236863468750002711e-07, 1.08236863468750002711e-07)))
16 (45): exp = -24: floor_power2(((((((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + ((4436064321544077/1000000000000000) * x4)) + ((547925376226867/62500000000000) * x5)) + ((-14122644247463203/5000000000000000) * x6)) + ((-26288588022793/3906250000000) * x7)) + interval(-1.23151870683570340719e-05, 1.23151870683570340719e-05)))
17 (49): exp = -24: floor_power2((((133246771086787/20000000000000) * x8) + interval(-1.79333745703125025144e-07, 1.79333745703125025144e-07)))
18 (51): exp = -24: floor_power2((((((((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + ((4436064321544077/1000000000000000) * x4)) + ((547925376226867/62500000000000) * x5)) + ((-14122644247463203/5000000000000000) * x6)) + ((-26288588022793/3906250000000) * x7)) + ((133246771086787/20000000000000) * x8)) + interval(-1.46402880259742228941e-05, 1.46402880259742228941e-05)))
19 (55): exp = -24: floor_power2((((3082296763360027/500000000000000) * x9) + interval(-1.69874184281250019619e-07, 1.69874184281250019619e-07)))
20 (57): exp = -24: floor_power2(((((((((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + ((4436064321544077/1000000000000000) * x4)) + ((547925376226867/62500000000000) * x5)) + ((-14122644247463203/5000000000000000) * x6)) + ((-26288588022793/3906250000000) * x7)) + ((133246771086787/20000000000000) * x8)) + ((3082296763360027/500000000000000) * x9)) + interval(-1.69559294221695361284e-05, 1.69559294221695361284e-05)))
21 (61): exp = -24: floor_power2((((8230894643900477/5000000000000000) * x10) + interval(-3.20200754984375029072e-08, 3.20200754984375029072e-08)))
22 (63): exp = -24: floor_power2((((((((((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + ((4436064321544077/1000000000000000) * x4)) + ((547925376226867/62500000000000) * x5)) + ((-14122644247463203/5000000000000000) * x6)) + ((-26288588022793/3906250000000) * x7)) + ((133246771086787/20000000000000) * x8)) + ((3082296763360027/500000000000000) * x9)) + ((8230894643900477/5000000000000000) * x10)) + interval(-2.08622514080683657783e-05, 2.08622514080683657783e-05)))
23 (67): exp = -24: floor_power2((((1801814268484593/250000000000000) * x11) + interval(-1.96874616281250015287e-07, 1.96874616281250015287e-07)))
24 (69): exp = -24: floor_power2(((((((((((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + ((4436064321544077/1000000000000000) * x4)) + ((547925376226867/62500000000000) * x5)) + ((-14122644247463203/5000000000000000) * x6)) + ((-26288588022793/3906250000000) * x7)) + ((133246771086787/20000000000000) * x8)) + ((3082296763360027/500000000000000) * x9)) + ((8230894643900477/5000000000000000) * x10)) + ((1801814268484593/250000000000000) * x11)) + interval(-2.51122418690761787965e-05, 2.51122418690761787965e-05)))
25 (73): exp = -24: floor_power2((((-745276829167411/100000000000000) * x12) + interval(-3.41315540625000011644e-08, 3.41315540625000011644e-08)))
26 (75): exp = -24: floor_power2((((((((((((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + ((4436064321544077/1000000000000000) * x4)) + ((547925376226867/62500000000000) * x5)) + ((-14122644247463203/5000000000000000) * x6)) + ((-26288588022793/3906250000000) * x7)) + ((133246771086787/20000000000000) * x8)) + ((3082296763360027/500000000000000) * x9)) + ((8230894643900477/5000000000000000) * x10)) + ((1801814268484593/250000000000000) * x11)) + ((-745276829167411/100000000000000) * x12)) + interval(-2.91994892678652422969e-05, 2.91994892678652422969e-05)))
27 (79): exp = -24: floor_power2((((-16042886282875113/5000000000000000) * x13) + interval(-1.00508128068750001768e-07, 1.00508128068750001768e-07)))
28 (81): exp = -24: floor_power2(((((((((((((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + ((4436064321544077/1000000000000000) * x4)) + ((547925376226867/62500000000000) * x5)) + ((-14122644247463203/5000000000000000) * x6)) + ((-26288588022793/3906250000000) * x7)) + ((133246771086787/20000000000000) * x8)) + ((3082296763360027/500000000000000) * x9)) + ((8230894643900477/5000000000000000) * x10)) + ((1801814268484593/250000000000000) * x11)) + ((-745276829167411/100000000000000) * x12)) + ((-16042886282875113/5000000000000000) * x13)) + interval(-3.32339039511097780353e-05, 3.32339039511097780353e-05)))
29 (85): exp = -24: floor_power2((((-1147288066523679/200000000000000) * x14) + interval(-1.50886217265625017483e-07, 1.50886217265625017483e-07)))
30 (87): exp = -24: floor_power2((((((((((((((((((607757237522599/62500000000000) * x0) + ((6458190334860863/1000000000000000) * x1)) + ((-1764944452228997/250000000000000) * x2)) + ((1345149462161297/250000000000000) * x3)) + ((4436064321544077/1000000000000000) * x4)) + ((547925376226867/62500000000000) * x5)) + ((-14122644247463203/5000000000000000) * x6)) + ((-26288588022793/3906250000000) * x7)) + ((133246771086787/20000000000000) * x8)) + ((3082296763360027/500000000000000) * x9)) + ((8230894643900477/5000000000000000) * x10)) + ((1801814268484593/250000000000000) * x11)) + ((-745276829167411/100000000000000) * x12)) + ((-16042886282875113/5000000000000000) * x13)) + ((-1147288066523679/200000000000000) * x14)) + interval(-3.74379060131019658175e-05, 3.74379060131019658175e-05)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((607757237522599/62500000000000)) * x0))
3: rnd32((rnd32((6458190334860863/1000000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1))))
5: rnd32((rnd32((-1764944452228997/250000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2))))
7: rnd32((rnd32((1345149462161297/250000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3))))
9: rnd32((rnd32((4436064321544077/1000000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3)))) + rnd32((rnd32((4436064321544077/1000000000000000)) * x4))))
11: rnd32((rnd32((547925376226867/62500000000000)) * x5))
12: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3)))) + rnd32((rnd32((4436064321544077/1000000000000000)) * x4)))) + rnd32((rnd32((547925376226867/62500000000000)) * x5))))
13: rnd32((rnd32((-14122644247463203/5000000000000000)) * x6))
14: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3)))) + rnd32((rnd32((4436064321544077/1000000000000000)) * x4)))) + rnd32((rnd32((547925376226867/62500000000000)) * x5)))) + rnd32((rnd32((-14122644247463203/5000000000000000)) * x6))))
15: rnd32((rnd32((-26288588022793/3906250000000)) * x7))
16: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3)))) + rnd32((rnd32((4436064321544077/1000000000000000)) * x4)))) + rnd32((rnd32((547925376226867/62500000000000)) * x5)))) + rnd32((rnd32((-14122644247463203/5000000000000000)) * x6)))) + rnd32((rnd32((-26288588022793/3906250000000)) * x7))))
17: rnd32((rnd32((133246771086787/20000000000000)) * x8))
18: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3)))) + rnd32((rnd32((4436064321544077/1000000000000000)) * x4)))) + rnd32((rnd32((547925376226867/62500000000000)) * x5)))) + rnd32((rnd32((-14122644247463203/5000000000000000)) * x6)))) + rnd32((rnd32((-26288588022793/3906250000000)) * x7)))) + rnd32((rnd32((133246771086787/20000000000000)) * x8))))
19: rnd32((rnd32((3082296763360027/500000000000000)) * x9))
20: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3)))) + rnd32((rnd32((4436064321544077/1000000000000000)) * x4)))) + rnd32((rnd32((547925376226867/62500000000000)) * x5)))) + rnd32((rnd32((-14122644247463203/5000000000000000)) * x6)))) + rnd32((rnd32((-26288588022793/3906250000000)) * x7)))) + rnd32((rnd32((133246771086787/20000000000000)) * x8)))) + rnd32((rnd32((3082296763360027/500000000000000)) * x9))))
21: rnd32((rnd32((8230894643900477/5000000000000000)) * x10))
22: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3)))) + rnd32((rnd32((4436064321544077/1000000000000000)) * x4)))) + rnd32((rnd32((547925376226867/62500000000000)) * x5)))) + rnd32((rnd32((-14122644247463203/5000000000000000)) * x6)))) + rnd32((rnd32((-26288588022793/3906250000000)) * x7)))) + rnd32((rnd32((133246771086787/20000000000000)) * x8)))) + rnd32((rnd32((3082296763360027/500000000000000)) * x9)))) + rnd32((rnd32((8230894643900477/5000000000000000)) * x10))))
23: rnd32((rnd32((1801814268484593/250000000000000)) * x11))
24: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3)))) + rnd32((rnd32((4436064321544077/1000000000000000)) * x4)))) + rnd32((rnd32((547925376226867/62500000000000)) * x5)))) + rnd32((rnd32((-14122644247463203/5000000000000000)) * x6)))) + rnd32((rnd32((-26288588022793/3906250000000)) * x7)))) + rnd32((rnd32((133246771086787/20000000000000)) * x8)))) + rnd32((rnd32((3082296763360027/500000000000000)) * x9)))) + rnd32((rnd32((8230894643900477/5000000000000000)) * x10)))) + rnd32((rnd32((1801814268484593/250000000000000)) * x11))))
25: rnd32((rnd32((-745276829167411/100000000000000)) * x12))
26: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3)))) + rnd32((rnd32((4436064321544077/1000000000000000)) * x4)))) + rnd32((rnd32((547925376226867/62500000000000)) * x5)))) + rnd32((rnd32((-14122644247463203/5000000000000000)) * x6)))) + rnd32((rnd32((-26288588022793/3906250000000)) * x7)))) + rnd32((rnd32((133246771086787/20000000000000)) * x8)))) + rnd32((rnd32((3082296763360027/500000000000000)) * x9)))) + rnd32((rnd32((8230894643900477/5000000000000000)) * x10)))) + rnd32((rnd32((1801814268484593/250000000000000)) * x11)))) + rnd32((rnd32((-745276829167411/100000000000000)) * x12))))
27: rnd32((rnd32((-16042886282875113/5000000000000000)) * x13))
28: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3)))) + rnd32((rnd32((4436064321544077/1000000000000000)) * x4)))) + rnd32((rnd32((547925376226867/62500000000000)) * x5)))) + rnd32((rnd32((-14122644247463203/5000000000000000)) * x6)))) + rnd32((rnd32((-26288588022793/3906250000000)) * x7)))) + rnd32((rnd32((133246771086787/20000000000000)) * x8)))) + rnd32((rnd32((3082296763360027/500000000000000)) * x9)))) + rnd32((rnd32((8230894643900477/5000000000000000)) * x10)))) + rnd32((rnd32((1801814268484593/250000000000000)) * x11)))) + rnd32((rnd32((-745276829167411/100000000000000)) * x12)))) + rnd32((rnd32((-16042886282875113/5000000000000000)) * x13))))
29: rnd32((rnd32((-1147288066523679/200000000000000)) * x14))
30: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((607757237522599/62500000000000)) * x0)) + rnd32((rnd32((6458190334860863/1000000000000000)) * x1)))) + rnd32((rnd32((-1764944452228997/250000000000000)) * x2)))) + rnd32((rnd32((1345149462161297/250000000000000)) * x3)))) + rnd32((rnd32((4436064321544077/1000000000000000)) * x4)))) + rnd32((rnd32((547925376226867/62500000000000)) * x5)))) + rnd32((rnd32((-14122644247463203/5000000000000000)) * x6)))) + rnd32((rnd32((-26288588022793/3906250000000)) * x7)))) + rnd32((rnd32((133246771086787/20000000000000)) * x8)))) + rnd32((rnd32((3082296763360027/500000000000000)) * x9)))) + rnd32((rnd32((8230894643900477/5000000000000000)) * x10)))) + rnd32((rnd32((1801814268484593/250000000000000)) * x11)))) + rnd32((rnd32((-745276829167411/100000000000000)) * x12)))) + rnd32((rnd32((-16042886282875113/5000000000000000)) * x13)))) + rnd32((rnd32((-1147288066523679/200000000000000)) * x14))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 1000000, max = 1000000): 1000000
min = -8.945811e+01 (lower_min = -7.944018e+01)
max = 8.945811e+01 (lower_max = 7.944018e+01)
subopt = 1.001794e+01 (11.2%)
bounds: [-8.945811e+01, 8.945811e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 2.958228e-30 (lower_min = 2.958228e-30)
max = 2.958228e-30 (lower_max = 2.958228e-30)
subopt = 0.000000e+00 (0.0%)
rmin(result = 2.958228e-30, lower = 2.958228e-30), rmax(result = 2.958228e-30, lower = 2.958228e-30)
-1: exp = -24: 2.958228e-30 (low = 2.958228e-30, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 1000000): 1000000
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 6.734422e+02 (lower_max = 4.982900e+02)
subopt = 1.751522e+02 (26.0%)
exact bound (exp = -24): 6.734422e+02 (low = 4.982900e+02, subopt = 26.0%)
total2: 1.763242e-37 (low = 1.763242e-37, subopt = 0.0%)
exact total: 4.014028e-05 (low = 2.970040e-05, subopt = 26.0%)

Elapsed time: 159.54614
Processing: exp38

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((-2288900303754593/2500000000000000)) * rnd32(x0))) + rnd32((rnd32((-22554566987000557/10000000000000000)) * rnd32(x1))))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * rnd32(x2))))) + rnd32((rnd32((-2168601717666299/250000000000000)) * rnd32(x3))))) + rnd32((rnd32((-37171992112307/4000000000000)) * rnd32(x4))))) + rnd32((rnd32((-35083895233614797/10000000000000000)) * rnd32(x5))))) + rnd32((rnd32((-7237269188346147/5000000000000000)) * rnd32(x6))))) + rnd32((rnd32((-2203440230725679/1000000000000000)) * rnd32(x7))))) + rnd32((rnd32((-44754918643093/31250000000000)) * rnd32(x8))))) + rnd32((rnd32((1029700451972813/200000000000000)) * rnd32(x9))))) + rnd32((rnd32((-1994197734317897/200000000000000)) * rnd32(x10))))) + rnd32((rnd32((145621620633267/15625000000000)) * rnd32(x11))))) + rnd32((rnd32((2400059736432353/500000000000000)) * rnd32(x12))))) + rnd32((rnd32((-760388899101963/250000000000000)) * rnd32(x13))))) + rnd32((rnd32((200137260760893/31250000000000)) * rnd32(x14)))))

Conservative bound: [-70.514173, 70.514173]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3)))) + rnd32((rnd32((-37171992112307/4000000000000)) * x4)))) + rnd32((rnd32((-35083895233614797/10000000000000000)) * x5)))) + rnd32((rnd32((-7237269188346147/5000000000000000)) * x6)))) + rnd32((rnd32((-2203440230725679/1000000000000000)) * x7)))) + rnd32((rnd32((-44754918643093/31250000000000)) * x8)))) + rnd32((rnd32((1029700451972813/200000000000000)) * x9)))) + rnd32((rnd32((-1994197734317897/200000000000000)) * x10)))) + rnd32((rnd32((145621620633267/15625000000000)) * x11)))) + rnd32((rnd32((2400059736432353/500000000000000)) * x12)))) + rnd32((rnd32((-760388899101963/250000000000000)) * x13)))) + rnd32((rnd32((200137260760893/31250000000000)) * x14))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2288900303754593/2500000000000000); err = (12295140518/152587890625)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-22554566987000557/10000000000000000); err = (-32461205092/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-5247314944310073/2500000000000000); err = (229448360248/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2168601717666299/250000000000000); err = (68938169648/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-37171992112307/4000000000000); err = (1170747632/244140625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-35083895233614797/10000000000000000); err = (-129024138032/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-7237269188346147/5000000000000000); err = (48125366486/152587890625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-2203440230725679/1000000000000000); err = (-21178422648/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-44754918643093/31250000000000); err = (353908038/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1029700451972813/200000000000000); err = (-9214919744/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1994197734317897/200000000000000); err = (-40752013264/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (145621620633267/15625000000000); err = (-227276606944/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (2400059736432353/500000000000000); err = (37294229472/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-760388899101963/250000000000000); err = (23896992276/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (200137260760893/31250000000000); err = (52181470912/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((((((((((((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + ((-37171992112307/4000000000000) * x4)) + ((-35083895233614797/10000000000000000) * x5)) + ((-7237269188346147/5000000000000000) * x6)) + ((-2203440230725679/1000000000000000) * x7)) + ((-44754918643093/31250000000000) * x8)) + ((1029700451972813/200000000000000) * x9)) + ((-1994197734317897/200000000000000) * x10)) + ((145621620633267/15625000000000) * x11)) + ((2400059736432353/500000000000000) * x12)) + ((-760388899101963/250000000000000) * x13)) + ((200137260760893/31250000000000) * x14))
-1 (131): exp = -24: (15/5070602400912917605986812821504)
1 (1): exp = -24: (((((((((((((((x0 * (12295140518/152587890625)) + (x1 * (-32461205092/152587890625))) + (x2 * (229448360248/152587890625))) + (x3 * (68938169648/30517578125))) + (x4 * (1170747632/244140625))) + (x5 * (-129024138032/152587890625))) + (x6 * (48125366486/152587890625))) + (x7 * (-21178422648/30517578125))) + (x8 * (353908038/30517578125))) + (x9 * (-9214919744/6103515625))) + (x10 * (-40752013264/6103515625))) + (x11 * (-227276606944/30517578125))) + (x12 * (37294229472/30517578125))) + (x13 * (23896992276/30517578125))) + (x14 * (52181470912/30517578125)))
2 (3): exp = -24: floor_power2((((-2288900303754593/2500000000000000) * x0) + interval(-4.80278926484375018370e-09, 4.80278926484375018370e-09)))
3 (7): exp = -24: floor_power2((((-22554566987000557/10000000000000000) * x1) + interval(-1.26801582390625001668e-08, 1.26801582390625001668e-08)))
4 (9): exp = -24: floor_power2(((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + interval(-1.66494559442382886470e-07, 1.66494559442382886470e-07)))
5 (13): exp = -24: floor_power2((((-5247314944310073/2500000000000000) * x2) + interval(-8.96282657218750102723e-08, 8.96282657218750102723e-08)))
6 (15): exp = -24: floor_power2((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + interval(-4.94541404265820582030e-07, 4.94541404265820582030e-07)))
7 (19): exp = -24: floor_power2((((-2168601717666299/250000000000000) * x3) + interval(-1.34644862593750006778e-07, 1.34644862593750006778e-07)))
8 (21): exp = -24: floor_power2(((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + interval(-1.34444200416425843292e-06, 1.34444200416425843292e-06)))
9 (25): exp = -24: floor_power2((((-37171992112307/4000000000000) * x4) + interval(-2.85827058593750013100e-07, 2.85827058593750013100e-07)))
10 (27): exp = -24: floor_power2((((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + ((-37171992112307/4000000000000) * x4)) + interval(-2.58394337916425902835e-06, 2.58394337916425902835e-06)))
11 (31): exp = -24: floor_power2((((-35083895233614797/10000000000000000) * x5) + interval(-5.04000539187500043415e-08, 5.04000539187500043415e-08)))
12 (33): exp = -24: floor_power2(((((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + ((-37171992112307/4000000000000) * x4)) + ((-35083895233614797/10000000000000000) * x5)) + interval(-3.70722703904004029593e-06, 3.70722703904004029593e-06)))
13 (37): exp = -24: floor_power2((((-7237269188346147/5000000000000000) * x6) + interval(-1.87989712835937502586e-08, 1.87989712835937502586e-08)))
14 (39): exp = -24: floor_power2((((((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + ((-37171992112307/4000000000000) * x4)) + ((-35083895233614797/10000000000000000) * x5)) + ((-7237269188346147/5000000000000000) * x6)) + interval(-4.73930497150527550167e-06, 4.73930497150527550167e-06)))
15 (43): exp = -24: floor_power2((((-2203440230725679/1000000000000000) * x7) + interval(-4.13641067343750040427e-08, 4.13641067343750040427e-08)))
16 (45): exp = -24: floor_power2(((((((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + ((-37171992112307/4000000000000) * x4)) + ((-35083895233614797/10000000000000000) * x5)) + ((-7237269188346147/5000000000000000) * x6)) + ((-2203440230725679/1000000000000000) * x7)) + interval(-5.85355268419668279466e-06, 5.85355268419668279466e-06)))
17 (49): exp = -24: floor_power2((((-44754918643093/31250000000000) * x8) + interval(-6.91226636718750001102e-10, 6.91226636718750001102e-10)))
18 (51): exp = -24: floor_power2((((((((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + ((-37171992112307/4000000000000) * x4)) + ((-35083895233614797/10000000000000000) * x5)) + ((-7237269188346147/5000000000000000) * x6)) + ((-2203440230725679/1000000000000000) * x7)) + ((-44754918643093/31250000000000) * x8)) + interval(-6.86752287201504146293e-06, 6.86752287201504146293e-06)))
19 (55): exp = -24: floor_power2((((1029700451972813/200000000000000) * x9) + interval(-8.99894506250000060840e-08, 8.99894506250000060840e-08)))
20 (57): exp = -24: floor_power2(((((((((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + ((-37171992112307/4000000000000) * x4)) + ((-35083895233614797/10000000000000000) * x5)) + ((-7237269188346147/5000000000000000) * x6)) + ((-2203440230725679/1000000000000000) * x7)) + ((-44754918643093/31250000000000) * x8)) + ((1029700451972813/200000000000000) * x9)) + interval(-8.14960521814785632483e-06, 8.14960521814785632483e-06)))
21 (61): exp = -24: floor_power2((((-1994197734317897/200000000000000) * x10) + interval(-3.97968879531250031161e-07, 3.97968879531250031161e-07)))
22 (63): exp = -24: floor_power2((((((((((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + ((-37171992112307/4000000000000) * x4)) + ((-35083895233614797/10000000000000000) * x5)) + ((-7237269188346147/5000000000000000) * x6)) + ((-2203440230725679/1000000000000000) * x7)) + ((-44754918643093/31250000000000) * x8)) + ((1029700451972813/200000000000000) * x9)) + ((-1994197734317897/200000000000000) * x10)) + interval(-1.09317598886947324677e-05, 1.09317598886947324677e-05)))
23 (67): exp = -24: floor_power2((((145621620633267/15625000000000) * x11) + interval(-4.43899622937500039530e-07, 4.43899622937500039530e-07)))
24 (69): exp = -24: floor_power2(((((((((((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + ((-37171992112307/4000000000000) * x4)) + ((-35083895233614797/10000000000000000) * x5)) + ((-7237269188346147/5000000000000000) * x6)) + ((-2203440230725679/1000000000000000) * x7)) + ((-44754918643093/31250000000000) * x8)) + ((1029700451972813/200000000000000) * x9)) + ((-1994197734317897/200000000000000) * x10)) + ((145621620633267/15625000000000) * x11)) + interval(-1.37598453026478617954e-05, 1.37598453026478617954e-05)))
25 (73): exp = -24: floor_power2((((2400059736432353/500000000000000) * x12) + interval(-7.28402919375000026210e-08, 7.28402919375000026210e-08)))
26 (75): exp = -24: floor_power2((((((((((((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + ((-37171992112307/4000000000000) * x4)) + ((-35083895233614797/10000000000000000) * x5)) + ((-7237269188346147/5000000000000000) * x6)) + ((-2203440230725679/1000000000000000) * x7)) + ((-44754918643093/31250000000000) * x8)) + ((1029700451972813/200000000000000) * x9)) + ((-1994197734317897/200000000000000) * x10)) + ((145621620633267/15625000000000) * x11)) + ((2400059736432353/500000000000000) * x12)) + interval(-1.59784528064994238612e-05, 1.59784528064994238612e-05)))
27 (79): exp = -24: floor_power2((((-760388899101963/250000000000000) * x13) + interval(-4.66738130390625008327e-08, 4.66738130390625008327e-08)))
28 (81): exp = -24: floor_power2(((((((((((((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + ((-37171992112307/4000000000000) * x4)) + ((-35083895233614797/10000000000000000) * x5)) + ((-7237269188346147/5000000000000000) * x6)) + ((-2203440230725679/1000000000000000) * x7)) + ((-44754918643093/31250000000000) * x8)) + ((1029700451972813/200000000000000) * x9)) + ((-1994197734317897/200000000000000) * x10)) + ((145621620633267/15625000000000) * x11)) + ((2400059736432353/500000000000000) * x12)) + ((-760388899101963/250000000000000) * x13)) + interval(-1.80516845419017707950e-05, 1.80516845419017707950e-05)))
29 (85): exp = -24: floor_power2((((200137260760893/31250000000000) * x14) + interval(-1.01916935375000002479e-07, 1.01916935375000002479e-07)))
30 (87): exp = -24: floor_power2((((((((((((((((((-2288900303754593/2500000000000000) * x0) + ((-22554566987000557/10000000000000000) * x1)) + ((-5247314944310073/2500000000000000) * x2)) + ((-2168601717666299/250000000000000) * x3)) + ((-37171992112307/4000000000000) * x4)) + ((-35083895233614797/10000000000000000) * x5)) + ((-7237269188346147/5000000000000000) * x6)) + ((-2203440230725679/1000000000000000) * x7)) + ((-44754918643093/31250000000000) * x8)) + ((1029700451972813/200000000000000) * x9)) + ((-1994197734317897/200000000000000) * x10)) + ((145621620633267/15625000000000) * x11)) + ((2400059736432353/500000000000000) * x12)) + ((-760388899101963/250000000000000) * x13)) + ((200137260760893/31250000000000) * x14)) + interval(-2.22067173220033342107e-05, 2.22067173220033342107e-05)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((-2288900303754593/2500000000000000)) * x0))
3: rnd32((rnd32((-22554566987000557/10000000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1))))
5: rnd32((rnd32((-5247314944310073/2500000000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2))))
7: rnd32((rnd32((-2168601717666299/250000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3))))
9: rnd32((rnd32((-37171992112307/4000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3)))) + rnd32((rnd32((-37171992112307/4000000000000)) * x4))))
11: rnd32((rnd32((-35083895233614797/10000000000000000)) * x5))
12: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3)))) + rnd32((rnd32((-37171992112307/4000000000000)) * x4)))) + rnd32((rnd32((-35083895233614797/10000000000000000)) * x5))))
13: rnd32((rnd32((-7237269188346147/5000000000000000)) * x6))
14: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3)))) + rnd32((rnd32((-37171992112307/4000000000000)) * x4)))) + rnd32((rnd32((-35083895233614797/10000000000000000)) * x5)))) + rnd32((rnd32((-7237269188346147/5000000000000000)) * x6))))
15: rnd32((rnd32((-2203440230725679/1000000000000000)) * x7))
16: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3)))) + rnd32((rnd32((-37171992112307/4000000000000)) * x4)))) + rnd32((rnd32((-35083895233614797/10000000000000000)) * x5)))) + rnd32((rnd32((-7237269188346147/5000000000000000)) * x6)))) + rnd32((rnd32((-2203440230725679/1000000000000000)) * x7))))
17: rnd32((rnd32((-44754918643093/31250000000000)) * x8))
18: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3)))) + rnd32((rnd32((-37171992112307/4000000000000)) * x4)))) + rnd32((rnd32((-35083895233614797/10000000000000000)) * x5)))) + rnd32((rnd32((-7237269188346147/5000000000000000)) * x6)))) + rnd32((rnd32((-2203440230725679/1000000000000000)) * x7)))) + rnd32((rnd32((-44754918643093/31250000000000)) * x8))))
19: rnd32((rnd32((1029700451972813/200000000000000)) * x9))
20: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3)))) + rnd32((rnd32((-37171992112307/4000000000000)) * x4)))) + rnd32((rnd32((-35083895233614797/10000000000000000)) * x5)))) + rnd32((rnd32((-7237269188346147/5000000000000000)) * x6)))) + rnd32((rnd32((-2203440230725679/1000000000000000)) * x7)))) + rnd32((rnd32((-44754918643093/31250000000000)) * x8)))) + rnd32((rnd32((1029700451972813/200000000000000)) * x9))))
21: rnd32((rnd32((-1994197734317897/200000000000000)) * x10))
22: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3)))) + rnd32((rnd32((-37171992112307/4000000000000)) * x4)))) + rnd32((rnd32((-35083895233614797/10000000000000000)) * x5)))) + rnd32((rnd32((-7237269188346147/5000000000000000)) * x6)))) + rnd32((rnd32((-2203440230725679/1000000000000000)) * x7)))) + rnd32((rnd32((-44754918643093/31250000000000)) * x8)))) + rnd32((rnd32((1029700451972813/200000000000000)) * x9)))) + rnd32((rnd32((-1994197734317897/200000000000000)) * x10))))
23: rnd32((rnd32((145621620633267/15625000000000)) * x11))
24: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3)))) + rnd32((rnd32((-37171992112307/4000000000000)) * x4)))) + rnd32((rnd32((-35083895233614797/10000000000000000)) * x5)))) + rnd32((rnd32((-7237269188346147/5000000000000000)) * x6)))) + rnd32((rnd32((-2203440230725679/1000000000000000)) * x7)))) + rnd32((rnd32((-44754918643093/31250000000000)) * x8)))) + rnd32((rnd32((1029700451972813/200000000000000)) * x9)))) + rnd32((rnd32((-1994197734317897/200000000000000)) * x10)))) + rnd32((rnd32((145621620633267/15625000000000)) * x11))))
25: rnd32((rnd32((2400059736432353/500000000000000)) * x12))
26: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3)))) + rnd32((rnd32((-37171992112307/4000000000000)) * x4)))) + rnd32((rnd32((-35083895233614797/10000000000000000)) * x5)))) + rnd32((rnd32((-7237269188346147/5000000000000000)) * x6)))) + rnd32((rnd32((-2203440230725679/1000000000000000)) * x7)))) + rnd32((rnd32((-44754918643093/31250000000000)) * x8)))) + rnd32((rnd32((1029700451972813/200000000000000)) * x9)))) + rnd32((rnd32((-1994197734317897/200000000000000)) * x10)))) + rnd32((rnd32((145621620633267/15625000000000)) * x11)))) + rnd32((rnd32((2400059736432353/500000000000000)) * x12))))
27: rnd32((rnd32((-760388899101963/250000000000000)) * x13))
28: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3)))) + rnd32((rnd32((-37171992112307/4000000000000)) * x4)))) + rnd32((rnd32((-35083895233614797/10000000000000000)) * x5)))) + rnd32((rnd32((-7237269188346147/5000000000000000)) * x6)))) + rnd32((rnd32((-2203440230725679/1000000000000000)) * x7)))) + rnd32((rnd32((-44754918643093/31250000000000)) * x8)))) + rnd32((rnd32((1029700451972813/200000000000000)) * x9)))) + rnd32((rnd32((-1994197734317897/200000000000000)) * x10)))) + rnd32((rnd32((145621620633267/15625000000000)) * x11)))) + rnd32((rnd32((2400059736432353/500000000000000)) * x12)))) + rnd32((rnd32((-760388899101963/250000000000000)) * x13))))
29: rnd32((rnd32((200137260760893/31250000000000)) * x14))
30: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((-2288900303754593/2500000000000000)) * x0)) + rnd32((rnd32((-22554566987000557/10000000000000000)) * x1)))) + rnd32((rnd32((-5247314944310073/2500000000000000)) * x2)))) + rnd32((rnd32((-2168601717666299/250000000000000)) * x3)))) + rnd32((rnd32((-37171992112307/4000000000000)) * x4)))) + rnd32((rnd32((-35083895233614797/10000000000000000)) * x5)))) + rnd32((rnd32((-7237269188346147/5000000000000000)) * x6)))) + rnd32((rnd32((-2203440230725679/1000000000000000)) * x7)))) + rnd32((rnd32((-44754918643093/31250000000000)) * x8)))) + rnd32((rnd32((1029700451972813/200000000000000)) * x9)))) + rnd32((rnd32((-1994197734317897/200000000000000)) * x10)))) + rnd32((rnd32((145621620633267/15625000000000)) * x11)))) + rnd32((rnd32((2400059736432353/500000000000000)) * x12)))) + rnd32((rnd32((-760388899101963/250000000000000)) * x13)))) + rnd32((rnd32((200137260760893/31250000000000)) * x14))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 1000000, max = 1000000): 1000000
min = -7.051413e+01 (lower_min = -6.409593e+01)
max = 7.051413e+01 (lower_max = 6.409593e+01)
subopt = 6.418199e+00 (9.1%)
bounds: [-7.051413e+01, 7.051413e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 2.958228e-30 (lower_min = 2.958228e-30)
max = 2.958228e-30 (lower_max = 2.958228e-30)
subopt = 0.000000e+00 (0.0%)
rmin(result = 2.958228e-30, lower = 2.958228e-30), rmax(result = 2.958228e-30, lower = 2.958228e-30)
-1: exp = -24: 2.958228e-30 (low = 2.958228e-30, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 1000000): 1000000
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 4.196317e+02 (lower_max = 3.452301e+02)
subopt = 7.440159e+01 (17.7%)
exact bound (exp = -24): 4.196317e+02 (low = 3.452301e+02, subopt = 17.7%)
total2: 1.763242e-37 (low = 1.763242e-37, subopt = 0.0%)
exact total: 2.501200e-05 (low = 2.057732e-05, subopt = 17.7%)

Elapsed time: 156.54845
Processing: exp39

*************************************
Taylor form for: rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((rnd32((42965808751803/250000000000000)) * rnd32(x0))) + rnd32((rnd32((9469458133312479/1000000000000000)) * rnd32(x1))))) + rnd32((rnd32((-95585628551697/31250000000000)) * rnd32(x2))))) + rnd32((rnd32((1919295506583817/200000000000000)) * rnd32(x3))))) + rnd32((rnd32((-818548184999683/500000000000000)) * rnd32(x4))))) + rnd32((rnd32((-7105009932019751/2000000000000000)) * rnd32(x5))))) + rnd32((rnd32((350084226225497/50000000000000)) * rnd32(x6))))) + rnd32((rnd32((-802844893227931/200000000000000)) * rnd32(x7))))) + rnd32((rnd32((-1985794846832853/200000000000000)) * rnd32(x8))))) + rnd32((rnd32((1630231642601517/250000000000000)) * rnd32(x9))))) + rnd32((rnd32((-1263154033252281/1000000000000000)) * rnd32(x10))))) + rnd32((rnd32((8137255084380243/1000000000000000)) * rnd32(x11))))) + rnd32((rnd32((1100305190328081/125000000000000)) * rnd32(x12))))) + rnd32((rnd32((-1086635404257347/1000000000000000)) * rnd32(x13))))) + rnd32((rnd32((-30454167184494807/100000000000000000)) * rnd32(x14)))))

Conservative bound: [-74.546028, 74.546028]

Simplified rounding: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3)))) + rnd32((rnd32((-818548184999683/500000000000000)) * x4)))) + rnd32((rnd32((-7105009932019751/2000000000000000)) * x5)))) + rnd32((rnd32((350084226225497/50000000000000)) * x6)))) + rnd32((rnd32((-802844893227931/200000000000000)) * x7)))) + rnd32((rnd32((-1985794846832853/200000000000000)) * x8)))) + rnd32((rnd32((1630231642601517/250000000000000)) * x9)))) + rnd32((rnd32((-1263154033252281/1000000000000000)) * x10)))) + rnd32((rnd32((8137255084380243/1000000000000000)) * x11)))) + rnd32((rnd32((1100305190328081/125000000000000)) * x12)))) + rnd32((rnd32((-1086635404257347/1000000000000000)) * x13)))) + rnd32((rnd32((-30454167184494807/100000000000000000)) * x14))))
Building Taylor forms...
const_rnd_form
precise_const_rnd_form
Inexact constant: (42965808751803/250000000000000); err = (7090744463/61035156250)
var_form
mul_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (9469458133312479/1000000000000000); err = (-228712760752/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-95585628551697/31250000000000); err = (12980871352/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1919295506583817/200000000000000); err = (2495914304/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-818548184999683/500000000000000); err = (17935324608/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-7105009932019751/2000000000000000); err = (25762318744/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (350084226225497/50000000000000); err = (-14455807144/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-802844893227931/200000000000000); err = (6464174328/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1985794846832853/200000000000000); err = (-8453420736/6103515625)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1630231642601517/250000000000000); err = (48579156816/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1263154033252281/1000000000000000); err = (-1743917872/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (8137255084380243/1000000000000000); err = (189140184416/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (1100305190328081/125000000000000); err = (-38072430224/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-1086635404257347/1000000000000000); err = (-27175074164/30517578125)
var_form
mul_form
rounded_form
add_form
rounded_form
const_rnd_form
precise_const_rnd_form
Inexact constant: (-30454167184494807/100000000000000000); err = (138025188783/1525878906250)
var_form
mul_form
rounded_form
add_form
rounded_form
Simplifying Taylor forms...
success
v0 = ((((((((((((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + ((-818548184999683/500000000000000) * x4)) + ((-7105009932019751/2000000000000000) * x5)) + ((350084226225497/50000000000000) * x6)) + ((-802844893227931/200000000000000) * x7)) + ((-1985794846832853/200000000000000) * x8)) + ((1630231642601517/250000000000000) * x9)) + ((-1263154033252281/1000000000000000) * x10)) + ((8137255084380243/1000000000000000) * x11)) + ((1100305190328081/125000000000000) * x12)) + ((-1086635404257347/1000000000000000) * x13)) + ((-30454167184494807/100000000000000000) * x14))
-1 (131): exp = -24: (15/5070602400912917605986812821504)
1 (1): exp = -24: (((((((((((((((x0 * (7090744463/61035156250)) + (x1 * (-228712760752/30517578125))) + (x2 * (12980871352/30517578125))) + (x3 * (2495914304/6103515625))) + (x4 * (17935324608/30517578125))) + (x5 * (25762318744/30517578125))) + (x6 * (-14455807144/6103515625))) + (x7 * (6464174328/6103515625))) + (x8 * (-8453420736/6103515625))) + (x9 * (48579156816/30517578125))) + (x10 * (-1743917872/30517578125))) + (x11 * (189140184416/30517578125))) + (x12 * (-38072430224/30517578125))) + (x13 * (-27175074164/30517578125))) + (x14 * (138025188783/1525878906250)))
2 (3): exp = -24: floor_power2((((42965808751803/250000000000000) * x0) + interval(-6.92455513964843808941e-09, 6.92455513964843808941e-09)))
3 (7): exp = -24: floor_power2((((9469458133312479/1000000000000000) * x1) + interval(-4.46704610843750049563e-07, 4.46704610843750049563e-07)))
4 (9): exp = -24: floor_power2(((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + interval(-9.37916904783447629279e-07, 9.37916904783447629279e-07)))
5 (13): exp = -24: floor_power2((((-95585628551697/31250000000000) * x2) + interval(-2.53532643593750031826e-08, 2.53532643593750031826e-08)))
6 (15): exp = -24: floor_power2((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + interval(-1.55931661689672897511e-06, 1.55931661689672897511e-06)))
7 (19): exp = -24: floor_power2((((1919295506583817/200000000000000) * x3) + interval(-2.43741631250000031924e-08, 2.43741631250000031924e-08)))
8 (21): exp = -24: floor_power2(((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + interval(-2.53736509642797955732e-06, 2.53736509642797955732e-06)))
9 (25): exp = -24: floor_power2((((-818548184999683/500000000000000) * x4) + interval(-3.50299308750000040294e-08, 3.50299308750000040294e-08)))
10 (27): exp = -24: floor_power2((((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + ((-818548184999683/500000000000000) * x4)) + interval(-3.58567398848462006724e-06, 3.58567398848462006724e-06)))
11 (31): exp = -24: floor_power2((((-7105009932019751/2000000000000000) * x5) + interval(-5.03170287968750000838e-08, 5.03170287968750000838e-08)))
12 (33): exp = -24: floor_power2(((((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + ((-818548184999683/500000000000000) * x4)) + ((-7105009932019751/2000000000000000) * x5)) + interval(-4.70887462323852689966e-06, 4.70887462323852689966e-06)))
13 (37): exp = -24: floor_power2((((350084226225497/50000000000000) * x6) + interval(-1.41169991640625000619e-07, 1.41169991640625000619e-07)))
14 (39): exp = -24: floor_power2((((((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + ((-818548184999683/500000000000000) * x4)) + ((-7105009932019751/2000000000000000) * x5)) + ((350084226225497/50000000000000) * x6)) + interval(-6.04213751038696535319e-06, 6.04213751038696535319e-06)))
15 (43): exp = -24: floor_power2((((-802844893227931/200000000000000) * x7) + interval(-6.31267024218750009082e-08, 6.31267024218750009082e-08)))
16 (45): exp = -24: floor_power2(((((((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + ((-818548184999683/500000000000000) * x4)) + ((-7105009932019751/2000000000000000) * x5)) + ((350084226225497/50000000000000) * x6)) + ((-802844893227931/200000000000000) * x7)) + interval(-8.25103142472290358202e-06, 8.25103142472290358202e-06)))
17 (49): exp = -24: floor_power2((((-1985794846832853/200000000000000) * x8) + interval(-8.25529368750000073734e-08, 8.25529368750000073734e-08)))
18 (51): exp = -24: floor_power2((((((((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + ((-818548184999683/500000000000000) * x4)) + ((-7105009932019751/2000000000000000) * x5)) + ((350084226225497/50000000000000) * x6)) + ((-802844893227931/200000000000000) * x7)) + ((-1985794846832853/200000000000000) * x8)) + interval(-1.07177701526135299393e-05, 1.07177701526135299393e-05)))
19 (55): exp = -24: floor_power2((((1630231642601517/250000000000000) * x9) + interval(-9.48811656562500030927e-08, 9.48811656562500030927e-08)))
20 (57): exp = -24: floor_power2(((((((((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + ((-818548184999683/500000000000000) * x4)) + ((-7105009932019751/2000000000000000) * x5)) + ((350084226225497/50000000000000) * x6)) + ((-802844893227931/200000000000000) * x7)) + ((-1985794846832853/200000000000000) * x8)) + ((1630231642601517/250000000000000) * x9)) + interval(-1.29584185301838429718e-05, 1.29584185301838429718e-05)))
21 (61): exp = -24: floor_power2((((-1263154033252281/1000000000000000) * x10) + interval(-3.40608959375000035798e-09, 3.40608959375000035798e-09)))
22 (63): exp = -24: floor_power2((((((((((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + ((-818548184999683/500000000000000) * x4)) + ((-7105009932019751/2000000000000000) * x5)) + ((350084226225497/50000000000000) * x6)) + ((-802844893227931/200000000000000) * x7)) + ((-1985794846832853/200000000000000) * x8)) + ((1630231642601517/250000000000000) * x9)) + ((-1263154033252281/1000000000000000) * x10)) + interval(-1.49287778973654835786e-05, 1.49287778973654835786e-05)))
23 (67): exp = -24: floor_power2((((8137255084380243/1000000000000000) * x11) + interval(-3.69414422687500032836e-07, 3.69414422687500032836e-07)))
24 (69): exp = -24: floor_power2(((((((((((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + ((-818548184999683/500000000000000) * x4)) + ((-7105009932019751/2000000000000000) * x5)) + ((350084226225497/50000000000000) * x6)) + ((-802844893227931/200000000000000) * x7)) + ((-1985794846832853/200000000000000) * x8)) + ((1630231642601517/250000000000000) * x9)) + ((-1263154033252281/1000000000000000) * x10)) + ((8137255084380243/1000000000000000) * x11)) + interval(-1.76823781110686098820e-05, 1.76823781110686098820e-05)))
25 (73): exp = -24: floor_power2((((1100305190328081/125000000000000) * x12) + interval(-7.43602152812500088152e-08, 7.43602152812500088152e-08)))
26 (75): exp = -24: floor_power2((((((((((((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + ((-818548184999683/500000000000000) * x4)) + ((-7105009932019751/2000000000000000) * x5)) + ((350084226225497/50000000000000) * x6)) + ((-802844893227931/200000000000000) * x7)) + ((-1985794846832853/200000000000000) * x8)) + ((1630231642601517/250000000000000) * x9)) + ((-1263154033252281/1000000000000000) * x10)) + ((8137255084380243/1000000000000000) * x11)) + ((1100305190328081/125000000000000) * x12)) + interval(-2.20482727501779894965e-05, 2.20482727501779894965e-05)))
27 (79): exp = -24: floor_power2((((-1086635404257347/1000000000000000) * x13) + interval(-5.30763167265625015607e-08, 5.30763167265625015607e-08)))
28 (81): exp = -24: floor_power2(((((((((((((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + ((-818548184999683/500000000000000) * x4)) + ((-7105009932019751/2000000000000000) * x5)) + ((350084226225497/50000000000000) * x6)) + ((-802844893227931/200000000000000) * x7)) + ((-1985794846832853/200000000000000) * x8)) + ((1630231642601517/250000000000000) * x9)) + ((-1263154033252281/1000000000000000) * x10)) + ((8137255084380243/1000000000000000) * x11)) + ((1100305190328081/125000000000000) * x12)) + ((-1086635404257347/1000000000000000) * x13)) + interval(-2.59756509773049400224e-05, 2.59756509773049400224e-05)))
29 (85): exp = -24: floor_power2((((-30454167184494807/100000000000000000) * x14) + interval(-5.39160893683593819317e-09, 5.39160893683593819317e-09)))
30 (87): exp = -24: floor_power2((((((((((((((((((42965808751803/250000000000000) * x0) + ((9469458133312479/1000000000000000) * x1)) + ((-95585628551697/31250000000000) * x2)) + ((1919295506583817/200000000000000) * x3)) + ((-818548184999683/500000000000000) * x4)) + ((-7105009932019751/2000000000000000) * x5)) + ((350084226225497/50000000000000) * x6)) + ((-802844893227931/200000000000000) * x7)) + ((-1985794846832853/200000000000000) * x8)) + ((1630231642601517/250000000000000) * x9)) + ((-1263154033252281/1000000000000000) * x10)) + ((8137255084380243/1000000000000000) * x11)) + ((1100305190328081/125000000000000) * x12)) + ((-1086635404257347/1000000000000000) * x13)) + ((-30454167184494807/100000000000000000) * x14)) + interval(-2.98106410130606256335e-05, 2.98106410130606256335e-05)))

Corresponding original subexpressions:
1: rnd32(0)
2: rnd32((rnd32((42965808751803/250000000000000)) * x0))
3: rnd32((rnd32((9469458133312479/1000000000000000)) * x1))
4: rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1))))
5: rnd32((rnd32((-95585628551697/31250000000000)) * x2))
6: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2))))
7: rnd32((rnd32((1919295506583817/200000000000000)) * x3))
8: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3))))
9: rnd32((rnd32((-818548184999683/500000000000000)) * x4))
10: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3)))) + rnd32((rnd32((-818548184999683/500000000000000)) * x4))))
11: rnd32((rnd32((-7105009932019751/2000000000000000)) * x5))
12: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3)))) + rnd32((rnd32((-818548184999683/500000000000000)) * x4)))) + rnd32((rnd32((-7105009932019751/2000000000000000)) * x5))))
13: rnd32((rnd32((350084226225497/50000000000000)) * x6))
14: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3)))) + rnd32((rnd32((-818548184999683/500000000000000)) * x4)))) + rnd32((rnd32((-7105009932019751/2000000000000000)) * x5)))) + rnd32((rnd32((350084226225497/50000000000000)) * x6))))
15: rnd32((rnd32((-802844893227931/200000000000000)) * x7))
16: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3)))) + rnd32((rnd32((-818548184999683/500000000000000)) * x4)))) + rnd32((rnd32((-7105009932019751/2000000000000000)) * x5)))) + rnd32((rnd32((350084226225497/50000000000000)) * x6)))) + rnd32((rnd32((-802844893227931/200000000000000)) * x7))))
17: rnd32((rnd32((-1985794846832853/200000000000000)) * x8))
18: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3)))) + rnd32((rnd32((-818548184999683/500000000000000)) * x4)))) + rnd32((rnd32((-7105009932019751/2000000000000000)) * x5)))) + rnd32((rnd32((350084226225497/50000000000000)) * x6)))) + rnd32((rnd32((-802844893227931/200000000000000)) * x7)))) + rnd32((rnd32((-1985794846832853/200000000000000)) * x8))))
19: rnd32((rnd32((1630231642601517/250000000000000)) * x9))
20: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3)))) + rnd32((rnd32((-818548184999683/500000000000000)) * x4)))) + rnd32((rnd32((-7105009932019751/2000000000000000)) * x5)))) + rnd32((rnd32((350084226225497/50000000000000)) * x6)))) + rnd32((rnd32((-802844893227931/200000000000000)) * x7)))) + rnd32((rnd32((-1985794846832853/200000000000000)) * x8)))) + rnd32((rnd32((1630231642601517/250000000000000)) * x9))))
21: rnd32((rnd32((-1263154033252281/1000000000000000)) * x10))
22: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3)))) + rnd32((rnd32((-818548184999683/500000000000000)) * x4)))) + rnd32((rnd32((-7105009932019751/2000000000000000)) * x5)))) + rnd32((rnd32((350084226225497/50000000000000)) * x6)))) + rnd32((rnd32((-802844893227931/200000000000000)) * x7)))) + rnd32((rnd32((-1985794846832853/200000000000000)) * x8)))) + rnd32((rnd32((1630231642601517/250000000000000)) * x9)))) + rnd32((rnd32((-1263154033252281/1000000000000000)) * x10))))
23: rnd32((rnd32((8137255084380243/1000000000000000)) * x11))
24: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3)))) + rnd32((rnd32((-818548184999683/500000000000000)) * x4)))) + rnd32((rnd32((-7105009932019751/2000000000000000)) * x5)))) + rnd32((rnd32((350084226225497/50000000000000)) * x6)))) + rnd32((rnd32((-802844893227931/200000000000000)) * x7)))) + rnd32((rnd32((-1985794846832853/200000000000000)) * x8)))) + rnd32((rnd32((1630231642601517/250000000000000)) * x9)))) + rnd32((rnd32((-1263154033252281/1000000000000000)) * x10)))) + rnd32((rnd32((8137255084380243/1000000000000000)) * x11))))
25: rnd32((rnd32((1100305190328081/125000000000000)) * x12))
26: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3)))) + rnd32((rnd32((-818548184999683/500000000000000)) * x4)))) + rnd32((rnd32((-7105009932019751/2000000000000000)) * x5)))) + rnd32((rnd32((350084226225497/50000000000000)) * x6)))) + rnd32((rnd32((-802844893227931/200000000000000)) * x7)))) + rnd32((rnd32((-1985794846832853/200000000000000)) * x8)))) + rnd32((rnd32((1630231642601517/250000000000000)) * x9)))) + rnd32((rnd32((-1263154033252281/1000000000000000)) * x10)))) + rnd32((rnd32((8137255084380243/1000000000000000)) * x11)))) + rnd32((rnd32((1100305190328081/125000000000000)) * x12))))
27: rnd32((rnd32((-1086635404257347/1000000000000000)) * x13))
28: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3)))) + rnd32((rnd32((-818548184999683/500000000000000)) * x4)))) + rnd32((rnd32((-7105009932019751/2000000000000000)) * x5)))) + rnd32((rnd32((350084226225497/50000000000000)) * x6)))) + rnd32((rnd32((-802844893227931/200000000000000)) * x7)))) + rnd32((rnd32((-1985794846832853/200000000000000)) * x8)))) + rnd32((rnd32((1630231642601517/250000000000000)) * x9)))) + rnd32((rnd32((-1263154033252281/1000000000000000)) * x10)))) + rnd32((rnd32((8137255084380243/1000000000000000)) * x11)))) + rnd32((rnd32((1100305190328081/125000000000000)) * x12)))) + rnd32((rnd32((-1086635404257347/1000000000000000)) * x13))))
29: rnd32((rnd32((-30454167184494807/100000000000000000)) * x14))
30: rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd[32,ne,1.00,-24,0]((rnd32((rnd32((42965808751803/250000000000000)) * x0)) + rnd32((rnd32((9469458133312479/1000000000000000)) * x1)))) + rnd32((rnd32((-95585628551697/31250000000000)) * x2)))) + rnd32((rnd32((1919295506583817/200000000000000)) * x3)))) + rnd32((rnd32((-818548184999683/500000000000000)) * x4)))) + rnd32((rnd32((-7105009932019751/2000000000000000)) * x5)))) + rnd32((rnd32((350084226225497/50000000000000)) * x6)))) + rnd32((rnd32((-802844893227931/200000000000000)) * x7)))) + rnd32((rnd32((-1985794846832853/200000000000000)) * x8)))) + rnd32((rnd32((1630231642601517/250000000000000)) * x9)))) + rnd32((rnd32((-1263154033252281/1000000000000000)) * x10)))) + rnd32((rnd32((8137255084380243/1000000000000000)) * x11)))) + rnd32((rnd32((1100305190328081/125000000000000)) * x12)))) + rnd32((rnd32((-1086635404257347/1000000000000000)) * x13)))) + rnd32((rnd32((-30454167184494807/100000000000000000)) * x14))))

bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 1000000, max = 1000000): 1000000
min = -7.454598e+01 (lower_min = -6.219918e+01)
max = 7.454598e+01 (lower_max = 6.219918e+01)
subopt = 1.234680e+01 (16.6%)
bounds: [-7.454598e+01, 7.454598e+01]

Computing absolute errors
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 2.958228e-30 (lower_min = 2.958228e-30)
max = 2.958228e-30 (lower_max = 2.958228e-30)
subopt = 0.000000e+00 (0.0%)
rmin(result = 2.958228e-30, lower = 2.958228e-30), rmax(result = 2.958228e-30, lower = 2.958228e-30)
-1: exp = -24: 2.958228e-30 (low = 2.958228e-30, subopt = 0.0%)

Solving the exact optimization problem
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 1000000): 1000000
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 5.505755e+02 (lower_max = 3.495100e+02)
subopt = 2.010655e+02 (36.5%)
exact bound (exp = -24): 5.505755e+02 (low = 3.495100e+02, subopt = 36.5%)
total2: 1.763242e-37 (low = 1.763242e-37, subopt = 0.0%)
exact total: 3.281686e-05 (low = 2.083242e-05, subopt = 36.5%)

Elapsed time: 203.58340
*************************************

-------------------------------------------------------------------------------
Problem: exp00

Optimization lower bounds for error models:
The absolute error model (exact): 8.177394e-08 (suboptimality = 0.0%)

Bounds (without rounding): [-1.131158e+00, 1.131158e+00]
Bounds (floating-point): [-1.13115805387496970447e+00, 1.13115805387496970447e+00]

Absolute error (exact): 8.177394e-08

Elapsed time: 1.70

-------------------------------------------------------------------------------
Problem: exp01

Optimization lower bounds for error models:
The absolute error model (exact): 3.555750e-07 (suboptimality = 0.0%)

Bounds (without rounding): [-6.225621e+00, 6.225621e+00]
Bounds (floating-point): [-6.22562121934399392842e+00, 6.22562121934399392842e+00]

Absolute error (exact): 3.555750e-07

Elapsed time: 1.69

-------------------------------------------------------------------------------
Problem: exp02

Optimization lower bounds for error models:
The absolute error model (exact): 6.580896e-07 (suboptimality = 0.0%)

Bounds (without rounding): [-8.139579e+00, 8.139579e+00]
Bounds (floating-point): [-8.13957965861692400722e+00, 8.13957965861692400722e+00]

Absolute error (exact): 6.580896e-07

Elapsed time: 1.72

-------------------------------------------------------------------------------
Problem: exp03

Optimization lower bounds for error models:
The absolute error model (exact): 8.656923e-07 (suboptimality = 0.0%)

Bounds (without rounding): [-9.355299e+00, 9.355299e+00]
Bounds (floating-point): [-9.35529947280883966698e+00, 9.35529947280883966698e+00]

Absolute error (exact): 8.656923e-07

Elapsed time: 1.71

-------------------------------------------------------------------------------
Problem: exp04

Optimization lower bounds for error models:
The absolute error model (exact): 2.434248e-07 (suboptimality = 0.0%)

Bounds (without rounding): [-5.500151e+00, 5.500151e+00]
Bounds (floating-point): [-5.50015091896057217724e+00, 5.50015091896057217724e+00]

Absolute error (exact): 2.434248e-07

Elapsed time: 1.68

-------------------------------------------------------------------------------
Problem: exp05

Optimization lower bounds for error models:
The absolute error model (exact): 1.946790e-07 (suboptimality = 0.0%)

Bounds (without rounding): [-3.387629e+00, 3.387629e+00]
Bounds (floating-point): [-3.38762906386510209700e+00, 3.38762906386510209700e+00]

Absolute error (exact): 1.946790e-07

Elapsed time: 1.73

-------------------------------------------------------------------------------
Problem: exp06

Optimization lower bounds for error models:
The absolute error model (exact): 7.294049e-08 (suboptimality = 0.0%)

Bounds (without rounding): [-1.583164e+00, 1.583164e+00]
Bounds (floating-point): [-1.58316453978279625403e+00, 1.58316453978279625403e+00]

Absolute error (exact): 7.294049e-08

Elapsed time: 1.69

-------------------------------------------------------------------------------
Problem: exp07

Optimization lower bounds for error models:
The absolute error model (exact): 9.054946e-07 (suboptimality = 0.0%)

Bounds (without rounding): [-9.724116e+00, 9.724116e+00]
Bounds (floating-point): [-9.72411670585622545104e+00, 9.72411670585622545104e+00]

Absolute error (exact): 9.054946e-07

Elapsed time: 1.69

-------------------------------------------------------------------------------
Problem: exp08

Optimization lower bounds for error models:
The absolute error model (exact): 3.460511e-08 (suboptimality = 0.0%)

Bounds (without rounding): [-9.155601e-01, 9.155601e-01]
Bounds (floating-point): [-9.15560156106948963561e-01, 9.15560156106948963561e-01]

Absolute error (exact): 3.460511e-08

Elapsed time: 1.73

-------------------------------------------------------------------------------
Problem: exp09

Optimization lower bounds for error models:
The absolute error model (exact): 1.437514e-08 (suboptimality = 0.0%)

Bounds (without rounding): [-1.718632e-01, 1.718632e-01]
Bounds (floating-point): [-1.71863249382347760275e-01, 1.71863249382347760275e-01]

Absolute error (exact): 1.437514e-08

Elapsed time: 1.81

-------------------------------------------------------------------------------
Problem: exp10

Optimization lower bounds for error models:
The absolute error model (exact): 5.124823e-06 (suboptimality = 0.5%)

Bounds (without rounding): [-2.817285e+01, 2.817285e+01]
Bounds (floating-point): [-2.81728523832731418963e+01, 2.81728523832731418963e+01]

Absolute error (exact): 5.150749e-06

Elapsed time: 1.83

-------------------------------------------------------------------------------
Problem: exp11

Optimization lower bounds for error models:
The absolute error model (exact): 4.729660e-06 (suboptimality = 0.0%)

Bounds (without rounding): [-2.465945e+01, 2.465945e+01]
Bounds (floating-point): [-2.46594563401149500237e+01, 2.46594563401149500237e+01]

Absolute error (exact): 4.731490e-06

Elapsed time: 1.89

-------------------------------------------------------------------------------
Problem: exp12

Optimization lower bounds for error models:
The absolute error model (exact): 3.960321e-06 (suboptimality = 0.0%)

Bounds (without rounding): [-2.059493e+01, 2.059493e+01]
Bounds (floating-point): [-2.05949318863568855420e+01, 2.05949318863568855420e+01]

Absolute error (exact): 3.961701e-06

Elapsed time: 2.06

-------------------------------------------------------------------------------
Problem: exp13

Optimization lower bounds for error models:
The absolute error model (exact): 4.688309e-06 (suboptimality = 0.7%)

Bounds (without rounding): [-2.812004e+01, 2.812004e+01]
Bounds (floating-point): [-2.81200459746281410389e+01, 2.81200459746281410389e+01]

Absolute error (exact): 4.722759e-06

Elapsed time: 1.85

-------------------------------------------------------------------------------
Problem: exp14

Optimization lower bounds for error models:
The absolute error model (exact): 4.142724e-06 (suboptimality = 0.0%)

Bounds (without rounding): [-2.374632e+01, 2.374632e+01]
Bounds (floating-point): [-2.37463202259080965462e+01, 2.37463202259080965462e+01]

Absolute error (exact): 4.144338e-06

Elapsed time: 1.94

-------------------------------------------------------------------------------
Problem: exp15

Optimization lower bounds for error models:
The absolute error model (exact): 3.882732e-06 (suboptimality = 0.3%)

Bounds (without rounding): [-2.397049e+01, 2.397049e+01]
Bounds (floating-point): [-2.39704920692731882070e+01, 2.39704920692731882070e+01]

Absolute error (exact): 3.893194e-06

Elapsed time: 1.89

-------------------------------------------------------------------------------
Problem: exp16

Optimization lower bounds for error models:
The absolute error model (exact): 3.008160e-06 (suboptimality = 0.3%)

Bounds (without rounding): [-1.954473e+01, 1.954473e+01]
Bounds (floating-point): [-1.95447346552382335005e+01, 1.95447346552382335005e+01]

Absolute error (exact): 3.017107e-06

Elapsed time: 1.81

-------------------------------------------------------------------------------
Problem: exp17

Optimization lower bounds for error models:
The absolute error model (exact): 6.488771e-06 (suboptimality = 0.3%)

Bounds (without rounding): [-3.305875e+01, 3.305875e+01]
Bounds (floating-point): [-3.30587526205016999370e+01, 3.30587526205016999370e+01]

Absolute error (exact): 6.506174e-06

Elapsed time: 1.80

-------------------------------------------------------------------------------
Problem: exp18

Optimization lower bounds for error models:
The absolute error model (exact): 3.512257e-06 (suboptimality = 0.7%)

Bounds (without rounding): [-2.323735e+01, 2.323735e+01]
Bounds (floating-point): [-2.32373512342855690349e+01, 2.32373512342855690349e+01]

Absolute error (exact): 3.537618e-06

Elapsed time: 1.78

-------------------------------------------------------------------------------
Problem: exp19

Optimization lower bounds for error models:
The absolute error model (exact): 4.469394e-06 (suboptimality = 0.6%)

Bounds (without rounding): [-2.393364e+01, 2.393364e+01]
Bounds (floating-point): [-2.39336398815859752176e+01, 2.39336398815859752176e+01]

Absolute error (exact): 4.496694e-06

Elapsed time: 1.86

-------------------------------------------------------------------------------
Problem: exp20

Optimization lower bounds for error models:
The absolute error model (exact): 1.854901e-05 (suboptimality = 0.1%)

Bounds (without rounding): [-6.603836e+01, 6.603836e+01]
Bounds (floating-point): [-6.60383780709965293454e+01, 6.60383780709965293454e+01]

Absolute error (exact): 1.857445e-05

Elapsed time: 68.54

-------------------------------------------------------------------------------
Problem: exp21

Optimization lower bounds for error models:
The absolute error model (exact): 1.473418e-05 (suboptimality = 5.6%)

Bounds (without rounding): [-5.827615e+01, 5.827615e+01]
Bounds (floating-point): [-5.82761609743666326722e+01, 5.82761609743666326722e+01]

Absolute error (exact): 1.560533e-05

Elapsed time: 69.41

-------------------------------------------------------------------------------
Problem: exp22

Optimization lower bounds for error models:
The absolute error model (exact): 1.259252e-05 (suboptimality = 10.8%)

Bounds (without rounding): [-5.348071e+01, 5.348071e+01]
Bounds (floating-point): [-5.34807278445225975361e+01, 5.34807278445225975361e+01]

Absolute error (exact): 1.412255e-05

Elapsed time: 81.22

-------------------------------------------------------------------------------
Problem: exp23

Optimization lower bounds for error models:
The absolute error model (exact): 1.667404e-05 (suboptimality = 11.1%)

Bounds (without rounding): [-6.583930e+01, 6.583930e+01]
Bounds (floating-point): [-6.58393202987571726226e+01, 6.58393202987571726226e+01]

Absolute error (exact): 1.875025e-05

Elapsed time: 71.30

-------------------------------------------------------------------------------
Problem: exp24

Optimization lower bounds for error models:
The absolute error model (exact): 1.367927e-05 (suboptimality = 3.4%)

Bounds (without rounding): [-5.232079e+01, 5.232079e+01]
Bounds (floating-point): [-5.23208030801675505472e+01, 5.23208030801675505472e+01]

Absolute error (exact): 1.415703e-05

Elapsed time: 88.27

-------------------------------------------------------------------------------
Problem: exp25

Optimization lower bounds for error models:
The absolute error model (exact): 1.174172e-05 (suboptimality = 15.8%)

Bounds (without rounding): [-4.815562e+01, 4.815562e+01]
Bounds (floating-point): [-4.81556328958824408915e+01, 4.81556328958824408915e+01]

Absolute error (exact): 1.393782e-05

Elapsed time: 83.13

-------------------------------------------------------------------------------
Problem: exp26

Optimization lower bounds for error models:
The absolute error model (exact): 1.204043e-05 (suboptimality = 9.9%)

Bounds (without rounding): [-4.851934e+01, 4.851934e+01]
Bounds (floating-point): [-4.85193557498971443920e+01, 4.85193557498971443920e+01]

Absolute error (exact): 1.335922e-05

Elapsed time: 79.07

-------------------------------------------------------------------------------
Problem: exp27

Optimization lower bounds for error models:
The absolute error model (exact): 1.719553e-05 (suboptimality = 11.3%)

Bounds (without rounding): [-6.420689e+01, 6.420689e+01]
Bounds (floating-point): [-6.42069109881738029344e+01, 6.42069109881738029344e+01]

Absolute error (exact): 1.938983e-05

Elapsed time: 80.94

-------------------------------------------------------------------------------
Problem: exp28

Optimization lower bounds for error models:
The absolute error model (exact): 9.927424e-06 (suboptimality = 0.2%)

Bounds (without rounding): [-3.697729e+01, 3.697729e+01]
Bounds (floating-point): [-3.69773008914307865780e+01, 3.69773008914307865780e+01]

Absolute error (exact): 9.946563e-06

Elapsed time: 6.74

-------------------------------------------------------------------------------
Problem: exp29

Optimization lower bounds for error models:
The absolute error model (exact): 1.452360e-05 (suboptimality = 1.1%)

Bounds (without rounding): [-5.495195e+01, 5.495195e+01]
Bounds (floating-point): [-5.49519648247670033925e+01, 5.49519648247670033925e+01]

Absolute error (exact): 1.467864e-05

Elapsed time: 81.54

-------------------------------------------------------------------------------
Problem: exp30

Optimization lower bounds for error models:
The absolute error model (exact): 3.522564e-05 (suboptimality = 13.7%)

Bounds (without rounding): [-1.071476e+02, 1.071476e+02]
Bounds (floating-point): [-1.07147675137696381853e+02, 1.07147675137696381853e+02]

Absolute error (exact): 4.083657e-05

Elapsed time: 152.32

-------------------------------------------------------------------------------
Problem: exp31

Optimization lower bounds for error models:
The absolute error model (exact): 2.199474e-05 (suboptimality = 25.3%)

Bounds (without rounding): [-6.993363e+01, 6.993363e+01]
Bounds (floating-point): [-6.99336579325506590976e+01, 6.99336579325506590976e+01]

Absolute error (exact): 2.946094e-05

Elapsed time: 207.38

-------------------------------------------------------------------------------
Problem: exp32

Optimization lower bounds for error models:
The absolute error model (exact): 1.848910e-05 (suboptimality = 44.0%)

Bounds (without rounding): [-8.645205e+01, 8.645205e+01]
Bounds (floating-point): [-8.64520847864074113431e+01, 8.64520847864074113431e+01]

Absolute error (exact): 3.301406e-05

Elapsed time: 202.41

-------------------------------------------------------------------------------
Problem: exp33

Optimization lower bounds for error models:
The absolute error model (exact): 2.062362e-05 (suboptimality = 48.9%)

Bounds (without rounding): [-9.603445e+01, 9.603445e+01]
Bounds (floating-point): [-9.60344932383160028166e+01, 9.60344932383160028166e+01]

Absolute error (exact): 4.038059e-05

Elapsed time: 209.11

-------------------------------------------------------------------------------
Problem: exp34

Optimization lower bounds for error models:
The absolute error model (exact): 2.027154e-05 (suboptimality = 35.5%)

Bounds (without rounding): [-7.848702e+01, 7.848702e+01]
Bounds (floating-point): [-7.84870515058025262078e+01, 7.84870515058025262078e+01]

Absolute error (exact): 3.140806e-05

Elapsed time: 205.11

-------------------------------------------------------------------------------
Problem: exp35

Optimization lower bounds for error models:
The absolute error model (exact): 1.811499e-05 (suboptimality = 36.6%)

Bounds (without rounding): [-7.009850e+01, 7.009850e+01]
Bounds (floating-point): [-7.00985330149400311939e+01, 7.00985330149400311939e+01]

Absolute error (exact): 2.856107e-05

Elapsed time: 195.54

-------------------------------------------------------------------------------
Problem: exp36

Optimization lower bounds for error models:
The absolute error model (exact): 1.617262e-05 (suboptimality = 49.3%)

Bounds (without rounding): [-7.667702e+01, 7.667702e+01]
Bounds (floating-point): [-7.66770534604897733288e+01, 7.66770534604897733288e+01]

Absolute error (exact): 3.187875e-05

Elapsed time: 205.75

-------------------------------------------------------------------------------
Problem: exp37

Optimization lower bounds for error models:
The absolute error model (exact): 2.970040e-05 (suboptimality = 26.0%)

Bounds (without rounding): [-8.945811e+01, 8.945811e+01]
Bounds (floating-point): [-8.94581536222154340976e+01, 8.94581536222154340976e+01]

Absolute error (exact): 4.014028e-05

Elapsed time: 159.55

-------------------------------------------------------------------------------
Problem: exp38

Optimization lower bounds for error models:
The absolute error model (exact): 2.057732e-05 (suboptimality = 17.7%)

Bounds (without rounding): [-7.051413e+01, 7.051413e+01]
Bounds (floating-point): [-7.05141557626060517805e+01, 7.05141557626060517805e+01]

Absolute error (exact): 2.501200e-05

Elapsed time: 156.55

-------------------------------------------------------------------------------
Problem: exp39

Optimization lower bounds for error models:
The absolute error model (exact): 2.083242e-05 (suboptimality = 36.5%)

Bounds (without rounding): [-7.454598e+01, 7.454598e+01]
Bounds (floating-point): [-7.45460106793404406744e+01, 7.45460106793404406744e+01]

Absolute error (exact): 3.281686e-05

Elapsed time: 203.58

